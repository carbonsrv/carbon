package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\xc1\x72\xdb\x36\x10\x3d\x5b\x5f\x81\x20\xa5\x0d\xb6\x14\x63\xe7\xd0\x99\xca\x86\x3b\x9d\xd4\x57\xbb\xe3\xaa\x87\x56\x52\x54\x98\x84\x2c\x8e\x28\x50\x25\x41\x8f\x53\x55\xfe\xf6\x2e\x08\x80\x04\x69\x51\x56\x0f\xb9\xf4\x10\x47\xc0\xee\x3e\xec\x3e\x3c\x2c\xc0\x4f\x77\xb7\xe3\x9b\xdb\xf1\x7c\x7c\x37\xbf\xbf\x19\xff\x76\x7f\x8b\x28\xda\x0e\x4e\xa2\x2c\xe6\xf4\xe3\xf9\x79\xa0\x7e\x0a\xc9\x85\xa4\x18\x0f\x76\x83\x34\x8b\x58\x8a\x96\x72\x9d\xce\x79\x11\xb1\x0d\xa7\xdb\x09\xbe\xc2\x33\x8a\x4f\x53\x79\x89\x83\x09\xbe\xae\x06\x8f\x7a\x70\x5a\x0d\xd8\x7a\x73\x89\x6d\x6c\x99\x27\x36\x74\x51\x8a\x48\x26\x99\x20\xcc\x1f\x9c\xe4\x5c\x96\xb9\x40\x04\x7b\x9e\x77\xfe\xf1\x19\xfb\xa3\x45\x96\xaf\x99\x24\x6c\xf4\xf0\x45\x72\xe2\xfb\x03\x2e\x62\x07\xa4\x14\x07\x60\x0a\x99\x27\xe2\x31\x8c\x96\x2c\x27\x32\x13\xe5\xfa\x81\xe7\x84\x05\x17\xdf\x1b\x18\x9b\xfc\xe0\x44\xd5\xd2\x40\x40\x1c\x80\xd4\xc9\xc0\x70\xf4\x58\x94\x0f\x04\x4f\xae\xae\x4f\x67\x38\x70\x2a\x07\xa4\x13\x80\x02\x86\xca\xfc\x28\x84\xcf\x6c\xf8\xf7\x4f\xc3\x3f\xce\x87\x3f\xcc\xc3\x97\x21\x80\x35\x54\x34\x58\xc5\x92\xa7\x47\xa1\x79\xc5\x9f\x2f\xef\xde\x7f\x73\xfa\x2d\xf1\xff\x99\x4e\xcf\xa6\xf8\xf2\xea\xfa\xc7\xed\x6e\xe2\xcd\x3e\x03\x34\x9e\x4e\xbd\x0b\x6c\x60\x61\xdf\x6a\xb2\xb6\xc7\xa6\xfb\x1d\x80\x20\xd8\x05\x3d\xf2\x3c\xe2\x3d\x7b\xcf\xbe\x4e\xda\xa2\x35\xf8\xc3\x21\x92\xec\x11\xad\xb9\x64\x92\x3d\xa4\xdc\xec\x13\xcc\xc1\xd4\x52\xad\x9a\x83\x23\xcf\x9d\x85\x79\xba\x50\x2b\x6b\x47\x23\x32\x18\x27\x0b\xa4\x4c\xa1\x99\x41\x72\xc9\x05\x4c\xd7\x32\xdc\xee\xd4\x08\xb4\x81\x92\xe0\x09\x25\x02\x25\x1b\x96\xe4\x05\x71\x83\x7c\x14\x67\xca\x4b\x81\xc9\x2f\x1b\x4e\x9e\x7c\x4a\xb1\xd6\x04\xae\x11\x6b\xcc\x49\x32\xa3\x4f\xd5\x0c\x4f\x0b\xde\x8a\xd1\xca\xe9\x89\x91\x99\x86\x04\xd7\x3a\xfa\x35\xf0\x48\x57\x4e\x8c\x0f\xd0\x55\xff\xa7\xff\x6a\x06\xb2\x8d\xa2\xa5\x70\x18\x30\x33\x88\x89\x18\x09\xfe\x2c\x89\x3b\xeb\xd7\x29\x99\x09\x87\x98\x95\x26\xc6\xe1\xa5\x0e\xea\xf0\xb2\xda\x5f\x63\xb5\x85\x61\x22\x0a\x9e\x4b\x62\x62\x03\xa7\xda\x6e\xb9\x7b\xfd\x57\x61\x88\xe9\x14\xe3\x30\x74\x22\x8d\x9c\x60\x3a\xc0\xa7\x7f\x95\x19\xb4\x09\x1f\xfc\x60\xdc\x4b\x8f\xa5\x63\x11\xa5\x59\xc1\xeb\x2c\x61\xba\x2b\x11\xab\x62\x9d\x0e\x58\x23\x68\x1f\x56\x12\xb0\xca\xd5\x07\x48\xa6\xc2\x12\x6c\xcd\x61\xe2\x1a\x37\x8b\xd9\xe0\x1e\x2f\xa3\x0c\x9d\x49\xb6\xe1\xa2\x5e\x55\x6f\x5f\xce\x8b\x32\x95\x26\x31\xbb\x73\x4e\x62\xca\x4a\xa1\x53\xb6\xa1\x91\x62\xc7\xcd\xd6\x92\xa7\x8e\x5e\x93\xa0\x25\xba\x0f\xa6\x55\xc7\x01\x62\x74\x7c\x67\x49\x4b\xd0\x6b\x2a\xea\x9a\x6c\x02\x5f\xad\xd4\xb7\xab\xfc\x6f\x05\x02\x23\x3d\x55\x1e\x2b\x83\x1a\x09\x7d\xd0\xfb\xaf\xac\xba\x45\xb3\x38\x9e\xdb\x6e\xd4\x6a\x67\x41\x18\x86\xbe\x56\xac\xc8\xe4\xfe\x36\xe6\x4e\xea\x23\xab\xd7\xad\x1a\x1a\xbd\x08\xc0\xce\x23\x49\xce\xde\x9f\x55\x68\xe6\xc0\x6a\xe2\x9f\x58\x5a\x72\x6a\x3c\x12\xbb\x5a\xd3\xe4\x94\x79\x6f\xa3\x03\x8f\xf7\x95\xf5\x85\x9e\xf7\x1d\x73\x37\xb1\x40\xb7\xf7\x50\xdd\x76\x06\xb6\x7d\x3c\xed\x56\xf5\x23\xe8\xa8\xee\x59\xb6\xb7\x33\x78\x5a\x36\xa1\xf0\x88\xff\xdf\xf9\x6c\xd8\xf8\x1a\x14\x2a\x41\xda\x5b\xa0\x4d\xa0\x7c\x48\xbb\x04\x76\x0f\xac\x3b\xd9\x25\xb0\x75\x91\x28\x2c\x43\xdf\xe1\xeb\xe3\x75\x45\xf6\xa8\x3f\xb5\x0f\xba\x6b\x9b\xac\xcc\x1d\xfc\x46\xad\x51\xca\x59\xbe\x5f\x2e\x0a\xbc\x25\x07\x91\xa4\x87\x40\xf6\x52\x56\x83\x58\x6b\x2f\x48\xc1\xe5\x61\xd9\xaa\xdf\xa3\x56\xbe\xc4\x6f\x43\x8d\x9c\x56\x42\x74\x54\x83\x7d\x70\x47\x1d\x6c\xe3\xb7\x17\xdb\xda\x74\x94\x7b\xe0\xd4\x15\xd6\x53\x79\x75\xbd\x51\x99\x97\xfc\xe0\x89\x55\xb7\x71\x1f\x82\x36\xb6\x21\xf4\x48\x3f\x17\x9b\xd7\xa1\x54\x6f\xc3\xf9\x3c\x81\x27\xd2\x73\xa7\xd4\x95\x91\x6e\x23\xb5\x4a\x59\x8d\xd2\xfa\xaa\xad\x02\xad\xca\xea\x37\x41\xf5\x12\x05\x99\xb5\x9b\xf9\x7c\x0e\x99\xa4\xd4\x98\x43\x67\x43\xf4\xab\xf6\xd7\x0d\x8f\x92\x45\x12\xa1\x31\x7b\x2c\x06\x36\x41\x05\x47\xd4\xed\xe1\x7c\x71\x70\x59\xbf\x7e\xc9\x56\xd9\xa8\xfa\xb3\x0b\xaa\x2a\xf5\x57\x47\x1d\x9e\x26\x62\x45\xe0\x1d\x1e\xa8\xfb\xb3\xc1\x00\x57\xac\x4c\x78\xb2\x5d\xe6\x7c\x41\x2b\x8f\x52\x6c\x58\xb4\x52\xd7\xa5\xbf\x9b\x91\x0e\x50\x11\xe5\xc9\x46\xdd\x6e\x31\x6f\xc3\x68\x03\x36\x96\x56\x4c\x9c\x45\x15\xa5\xed\x80\x77\x3f\xdf\x7d\x1a\xff\xfe\xcb\x0d\xac\x8d\x55\xdf\xc7\xbb\xd9\xa8\x91\x8a\x59\x17\x08\xb9\xd7\x21\x16\xad\x81\xb5\x3a\x8e\x81\x83\x00\x99\x8c\xaa\xbb\x3a\xe6\xe8\x85\x22\x38\x48\x76\xe7\x5e\x7d\x74\x4e\xb0\xf2\xc2\x33\xf8\xf8\x54\x3f\xb4\x4c\xea\xbd\x57\x88\x3e\xa2\x14\x75\x3b\xf1\x5e\x9c\x2a\x8b\x0a\x4a\xc5\x0d\x5a\x6f\xfa\x06\xa9\x2d\xa5\x23\x80\x9c\x67\xbc\x91\xd6\x1b\x41\xf5\xab\xb7\x5a\x54\x97\xa4\xfe\xfd\x1b\x00\x00\xff\xff\xcf\xa1\xa3\x0d\x72\x0f\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 3954, mode: os.FileMode(420), modTime: time.Unix(1429548007, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua": mainglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

