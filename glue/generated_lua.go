package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\xcd\x72\xdb\x36\x10\x3e\x5b\x4f\x81\xc0\xa5\x0d\xb6\x14\x63\xe7\xd0\x99\xca\xa6\x3b\x9d\xd4\x57\xbb\xe3\xaa\x87\x56\x52\x54\x98\x84\x2c\x8e\x28\x50\x25\x41\x8f\x52\x55\x7e\xf6\x2e\x88\x1f\x82\xb4\xa8\xb8\x87\x5c\x7a\x88\x23\xec\xcf\x87\xdd\x0f\x8b\x5d\xf0\xe3\xfd\xdd\xf8\xf6\x6e\x3c\x1f\xdf\xcf\x1f\x6e\xc7\xbf\x3d\xdc\xa1\x08\xed\x06\x27\x71\x9e\xb0\xe8\xc3\xc5\x45\x20\x7f\x72\xc1\xb8\x88\x30\x1e\xec\x07\x59\x1e\xd3\x0c\x2d\xc5\x3a\x9b\xb3\x32\xa6\x1b\x16\xed\x26\xf8\x1a\xcf\x22\x7c\x96\x89\x2b\x1c\x4c\xf0\x4d\xbd\x78\x52\x8b\xb3\x7a\x41\xd7\x9b\x2b\x6c\x7c\xab\x22\x35\xae\x8b\x8a\xc7\x22\xcd\x39\xa1\xfe\xe0\xa4\x60\xa2\x2a\x38\x22\xd8\xf3\xbc\x8b\x0f\x5b\xec\x8f\x16\x79\xb1\xa6\x82\xd0\xd1\xe3\x67\xc1\x88\xef\x0f\x18\x4f\x1c\x90\x8a\x1f\x81\x29\x45\x91\xf2\xa7\x30\x5e\xd2\x82\x88\x9c\x57\xeb\x47\x56\x10\x1a\x5c\x7e\xaf\x61\x4c\xf0\x83\x13\x99\x4b\x03\x01\x7e\x00\x62\x83\x81\xe5\xe8\xa9\xac\x1e\x09\x9e\x5c\xdf\x9c\xcd\x70\xe0\x64\x0e\x48\x27\x00\x05\x0c\x55\xc5\x9b\x10\x3e\xd1\xe1\xdf\x3f\x0d\xff\xb8\x18\xfe\x30\x0f\x5f\x86\x00\xd6\x50\xd1\x60\x95\x4b\x96\xbd\x09\xcd\x2b\xff\x7c\x79\x77\xfa\xcd\xd9\xb7\xc4\xff\x67\x3a\x3d\x9f\xe2\xab\xeb\x9b\x1f\x77\xfb\x89\x37\xfb\x04\xd0\x78\x3a\xf5\x2e\xb1\x86\x85\x73\xb3\x64\xed\xde\x1a\xee\x77\x00\x82\xe0\x14\xd4\xca\xf3\x88\xb7\xf5\xb6\xbe\x0a\xda\xa0\x35\xf8\xc3\x21\x12\xf4\x09\xad\x99\xa0\x82\x3e\x66\x4c\x9f\x13\xc8\x40\xb4\x94\xbb\x16\x60\xc8\x0a\x67\x63\x96\x2d\xe4\xce\xca\x50\x17\x19\xac\xd3\x05\x92\xaa\x50\x4b\x90\x58\x32\x0e\x62\x5b\x86\xbb\xbd\x5c\x41\x6d\xa0\x34\x78\x46\x29\x47\xe9\x86\xa6\x45\x49\x5c\x27\x1f\x25\xb9\xb4\x92\x60\xe2\xf3\x86\x91\x67\x3f\x8a\xb0\xaa\x09\x6c\x11\x2d\xe6\x24\x9d\x45\xcf\xb5\x84\x65\x25\x6b\xf9\xa8\xca\xe9\xf1\x11\xb9\x82\x04\x53\xeb\xfd\x1a\x78\xa4\x32\x27\xda\x06\xe8\xb2\xff\xa9\xbf\x8a\x81\x7c\x23\x69\x29\x1d\x06\xb4\x04\x51\x9e\x20\xce\xb6\x82\xb8\x52\xdf\x86\xa4\x05\x0e\x31\x2b\x45\x8c\xc3\x8b\x75\xea\xf0\xb2\x3a\x9c\x63\x7d\x84\x61\xca\x4b\x56\x08\xa2\x7d\x03\x27\xdb\x6e\xba\x07\xed\x57\x61\x88\xa3\x29\xc6\x61\xe8\x78\xea\x72\x02\x71\x80\xcf\xfe\xaa\x72\x68\x13\x3e\xd8\xc1\xba\x97\x1e\x43\xc7\x22\xce\xf2\x92\xd9\x28\x41\xdc\x2d\x11\x53\xc5\x2a\x1c\xd0\xc6\xd0\x3e\x4c\x49\xc0\x2e\xd7\xef\x21\x98\x1a\x8b\xd3\x35\x03\xc1\x0d\x6e\x36\x33\xce\x3d\x56\xba\x32\x54\x24\xf9\x86\x71\xbb\xab\x3a\xbe\x82\x95\x55\x26\x74\x60\xe6\xe4\x9c\xc0\xa4\x36\x82\x4e\xd9\x86\x46\x92\x1d\x37\x5a\x43\x9e\xbc\x7a\x4d\x80\x86\xe8\x3e\x98\x56\x1e\x47\x88\x51\xfe\x9d\x2d\x0d\x41\xaf\xa9\xb0\x39\x99\x00\xbe\x5a\xaa\x5f\xce\xf2\xbf\x25\x08\x8c\xf4\x64\xf9\xd6\x32\xb0\x48\xe8\xbd\x3a\x7f\xa9\x55\x2d\x9a\x26\xc9\xdc\x74\xa3\x56\x3b\x0b\xc2\x30\xf4\x55\xc5\xf2\x5c\x1c\x6e\x63\xae\x50\x5d\x59\xb5\x6f\xdd\xd0\xa2\xcb\x00\xf4\x2c\x16\xe4\xfc\xf4\xbc\x46\xd3\x17\x56\x11\xff\x4c\xb3\x8a\x45\xda\x22\x35\xbb\x35\x4d\x4e\xaa\x0f\x36\x3a\xb0\x38\xad\xb5\x2f\xd1\x45\xdf\x35\x77\x03\x0b\x54\x7b\x0f\xe5\xb4\xd3\xb0\xed\xeb\x69\x8e\xaa\x1f\x41\x79\x75\xef\xb2\x99\xce\x60\x69\xd8\x84\xc4\x63\xf6\x7f\xe7\xb3\x61\xe3\x6b\x50\x28\x0b\xd2\x4c\x81\x36\x81\xe2\x31\xeb\x12\xd8\xbd\xb0\xae\xb0\x4b\x60\x6b\x90\x48\x2c\x4d\xdf\xf1\xf1\xf1\x3a\x23\x73\xd5\x9f\xdb\x17\xdd\xd5\x4d\x56\x7a\x06\x7f\x21\xd7\x38\x63\xb4\x38\x5c\x2e\x12\xbc\x55\x0e\x3c\xcd\x8e\x81\x1c\xa4\xcc\x82\x18\x6d\x2f\x48\xc9\xc4\xf1\xb2\x95\xbf\x47\xad\x78\x89\xdf\x86\x1a\x39\xad\x84\x28\xaf\x06\xfb\xe8\x89\x3a\xd8\xda\xee\x20\xb6\xd1\x29\x2f\xf7\xc2\xc9\x11\xd6\x93\x79\x3d\xde\x22\x51\x54\xec\xe8\x8d\x95\xd3\xb8\x0f\x41\x29\xdb\x10\x6a\xa5\x9e\x8b\xcd\xeb\x50\xc8\xb7\xe1\x7c\x9e\xc2\x13\x69\xdb\x49\x75\xa5\x4b\xb7\x29\xb5\xba\xb2\x9a\x4a\xeb\xcb\xb6\x76\x34\x55\x66\xdf\x04\xf5\x4b\x14\xca\xac\xdd\xcc\xe7\x73\x88\x24\x8b\xb4\x3a\x74\x0e\x44\xbd\x6a\x7f\xdd\xb0\x38\x5d\xa4\x31\x1a\xd3\xa7\x72\x60\x02\x94\x70\x44\x4e\x0f\xe7\x8b\x83\x09\xfb\xfa\x25\x3b\xa9\x8b\xe4\x9f\x7d\x50\x67\xa9\xbe\x3a\xac\x7b\x96\xf2\x15\x81\x77\x78\x20\xe7\x67\x83\x01\xa6\x58\xaa\xf0\x64\xb7\x2c\xd8\x22\xaa\x2d\x2a\xbe\xa1\xf1\x4a\x8e\x4b\x7f\x3f\x23\x1d\xa0\x32\x2e\xd2\x8d\x9c\x6e\x09\x6b\xc3\x28\x05\xd6\x9a\x96\x4f\x92\xc7\x35\xa5\x6d\x87\x77\x3f\xdf\x7f\x1c\xff\xfe\xcb\x2d\xec\x8d\x65\xdf\xc7\xfb\xd9\xa8\x29\x15\xbd\x2f\x10\xf2\xa0\x5c\x0c\x5a\x03\x6b\xea\x38\x01\x0e\x02\xa4\x23\xaa\x67\x75\xc2\x50\x14\x21\xb8\x48\xe6\xe4\x94\x08\xc1\xf7\xa5\x2a\x08\x7b\xca\xd2\xd7\x97\xc6\xdd\x9e\xbb\x48\x79\x5a\x2e\xeb\x6c\x02\x54\x5b\x0d\x5a\x8f\xf5\xc6\xb1\x5d\x23\xaf\xfc\xec\x6b\x5c\x03\x74\x6d\xec\x5b\xb5\x46\xd4\xdf\x37\xf2\xdf\xbf\x01\x00\x00\xff\xff\x24\x88\x46\xc9\x29\x0f\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 3881, mode: os.FileMode(420), modTime: time.Unix(1429559242, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua": mainglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

