package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x4d\x73\xdb\x36\x10\x3d\x5b\xbf\x02\x41\x2a\x1b\x6c\x29\xc6\xce\xa1\x33\x95\x0d\x77\x3a\xa9\xaf\x76\xc7\x55\x0f\xad\xa4\xa8\x30\x05\x59\x1c\x51\xa0\x4a\x82\x1e\xa7\xaa\xfc\xdb\xbb\xf8\x22\x41\x5a\x94\xd5\x43\x2e\x3d\x44\x31\xb0\xbb\x0f\xbb\x0f\x0f\x0b\xf0\xd3\xdd\xed\xe8\xe6\x76\x34\x1b\xdd\xcd\xee\x6f\x46\xbf\xdd\xdf\x22\x8a\xb6\xbd\x93\x38\x9b\x73\x8a\x3f\x9e\x9f\xe3\x50\x0d\x84\xe4\x42\x52\x8c\x7b\xbb\x5e\x9a\xc5\x2c\x45\x4b\xb9\x4e\x67\xbc\x88\xd9\x86\xd3\xed\x18\x5f\xe1\x29\xc5\xa7\xa9\xbc\xc4\xe1\x18\x5f\xeb\xc1\xa3\x19\x9c\xea\x01\x5b\x6f\x2e\xb1\x8b\x2d\xf3\xc4\x85\x2e\x4a\x11\xcb\x24\x13\x84\x05\xbd\x93\x9c\xcb\x32\x17\x88\xe0\x7e\xbf\x7f\xfe\xf1\x19\x07\xc3\x45\x96\xaf\x99\x24\x6c\xf8\xf0\x45\x72\x12\x04\x3d\x2e\xe6\x1e\x48\x29\x0e\xc0\x14\x32\x4f\xc4\x63\x14\x2f\x59\x4e\x64\x26\xca\xf5\x03\xcf\x09\x0b\x2f\xbe\xb7\x30\x2e\xf9\xde\x89\xaa\xa5\x86\x80\x38\x00\xa9\x92\x81\xe1\xf0\xb1\x28\x1f\x08\x1e\x5f\x5d\x9f\x4e\x71\xe8\x55\x0e\x48\x27\x00\x05\x0c\x95\xf9\x51\x08\x9f\xd9\xe0\xef\x9f\x06\x7f\x9c\x0f\x7e\x98\x45\x2f\x03\x00\xab\xa9\xa8\xb1\x8a\x25\x4f\x8f\x42\xeb\x17\x7f\xbe\xbc\x7b\xff\xcd\xe9\xb7\x24\xf8\x67\x32\x39\x9b\xe0\xcb\xab\xeb\x1f\xb7\xbb\x71\x7f\xfa\x19\xa0\xf1\x64\xd2\xbf\xc0\x16\x16\xf6\xad\x22\x6b\x7b\x6c\xba\xdf\x01\x08\x82\x5d\x30\xa3\x7e\x9f\xf4\x9f\xfb\xcf\x81\x49\xda\xa1\xd5\xf8\x83\x01\x92\xec\x11\xad\xb9\x64\x92\x3d\xa4\xdc\xee\x13\xcc\xc1\xd4\x52\xad\x9a\x83\x23\xcf\xbd\x85\x79\xba\x50\x2b\x1b\x47\x2b\x32\x18\x27\x0b\xa4\x4c\x91\x9d\x41\x72\xc9\x05\x4c\x57\x32\xdc\xee\xd4\x08\xb4\x81\x92\xf0\x09\x25\x02\x25\x1b\x96\xe4\x05\xf1\x83\x02\x34\xcf\x94\x97\x02\x93\x5f\x36\x9c\x3c\x05\x94\x62\xa3\x09\x5c\x21\x56\x98\xe3\x64\x4a\x9f\xf4\x0c\x4f\x0b\xde\x88\x31\xca\xe9\x88\x91\x99\x81\x04\xd7\x2a\xfa\x35\xf0\xd0\x54\x4e\xac\x0f\xd0\x55\xfd\x67\x7e\x0d\x03\xd9\x46\xd1\x52\x78\x0c\xd8\x19\xc4\xc4\x1c\x09\xfe\x2c\x89\x3f\x1b\x54\x29\xd9\x09\x8f\x98\x95\x21\xc6\xe3\xa5\x0a\x6a\xf1\xb2\xda\x5f\xa3\xde\xc2\x28\x11\x05\xcf\x25\xb1\xb1\xa1\x57\x6d\xbb\xdc\xbd\xfe\xab\x28\xc2\x74\x82\x71\x14\x79\x91\x56\x4e\x30\x1d\xe2\xd3\xbf\xca\x0c\xda\x44\x00\x7e\x30\xee\xa4\xc7\xd1\xb1\x88\xd3\xac\xe0\x55\x96\x30\xdd\x96\x88\x53\xb1\x49\x07\xac\x31\xb4\x0f\x27\x09\x58\xe5\xea\x03\x24\xa3\xb1\x04\x5b\x73\x98\xb8\xc6\xf5\x62\x2e\xb8\xc3\xcb\x2a\xc3\x64\x92\x6d\xb8\xa8\x56\x35\xdb\x97\xf3\xa2\x4c\xa5\x4d\xcc\xed\x9c\x97\x98\xb2\x52\xe8\x94\x4d\x68\xa4\xd8\xf1\xb3\x75\xe4\xa9\xa3\x57\x27\xe8\x88\xee\x82\x69\xd4\x71\x80\x18\x13\xdf\x5a\xd2\x11\xf4\x9a\x8a\xaa\x26\x97\xc0\x57\x2b\xf5\xed\x2a\xff\x5b\x81\xc0\x48\x47\x95\xc7\xca\xa0\x42\x42\x1f\xcc\xfe\x2b\xab\x69\xd1\x6c\x3e\x9f\xb9\x6e\xd4\x68\x67\x61\x14\x45\x81\x51\xac\xc8\xe4\xfe\x36\xe6\x4f\x9a\x23\x6b\xd6\xd5\x0d\x8d\x5e\x84\x60\xe7\xb1\x24\x67\xef\xcf\x34\x9a\x3d\xb0\x86\xf8\x27\x96\x96\x9c\x5a\x8f\xc4\xad\x56\x37\x39\x65\xde\xdb\xe8\xc0\xe3\xbd\xb6\xbe\xd0\xf3\xae\x63\xee\x27\x16\x9a\xf6\x1e\xa9\xdb\xce\xc2\x36\x8f\xa7\xdb\xaa\x6e\x04\x13\xd5\x3e\xcb\xee\x76\x06\x4f\xc7\x26\x14\x1e\xf3\xff\x3b\x9f\x35\x1b\x5f\x83\x42\x25\x48\x77\x0b\x34\x09\x94\x0f\x69\x9b\xc0\xf6\x81\xf5\x27\xdb\x04\x36\x2e\x12\x85\x65\xe9\x3b\x7c\x7d\xbc\xae\xc8\x1d\xf5\xa7\xe6\x41\xf7\x6d\xe3\x95\xbd\x83\xdf\xa8\x35\x4e\x39\xcb\xf7\xcb\x45\x81\x37\xe4\x20\x92\xf4\x10\xc8\x5e\xca\x2a\x10\x67\xed\x04\x29\xb8\x3c\x2c\x5b\xf5\xf7\xb0\x91\x2f\x09\x9a\x50\x43\xaf\x95\x10\x13\x55\x63\x1f\xdc\x51\x0f\xdb\xfa\xed\xc5\x76\x36\x13\xe5\x1f\x38\x75\x85\x75\x54\xae\xaf\x37\x2a\xf3\x92\x1f\x3c\xb1\xea\x36\xee\x42\x30\xc6\x26\x84\x19\x99\xe7\x62\xfd\x3a\x94\xea\x6d\x38\x9b\x25\xf0\x44\x7a\x6e\x95\xba\xb2\xd2\xad\xa5\xa6\x95\x55\x2b\xad\xab\x5a\x1d\xe8\x54\x56\xbd\x09\xf4\x4b\x14\x64\xd6\x6c\xe6\xb3\x19\x64\x92\x52\x6b\x8e\xbc\x0d\x31\xaf\xda\x5f\x37\x3c\x4e\x16\x49\x8c\x46\xec\xb1\xe8\xb9\x04\x15\x1c\x51\xb7\x87\xf7\xc5\xc1\x65\xf5\xfa\x25\x5b\x65\xa3\xea\x67\x17\xea\x2a\xcd\x57\x47\x15\x9e\x26\x62\x45\xe0\x1d\x1e\xaa\xfb\xb3\xc6\x00\x57\xac\x4c\x78\xbc\x5d\xe6\x7c\x41\xb5\x47\x29\x36\x2c\x5e\xa9\xeb\x32\xd8\x4d\x49\x0b\xa8\x88\xf3\x64\xa3\x6e\xb7\x39\x6f\xc2\x18\x03\xb6\x96\x46\xcc\x3c\x8b\x35\xa5\xcd\x80\x77\x3f\xdf\x7d\x1a\xfd\xfe\xcb\x0d\xac\x8d\x55\xdf\xc7\xbb\xe9\xb0\x96\x8a\x5d\x17\x08\xb9\x37\x21\x0e\xad\x86\x75\x3a\x9e\x03\x07\x21\xb2\x19\xe9\xbb\x7a\xce\xd1\x0b\x45\x70\x90\xdc\xce\xbd\xfa\xec\x1c\x63\xe5\x85\xa7\xf0\xf9\x59\x3d\x16\x2d\x82\xde\x2b\xa7\x02\x85\x1d\x20\x4a\x51\xbb\x27\xef\x45\xd4\xf9\x68\x50\x15\xd7\x6b\xbc\xee\x6b\xa4\xa6\xa8\x8e\x00\xf2\x1e\xf4\x56\x64\x6f\x04\x55\x25\xe9\x45\x4d\x49\xea\xdf\xbf\x01\x00\x00\xff\xff\x35\x86\xbb\x70\x7e\x0f\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 3966, mode: os.FileMode(420), modTime: time.Unix(1429507859, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua": mainglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

