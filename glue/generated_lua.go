package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\xcd\x72\xdb\x36\x10\x3e\x5b\x4f\x81\xc0\x95\x0d\xb6\x14\x63\xe7\xd0\x99\xca\xa6\x3b\x9d\xd4\x33\x3d\xb4\x76\xc7\x51\x0f\xad\xa4\xa8\x34\x09\x59\x1c\x51\xa0\x4a\x82\x1a\xa5\xaa\xfc\xec\x5d\xfc\x12\xa4\x45\xc5\x3d\xe4\xd2\x43\x1c\x61\x7f\x3e\xec\x7e\x58\xec\x82\xef\xef\xef\x46\xb7\x77\xa3\xd9\xe8\x7e\xf6\x70\x3b\xfa\xed\xe1\x0e\x85\x68\xd7\x3b\x89\xf3\x84\x86\xef\x2e\x2e\x7c\xf1\x93\x71\xca\x78\x88\x71\x6f\xdf\xcb\xf2\x38\xca\xd0\x82\xaf\xb2\x19\x2d\xe3\x68\x4d\xc3\xdd\x18\x5f\xe3\x69\x88\xcf\x32\x7e\x85\xfd\x31\xbe\x91\x8b\x27\xb5\x38\x93\x8b\x68\xb5\xbe\xc2\xc6\xb7\x2a\x52\xe3\x3a\xaf\x58\xcc\xd3\x9c\x91\xc8\xeb\x9d\x14\x94\x57\x05\x43\x04\xf7\xfb\xfd\x8b\x77\x5b\xec\x0d\xe7\x79\xb1\x8a\x38\x89\x86\x8f\x9f\x38\x25\x9e\xd7\xa3\x2c\x71\x40\x2a\x76\x04\xa6\xe4\x45\xca\x9e\x82\x78\x11\x15\x84\xe7\xac\x5a\x3d\xd2\x82\x44\xfe\xe5\xb7\x1a\xc6\x04\xdf\x3b\x11\xb9\xd4\x10\xe0\x07\x20\x36\x18\x58\x0e\x9f\xca\xea\x91\xe0\xf1\xf5\xcd\xd9\x14\xfb\x4e\xe6\x80\x74\x02\x50\xc0\x50\x55\xbc\x0a\xe1\x63\x34\xf8\xfb\x87\xc1\x1f\x17\x83\xef\x66\xc1\xf3\x00\xc0\x6a\x2a\x6a\xac\x72\x41\xb3\x57\xa1\xf5\xcb\x3f\x9f\xdf\x9c\x7e\x75\xf6\x35\xf1\xfe\x99\x4c\xce\x27\xf8\xea\xfa\xe6\xfb\xdd\x7e\xdc\x9f\x7e\x04\x68\x3c\x99\xf4\x2f\xb1\x86\x85\x73\xb3\x64\xed\x5e\x1b\xee\x37\x00\x82\xe0\x14\xd4\xaa\xdf\x27\xfd\x6d\x7f\xeb\xa9\xa0\x0d\x5a\x8d\x3f\x18\x20\x1e\x3d\xa1\x15\xe5\x11\x8f\x1e\x33\xaa\xcf\x09\x64\x20\x5a\x88\x5d\x0b\x30\xa4\x85\xb3\x31\xcd\xe6\x62\x67\x65\xa8\x8b\x0c\xd6\xe9\x1c\x09\x55\xa0\x25\x88\x2f\x28\x03\xb1\x2d\xc3\xdd\x5e\xac\xa0\x36\x50\xea\x6f\x50\xca\x50\xba\x8e\xd2\xa2\x24\xae\x93\x87\x92\x5c\x58\x09\x30\xfe\x69\x4d\xc9\xc6\x0b\x43\xac\x6a\x02\x5b\x44\x8b\x39\x4e\xa7\xe1\x46\x4a\x68\x56\xd2\x86\x8f\xaa\x9c\x0e\x1f\x9e\x2b\x48\x30\xb5\xde\x2f\x81\x87\x2a\x73\xa2\x6d\x80\x2e\xfb\x9f\xfa\xab\x18\xc8\xd7\x82\x96\xd2\x61\x40\x4b\x50\xc4\x12\xc4\xe8\x96\x13\x57\xea\xd9\x90\xb4\xc0\x21\x66\xa9\x88\x71\x78\xb1\x4e\x2d\x5e\x96\x87\x73\x94\x47\x18\xa4\xac\xa4\x05\x27\xda\xd7\x77\xb2\x6d\xa7\x7b\xd0\x7e\x19\x04\x38\x9c\x60\x1c\x04\x8e\xa7\x2e\x27\x10\xfb\xf8\xec\xaf\x2a\x87\x36\xe1\x81\x1d\xac\x3b\xe9\x31\x74\xcc\xe3\x2c\x2f\xa9\x8d\x12\xc4\xed\x12\x31\x55\xac\xc2\x01\x6d\x0c\xed\xc3\x94\x04\xec\x72\xfd\x16\x82\x91\x58\x2c\x5a\x51\x10\xdc\xe0\x7a\x33\xe3\xdc\x61\xa5\x2b\x43\x45\x92\xaf\x29\xb3\xbb\xaa\xe3\x2b\x68\x59\x65\x5c\x07\x66\x4e\xce\x09\x4c\x68\x43\xe8\x94\x4d\x68\x24\xd8\x71\xa3\x35\xe4\x89\xab\x57\x07\x68\x88\xee\x82\x69\xe4\x71\x84\x18\xe5\xdf\xda\xd2\x10\xf4\x92\x0a\x9b\x93\x09\xe0\x8b\xa5\xfa\xf9\x2c\xff\x5b\x82\xc0\x48\x47\x96\xaf\x2d\x03\x8b\x84\xde\xaa\xf3\x17\x5a\xd5\xa2\xa3\x24\x99\x99\x6e\xd4\x68\x67\x7e\x10\x04\x9e\xaa\x58\x96\xf3\xc3\x6d\xcc\x15\xaa\x2b\xab\xf6\x95\x0d\x2d\xbc\xf4\x41\x4f\x63\x4e\xce\x4f\xcf\x25\x9a\xbe\xb0\x8a\xf8\x4d\x94\x55\x34\xd4\x16\xa9\xd9\xad\x6e\x72\x42\x7d\xb0\xd1\x81\xc5\xa9\xd4\x3e\x87\x17\x5d\xd7\xdc\x0d\xcc\x57\xed\x3d\x10\xd3\x4e\xc3\x36\xaf\xa7\x39\xaa\x6e\x04\xe5\xd5\xbe\xcb\x66\x3a\x83\xa5\x61\x13\x12\x8f\xe9\xff\x9d\xcf\x9a\x8d\x2f\x41\xa1\x28\x48\x33\x05\x9a\x04\xf2\xc7\xac\x4d\x60\xfb\xc2\xba\xc2\x36\x81\x8d\x41\x22\xb0\x34\x7d\xc7\xc7\xc7\xcb\x8c\xcc\x55\xdf\x34\x2f\xba\xab\x1b\x2f\xf5\x0c\xfe\x4c\xae\x71\x46\xa3\xe2\x70\xb9\x08\xf0\x46\x39\xb0\x34\x3b\x06\x72\x90\x32\x0b\x62\xb4\x9d\x20\x25\xe5\xc7\xcb\x56\xfc\x1e\x36\xe2\x25\x5e\x13\x6a\xe8\xb4\x12\xa2\xbc\x6a\xec\xa3\x27\xea\x60\x6b\xbb\x83\xd8\x46\xa7\xbc\xdc\x0b\x27\x46\x58\x47\xe6\x72\xbc\x85\xbc\xa8\xe8\xd1\x1b\x2b\xa6\x71\x17\x82\x52\x36\x21\xd4\x4a\x3d\x17\xeb\xd7\x21\x17\x6f\xc3\xd9\x2c\x85\x27\xd2\xb6\x95\xea\x52\x97\x6e\x5d\x6a\xb2\xb2\xea\x4a\xeb\xca\x56\x3a\x9a\x2a\xb3\x6f\x02\xf9\x12\x85\x32\x6b\x36\xf3\xd9\x0c\x22\xc9\x42\xad\x0e\x9c\x03\x51\xaf\xda\x0f\x6b\x1a\xa7\xf3\x34\x46\xa3\xe8\xa9\xec\x99\x00\x05\x1c\x11\xd3\xc3\xf9\xe2\xa0\xdc\xbe\x7e\xc9\x4e\xe8\x42\xf1\x67\xef\xcb\x2c\xd5\x57\x87\x75\xcf\x52\xb6\x24\xf0\x0e\xf7\xc5\xfc\xac\x31\xc0\x14\x0b\x15\x1e\xef\x16\x05\x9d\x87\xd2\xa2\x62\xeb\x28\x5e\x8a\x71\xe9\xed\xa7\xa4\x05\x54\xc6\x45\xba\x16\xd3\x2d\xa1\x4d\x18\xa5\xc0\x5a\xd3\xf0\x49\xf2\x58\x52\xda\x74\x78\xf3\xe3\xfd\xfb\xd1\xef\xbf\xde\xc2\xde\x58\xf4\x7d\xbc\x9f\x0e\xeb\x52\xd1\xfb\x02\x21\x0f\xca\xc5\xa0\xd5\xb0\xa6\x8e\x13\xe0\xc0\x47\x3a\x22\x39\xab\x13\x8a\xc2\x10\xc1\x45\x32\x27\xa7\x44\x08\xbe\x2f\x55\x41\xd8\x53\x16\xbe\x9e\x30\x6e\xf7\xdc\x79\xca\xd2\x72\x21\xb3\xf1\x91\xb4\xea\x35\x1e\xeb\xb5\x63\xb3\x46\x64\x50\x5b\x1e\xfc\x34\xfa\xe5\xe7\x0f\xea\x11\x5a\x63\xd8\x97\xb9\x06\x3b\x66\x6f\xdf\xb0\x72\x27\xfd\xdd\x23\xfe\xfd\x1b\x00\x00\xff\xff\x05\xaf\x5c\x30\x41\x0f\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 3905, mode: os.FileMode(420), modTime: time.Unix(1429559993, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua": mainglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

