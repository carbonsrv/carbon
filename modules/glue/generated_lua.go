package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\xc1\x72\xe3\x36\x0f\x3e\xc7\x4f\xc1\x65\x7e\x27\xd4\x5f\x59\x9b\xec\xa1\x33\x75\xa2\x74\x3a\x6d\x67\x7a\x68\xa7\x9d\x6e\x2e\xad\x9d\x75\x19\x99\x8e\x35\x96\x25\x57\xa2\x32\xde\xba\xce\xb3\x17\x24\x48\x8a\x92\x2d\x6f\x7a\xd8\x4b\x2f\x89\x49\x00\x1f\x81\x8f\x20\x00\x65\x45\xc2\x33\xb2\x94\xeb\x6c\x26\xaa\x84\x6f\x44\xbc\x9b\xd0\x5b\xfa\x10\xd3\x8b\x4c\xde\xd0\x70\x42\xef\xf4\xe2\x09\x17\x17\x7a\xc1\xd7\x9b\x1b\xba\x1f\xa0\x6d\x5d\xa6\xd6\x74\x51\xe7\x89\x4c\x8b\x9c\xf1\x60\x70\x56\x0a\x59\x97\x39\x61\x74\x38\x1c\x5e\xbd\xdb\xd2\x60\xbc\x28\xca\x35\x97\x8c\x8f\x1f\x3f\x4a\xc1\x82\x60\x20\xf2\xb9\x07\x52\xe7\x27\x60\x2a\x59\xa6\xf9\x53\x94\x2c\x79\xc9\x64\x91\xd7\xeb\x47\x51\x32\x1e\x5e\x7f\x69\x60\xac\xf3\x83\x33\x15\x4b\x03\x01\x76\x00\xe2\x9c\x81\xe5\xf8\xa9\xaa\x1f\x19\x9d\xdc\xde\x5d\x3c\xd0\xd0\x8b\x1c\x90\xce\x00\x2a\x1c\x9c\xd5\xe5\xab\x10\x3e\xf0\xd1\x5f\xdf\x8c\x7e\xbf\x1a\x7d\x35\x8b\x5e\x46\x00\xd6\x50\xd1\x60\x55\x4b\x91\xbd\x0a\x6d\x58\xfd\xf1\xf2\xe6\xfc\x7f\x17\xff\x67\xc1\xdf\xd3\xe9\xe5\x94\xde\xdc\xde\x7d\xbd\xdb\x4f\x86\x0f\x1f\x00\x9a\x4e\xa7\xc3\x6b\x6a\x60\x07\xfb\x81\x23\x6b\xf7\x5a\x77\xbf\x00\x10\x02\xb7\x80\xab\xe1\x90\x0d\xb7\xc3\x6d\x80\x4e\x5b\xb4\x06\x7f\x34\x22\x92\x3f\x91\xb5\x90\x5c\xf2\xc7\x4c\x98\x7b\x82\x3d\xd8\x5a\xaa\x53\x4b\x50\x14\xa5\x77\xb0\xc8\x16\xea\x64\x54\x4c\x8a\x5c\x8a\x5c\xc2\x3a\x5d\x10\x25\x8a\xcc\x0e\x91\x4b\x91\xc3\xf6\x99\x59\xc7\xbb\xbd\x5a\x41\x6e\x90\x34\x7c\x26\x69\x4e\xd2\x0d\x4f\xcb\x8a\xf9\x46\x01\x99\x17\x4a\x4b\x81\xc9\x8f\x1b\xc1\x9e\x83\x38\xa6\x98\x13\xd4\x21\x3a\xcc\x49\xfa\x10\x3f\xeb\x1d\x91\x55\xa2\x65\x83\x99\xd3\x63\x23\x0b\x84\x04\x55\x67\x7d\x08\x3c\xc6\xc8\x99\xd1\x01\xba\xdc\x3f\xfc\x8b\x0c\x14\x1b\x45\x4b\xe5\x31\x60\x76\x08\xcf\xe7\x24\x17\x5b\xc9\xfc\xdd\xc0\xb9\x64\x36\x3c\x62\x56\x48\x8c\xc7\x8b\x33\xea\xf0\xb2\x3a\x1e\xa3\xbe\xc2\x28\xcd\x2b\x51\x4a\x66\x6c\x43\x2f\xda\x6e\xb8\x47\xf5\x57\x51\x44\xe3\x29\xa5\x51\xe4\x59\x9a\x74\x82\xed\x90\x5e\xfc\x59\x17\x50\x26\x02\xd0\x83\x75\x2f\x3d\x96\x8e\x45\x92\x15\x95\x70\x5e\xc2\x76\x37\x45\x6c\x16\xa3\x3b\x20\x4d\xa0\x7c\xd8\x94\x80\x53\x6e\xdf\x82\x33\x1a\x2b\xe7\x6b\x01\x1b\x77\xb4\x39\xcc\x1a\xf7\x68\x99\xcc\x40\x4f\x8a\x8d\xc8\xdd\xa9\x78\x7d\xa5\xa8\xea\x4c\x1a\xc7\xec\xcd\x79\x8e\x29\x69\x0c\x95\xb2\x0d\x4d\x14\x3b\xbe\xb7\x96\x3c\xf5\xf4\x1a\x07\x2d\xd1\x7d\x30\xad\x38\x4e\x10\x83\xf6\x9d\x23\x2d\x41\x87\x54\xb8\x98\xac\x03\x9f\x2d\xd4\x4f\x47\xf9\xef\x02\x04\x46\x7a\xa2\x7c\x6d\x1a\x38\x24\xf2\x16\xef\x5f\x49\xb1\x44\xf3\xf9\x7c\x66\xab\x51\xab\x9c\x85\x51\x14\x05\x98\xb1\x79\x21\x8f\x97\x31\x7f\x13\x9f\x2c\x9e\xab\x0b\x5a\x7c\x1d\x82\x5c\x24\x92\x5d\x9e\x5f\x6a\x34\xf3\x60\x91\xf8\x67\x9e\xd5\x22\x36\x1a\xa9\x3d\xad\x29\x72\x4a\x7c\xb4\xd0\x81\xc6\xb9\x96\xbe\xc4\x57\x7d\xcf\xdc\x77\x2c\xc4\xf2\x1e\xa9\x6e\x67\x60\xdb\xcf\xd3\x5e\x55\x3f\x02\x5a\x75\xdf\xb2\xed\xce\xa0\x69\xd9\x84\xc0\x13\xf1\x5f\xe7\xb3\x61\xe3\x73\x50\xa8\x12\xd2\x76\x81\x36\x81\xf2\x31\xeb\x12\xd8\x7d\xb0\xfe\x66\x97\xc0\x56\x23\x51\x58\x86\xbe\xd3\xed\xe3\x30\x22\xfb\xd4\x9f\xdb\x0f\xdd\x97\x4d\x56\xa6\x07\x7f\x22\xd6\x24\x13\xbc\x3c\x9e\x2e\x0a\xbc\x95\x0e\x79\x9a\x9d\x02\x39\x4a\x99\x03\xb1\xd2\x5e\x90\x4a\xc8\xd3\x69\xab\x7e\x8f\x5b\xfe\xb2\xa0\x0d\x35\xf6\x4a\x09\x43\xab\x06\xfb\xe4\x8d\x7a\xd8\x46\xef\x28\xb6\x95\xa1\x95\xff\xe0\x54\x0b\xeb\x89\x5c\xb7\xb7\x58\x96\xb5\x38\xf9\x62\x55\x37\xee\x43\x40\x61\x1b\x02\x57\x38\x2e\x36\xd3\xa1\x54\xb3\xe1\x6c\x96\xc2\x88\xb4\xed\x84\xba\x32\xa9\xdb\xa4\x9a\xce\xac\x26\xd3\xfa\xa2\xd5\x86\x36\xcb\xdc\x4c\xa0\x27\x51\x48\xb3\x76\x31\x9f\xcd\xc0\x93\x2c\x36\xe2\xc8\xbb\x10\x9c\x6a\xdf\x6f\x44\x92\x2e\xd2\x84\xdc\xf3\xa7\x6a\x60\x1d\x54\x70\x4c\x75\x0f\xef\x8b\x43\x48\x37\xfd\xb2\x9d\x92\xc5\xea\xcf\x3e\xd4\x51\xe2\x57\x87\x33\xcf\xd2\x7c\xc5\x60\x0e\x0f\x55\xff\x04\x0c\x6c\xa4\x36\xb0\xc6\x65\xca\xe9\x64\xb7\x2c\xc5\x22\xd6\xca\x75\xbe\xe1\xc9\x4a\x75\xce\x60\x0f\x71\x98\x10\x7b\xd4\xb5\x86\xfa\xd4\xf1\x0f\xae\x92\x32\xdd\xa8\x6e\x38\xf7\x5c\x57\x96\x28\xa0\x46\xd2\xb2\x99\x17\x89\xbe\x82\xb6\xc1\x9b\xef\x7e\xfe\xf6\xfe\xb7\x5f\xbe\x87\x13\xa9\xea\x13\x74\xff\x30\x6e\x52\x8b\x21\x06\x10\xf8\x2b\x9a\x58\xb4\x06\xd6\xe6\xfd\x1c\x38\x0b\x89\xf1\x48\xf7\xf6\xb9\x20\x71\x4c\xe0\xe1\x59\x42\x70\x8b\xbc\xbb\xba\xc2\x90\x5c\x56\x28\xdb\x40\x29\x77\x6b\xb4\x06\xdf\xca\xe8\x3d\x0e\x9e\x0a\x20\x24\x5a\x7b\xd0\x1a\xf2\x1b\x00\x93\x5b\x6a\xd8\x56\x9b\x11\x4e\xed\xe4\xa5\xe3\x08\xc2\xfe\x70\xff\xd3\x8f\x07\xd0\x6e\xd0\x0f\xdc\xd5\xf4\xea\xbb\x91\x58\x3b\x10\x34\x37\xd5\xf0\xa3\x3e\x7f\x6d\x8e\xa9\x02\x0e\xbf\x3a\xde\x2c\x80\x93\x99\x52\x53\x36\xcc\x41\x6a\x1b\xf3\x76\x16\x3a\xb6\x83\x27\x83\x45\xad\x55\x64\x17\x8d\x0f\xff\x04\x00\x00\xff\xff\x07\x22\x81\xdf\xe5\x0f\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 4069, mode: os.FileMode(420), modTime: time.Unix(1432300108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xcb\x8e\xd4\x40\x0c\x3c\x27\x5f\x61\xe5\x94\x48\xd9\xd5\x8a\x23\xd2\xdc\xe0\x06\x1c\x16\x38\x21\x84\xf2\x70\x48\x4b\x3d\xdd\x91\xdb\xd9\x30\x42\xf0\xed\xd8\x9d\xe7\xa2\x19\x24\xf6\x62\x4d\xda\x55\xae\x72\x8d\xef\xee\xe0\xbd\x69\x5b\x8b\x53\x45\x08\x3d\xda\x01\x29\x94\xe0\x3c\x03\x61\x65\xed\x05\xc6\x80\xdd\x68\x61\x32\xdc\x43\xe5\x2e\xdc\x1b\xf7\x1d\xea\x91\x81\x7b\x84\x80\xf4\x84\x04\xc6\x19\x86\xd0\x90\x19\x38\xed\x46\xd7\xb0\xf1\x0e\xce\xd3\xbd\xc3\x29\xef\x5c\x09\xb5\x71\xad\xd0\x74\x30\x4e\x81\x2b\xc6\x22\x4d\xac\x6f\x2a\x0b\x8d\x6f\x11\x4e\x90\x65\x69\x62\x3a\xe0\xcb\x80\xc2\x28\xe0\x24\x4f\xeb\xa4\x4c\xa5\x5c\x9a\x24\x0b\x36\x30\xc9\xb0\xfb\x76\x3c\x0f\x8a\x4d\x13\xb4\x01\xff\x26\xcf\xa0\x8d\xaa\x2e\x90\x48\xd8\xd6\x57\xed\xdc\xcc\x75\x9e\xd0\x55\x58\x17\xd6\xfe\x02\xbf\x29\x15\xb5\x14\x20\x60\x4f\xb9\xd4\xf8\xe8\xda\x74\x2e\xf3\x52\xb4\xfe\x90\x7e\xdc\x6b\x5d\x7b\x9d\xbf\xba\x5d\x83\x99\x3d\x73\x55\x5b\xdc\x2c\x27\xb4\x5a\x96\x24\xdf\xbc\x7b\xfc\xf6\xe1\x63\x74\x5c\x02\xd3\x88\x7b\xa8\x47\x57\x37\x29\x5d\x25\x88\x12\x7e\x7e\xc9\x42\xf6\xf5\x94\x3d\x65\xbf\x76\xdf\x33\xf7\x45\x96\x1e\x3f\xff\xbf\xa7\x9d\xf3\x2f\x53\x5a\xc4\x92\x32\x7f\x9f\xc0\x19\xbb\x7a\x38\x06\x1f\x51\x84\x3c\x92\x93\xcc\xf5\xeb\x78\x7d\xd8\xf4\x7e\x51\x22\x0c\xc3\x76\x72\xfa\x21\x76\xd8\xbb\xf1\x5c\x23\xe5\xb1\x09\x9e\xe0\xd5\xc3\xc3\x7e\x85\xf1\x38\xae\x9d\xd2\xa2\x27\x02\x6f\x55\x40\xd9\x25\x2c\xa7\x74\xbc\xc4\x7d\xc0\xf3\x10\x6f\xf2\x5f\x93\x6c\x20\x7e\x8a\x62\xfb\x53\x76\xac\x2e\xf3\x09\x7f\xf0\x82\x67\x7f\xbc\xe1\x25\x8a\x6b\x01\x44\x0e\x4b\xd9\x42\x78\xae\x1f\xfb\xf9\xd5\x2c\x0a\x91\x91\x6e\x11\xe7\xfe\x09\x00\x00\xff\xff\x04\x22\x86\x71\x29\x04\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 1065, mode: os.FileMode(420), modTime: time.Unix(1432300032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua":  mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua":  &_bintree_t{mainglue_lua, map[string]*_bintree_t{}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
