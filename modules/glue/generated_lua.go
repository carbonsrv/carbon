package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x4d\x73\xe3\x36\x0f\x3e\xc7\xbf\x42\xcb\xbc\x4e\xa8\xb7\xb2\x92\xec\xa1\x33\x75\xa2\x74\x76\xba\x3d\xb7\xd3\xee\xa5\xb5\xbd\x2e\x23\xd3\xb6\xc6\xb2\xe4\x95\x28\x8f\x53\xd7\xf9\xed\x05\xf8\x25\x4a\xb6\x9c\x74\xa6\x7b\xe9\x25\x09\x09\xe0\x01\xf0\x10\x04\xa8\xa4\x79\xcc\x52\x6f\x29\xd6\xe9\x94\x97\x31\xdb\xf0\x68\x3f\x22\x0f\x64\x12\x91\xab\x54\xdc\x93\x60\x44\x1e\xe5\x62\xa1\x16\x57\x72\xc1\xd6\x9b\x7b\x72\xe8\xf5\x94\x71\x55\x24\xc6\x76\x5e\x65\xb1\x48\xf2\x8c\x32\xbf\x77\x51\x70\x51\x15\x99\x47\x49\xbf\xdf\xbf\x7d\xbf\x23\xfe\x70\x9e\x17\x6b\x26\x28\x1b\x3e\x3d\x0b\x4e\x7d\xbf\xc7\xb3\x99\x8b\x52\x65\x67\x70\x4a\x51\x24\xd9\x22\x8c\x97\xac\xa0\x22\xcf\xaa\xf5\x13\x2f\x28\x0b\xee\xbe\x35\x38\x26\xfe\xde\x05\xa6\x53\x63\x80\x21\xa0\xd8\x70\x60\x39\x5c\x94\xd5\x13\x25\xa3\x87\xc7\xab\x09\x09\x9c\xe4\x01\xea\x02\xb0\x82\xde\x45\x55\xbc\x09\xe1\x33\x1b\xfc\xf9\x61\xf0\xfb\xed\xe0\xbb\x69\xf8\x32\x00\xb0\x9a\x8c\x1a\xab\x5c\xf2\xf4\x4d\x68\xfd\xf2\x8f\x97\x77\x97\xff\xbb\xfa\x3f\xf5\xff\x1a\x8f\xaf\xc7\xe4\xfe\xe1\xf1\xfb\xfd\x61\xd4\x9f\x7c\x06\x68\x32\x1e\xf7\xef\x88\x86\xed\x01\xfd\x96\xae\xfd\x5b\xe3\xfd\x06\x50\x3c\x38\x08\xb5\xea\xf7\x69\x7f\xd7\xdf\xf9\x2a\x6a\x83\xe6\x38\x18\x0c\x3c\xc1\x16\xde\x9a\x0b\x26\xd8\x53\xca\xf5\x51\xc1\x1e\x6c\x2d\xd1\x6d\x01\x9a\xbc\x70\x3c\xf3\x74\x8e\xae\x95\x62\x9c\x67\x82\x67\x02\xd6\xc9\xdc\x43\x51\xa8\x77\x3c\xb1\xe4\x19\x6c\x5f\xe8\x75\xb4\x3f\xe0\x0a\xea\xc3\x4b\x82\xad\x97\x64\x5e\xb2\x61\x49\x51\x52\xd7\xc8\xf7\x66\x39\x6a\x21\x98\x78\xde\x70\xba\xf5\xa3\x88\xa8\xb2\x20\x16\xd1\x62\x8e\x92\x49\xb4\x95\x3b\x3c\x2d\x79\xc3\x46\x15\x4f\x87\x8d\xc8\x15\x24\xa8\x5a\xeb\x63\xe0\xa1\xca\x9c\x6a\x1d\xe0\xcb\xfe\x52\x3f\x15\x03\xf9\x06\x69\x29\x1d\x06\xf4\x8e\xc7\xb2\x99\x97\xf1\x9d\xa0\xee\xae\x6f\x43\xd2\x1b\x0e\x31\x2b\x45\x8c\xc3\x8b\x35\x6a\xf1\xb2\x3a\x9d\xa3\x3c\xc2\x30\xc9\x4a\x5e\x08\xaa\x6d\x03\x27\xdb\x76\xba\x27\xf5\x57\x61\x48\xa2\x31\x21\x61\xe8\x58\xea\x7a\x82\xed\x80\x5c\x7d\xa9\x72\xe8\x15\x3e\xe8\xc1\xba\x93\x1e\x43\xc7\x3c\x4e\xf3\x92\xdb\x28\x61\xbb\x5d\x22\xa6\x8c\x55\x38\x20\x8d\xa1\x85\x98\x92\x00\x2f\x0f\x37\x10\x8c\xc4\xca\xd8\x9a\xc3\xc6\x23\xa9\x9d\x19\xe3\x0e\x2d\x5d\x19\x2a\x92\x7c\xc3\x33\xeb\x55\x1d\x5f\xc1\xcb\x2a\x15\x3a\x30\x73\x72\x4e\x60\x28\x8d\xa0\x5d\x36\xa1\x3d\x64\xc7\x8d\xd6\x90\x87\x77\xaf\x0e\xd0\x10\xdd\x05\xd3\xc8\xe3\x0c\x31\xca\xbe\xe5\xd2\x10\x74\x4c\x85\xcd\xc9\x04\xf0\xd5\x52\x7d\x3d\xcb\x7f\x96\x20\x30\xd2\x91\xe5\x5b\xcb\xc0\x22\x79\x37\xea\xfc\x51\xaa\x9a\x34\x9b\xcd\xa6\xa6\x1b\x35\xda\x59\x10\x86\xa1\xaf\x2a\x36\xcb\xc5\xe9\x36\xe6\x6e\xaa\x2b\xab\xfc\xca\x86\x16\xdd\x05\x20\xe7\xb1\xa0\xd7\x97\xd7\x12\x4d\x5f\x58\x45\xfc\x96\xa5\x15\x8f\xb4\x46\x62\xbc\xd5\x4d\x0e\xc5\x27\x1b\x1d\x68\x5c\x4a\xe9\x4b\x74\xdb\x75\xcd\xdd\xc0\x02\xd5\xdf\x43\x9c\x77\x1a\xb6\x79\x3d\xcd\x51\x75\x23\x28\xab\xf6\x5d\x36\x03\x1a\x34\x0d\x9b\x90\x78\xcc\xff\xeb\x7c\xd6\x6c\x7c\x0d\x0a\xb1\x20\xcd\x14\x68\x12\x28\x9e\xd2\x36\x81\xed\x0b\xeb\x6e\xb6\x09\x6c\x0c\x12\xc4\xd2\xf4\x9d\x1f\x1f\xc7\x19\x99\xab\xbe\x6d\x5e\x74\x57\x36\x5a\xe9\x19\xfc\x4a\xae\x71\xca\x59\x71\xba\x5c\x10\xbc\x51\x0e\x59\x92\x9e\x03\x39\x49\x99\x05\x31\xd2\x4e\x90\x92\x8b\xf3\x65\x8b\x7f\x0f\x1b\xf1\x52\xbf\x09\x35\x74\x5a\x09\x55\x56\x35\xf6\xd9\x13\x75\xb0\xb5\xde\x49\x6c\x23\x53\x56\xee\x85\xc3\x11\xd6\x91\xb9\x1c\x6f\x91\x28\x2a\x7e\xf6\xc6\xe2\x34\xee\x42\x50\xc2\x26\x84\x5a\xe9\xf7\x62\xfd\x3c\x14\xf8\x38\x9c\x4e\x13\x78\x23\xed\x5a\xb9\xae\x74\xed\xd6\xb5\x26\x4b\xab\x2e\xb5\xae\x74\xa5\xa1\x29\x33\xfb\x28\x90\x4f\x51\xa8\xb3\x66\x37\x9f\x4e\x21\x92\x34\xd2\xe2\xd0\x39\x11\x8c\xd3\x04\x84\xe6\x14\xc7\x85\xf3\x95\xc1\x85\x7d\xee\xd2\x3d\xca\x22\xfc\x71\x08\x64\x56\xfa\x4b\x03\xde\xc5\xbf\x6e\x78\x9c\xcc\x93\xd8\xfb\xc4\x16\xea\x31\xf7\x21\x4d\x58\xc9\xcb\x1a\x3c\x4d\xb2\x15\x85\x77\x79\x80\xe3\x14\x3c\xa8\xb9\x6a\xd2\xac\x13\x20\x8c\x8c\xf6\xcb\x82\xcf\x23\xa9\x5c\x65\x1b\x16\xaf\x70\x90\xfa\x07\xc8\x4a\x27\xdc\xa1\x2e\x35\x20\x24\x19\x96\xf5\x5c\xc6\x45\xb2\x81\xef\xac\x62\x51\x2a\xbf\x92\x6b\xb9\xf4\xa2\xc8\x6b\x11\xee\x40\x2b\x43\x32\x42\x55\xed\x1b\xac\x71\xe5\xbd\x44\x1e\x5c\x9a\x6e\x1b\x6a\xdf\x83\xd2\x8f\x7f\x2a\x72\xad\x7a\x2a\xe4\xb8\x2c\x4d\xbc\xaa\x8a\x98\x17\x79\x7b\x8c\x1b\xea\x03\x9e\xc9\x37\xa0\x00\x9f\x9c\xaf\x26\x73\xd4\xe0\x94\xa2\xea\x70\x0c\xea\x04\x60\xb7\xb6\x56\x8e\x23\x14\xcf\x00\x36\x62\x93\x56\x3a\x2a\xe4\x93\x9a\xad\x44\x66\x79\x2c\x03\xf4\x1b\xda\xef\x3e\xfe\xf4\xc3\xa7\xdf\x7e\xfe\x11\x8e\x8e\xe0\xfc\x25\x87\xc9\xb0\xbe\xb2\x54\xd5\x15\x94\xd5\x2f\xca\xc4\xa0\x39\xfc\xe8\x7e\x32\x83\xd2\x0c\x60\x35\xe3\xf0\x13\x1d\x59\xc2\x70\x0f\x92\x93\xbf\x80\x84\xf7\xb7\xb7\x56\x82\x7a\x28\x92\xbf\x41\xa6\x18\x95\x71\xf4\x9a\x9f\x6a\xa0\x45\x48\xcd\x32\x7a\x53\x2c\xb7\xa6\x65\xad\x8e\x2a\xbd\xc6\x27\x56\x6d\xa4\x8f\x06\x6f\x07\x6e\x86\xea\x9b\xa9\x55\x4a\x4d\x28\xe7\xbb\x4a\x9f\x4e\x2d\xb7\x47\x22\x3d\xe8\x23\x91\xe2\x9d\x08\x3f\xc2\x1e\x75\x78\x41\x92\xb2\x2d\x0c\xab\x50\x19\x89\x1c\xff\x73\x50\xa6\x49\xcc\xed\xb3\xd1\x6f\x9d\x1d\xfe\x7f\xc2\xf4\x03\x9c\xae\xf0\x57\x2b\x58\x45\xd6\x1c\x82\x99\xa2\x32\x5a\xd6\x95\x22\x2d\x75\x77\x9b\x4b\x02\x8e\x9a\x9a\x9a\x3b\x8d\x39\x38\xaf\xaf\x83\x0d\xe4\x4b\xc5\x8b\xe7\x2d\x2b\xde\x1c\x8c\x34\xf8\x97\xa3\xf9\x3b\x00\x00\xff\xff\xe0\x3e\xb6\x2e\x1b\x12\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 4635, mode: os.FileMode(420), modTime: time.Unix(1438888353, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xcb\x8e\xd4\x40\x0c\x3c\x27\x5f\x61\xe5\x94\x48\xd9\xd5\x8a\x23\xd2\xdc\xe0\x06\x1c\x16\x38\x21\x84\xf2\x70\x48\x4b\x3d\xdd\x91\xdb\xd9\x30\x42\xf0\xed\xd8\x9d\xe7\xa2\x19\x24\xf6\x62\x4d\xda\x55\xae\x72\x8d\xef\xee\xe0\xbd\x69\x5b\x8b\x53\x45\x08\x3d\xda\x01\x29\x94\xe0\x3c\x03\x61\x65\xed\x05\xc6\x80\xdd\x68\x61\x32\xdc\x43\xe5\x2e\xdc\x1b\xf7\x1d\xea\x91\x81\x7b\x84\x80\xf4\x84\x04\xc6\x19\x86\xd0\x90\x19\x38\xed\x46\xd7\xb0\xf1\x0e\xce\xd3\xbd\xc3\x29\xef\x5c\x09\xb5\x71\xad\xd0\x74\x30\x4e\x81\x2b\xc6\x22\x4d\xac\x6f\x2a\x0b\x8d\x6f\x11\x4e\x90\x65\x69\x62\x3a\xe0\xcb\x80\xc2\x28\xe0\x24\x4f\xeb\xa4\x4c\xa5\x5c\x9a\x24\x0b\x36\x30\xc9\xb0\xfb\x76\x3c\x0f\x8a\x4d\x13\xb4\x01\xff\x26\xcf\xa0\x8d\xaa\x2e\x90\x48\xd8\xd6\x57\xed\xdc\xcc\x75\x9e\xd0\x55\x58\x17\xd6\xfe\x02\xbf\x29\x15\xb5\x14\x20\x60\x4f\xb9\xd4\xf8\xe8\xda\x74\x2e\xf3\x52\xb4\xfe\x90\x7e\xdc\x6b\x5d\x7b\x9d\xbf\xba\x5d\x83\x99\x3d\x73\x55\x5b\xdc\x2c\x27\xb4\x5a\x96\x24\xdf\xbc\x7b\xfc\xf6\xe1\x63\x74\x5c\x02\xd3\x88\x7b\xa8\x47\x57\x37\x29\x5d\x25\x88\x12\x7e\x7e\xc9\x42\xf6\xf5\x94\x3d\x65\xbf\x76\xdf\x33\xf7\x45\x96\x1e\x3f\xff\xbf\xa7\x9d\xf3\x2f\x53\x5a\xc4\x92\x32\x7f\x9f\xc0\x19\xbb\x7a\x38\x06\x1f\x51\x84\x3c\x92\x93\xcc\xf5\xeb\x78\x7d\xd8\xf4\x7e\x51\x22\x0c\xc3\x76\x72\xfa\x21\x76\xd8\xbb\xf1\x5c\x23\xe5\xb1\x09\x9e\xe0\xd5\xc3\xc3\x7e\x85\xf1\x38\xae\x9d\xd2\xa2\x27\x02\x6f\x55\x40\xd9\x25\x2c\xa7\x74\xbc\xc4\x7d\xc0\xf3\x10\x6f\xf2\x5f\x93\x6c\x20\x7e\x8a\x62\xfb\x53\x76\xac\x2e\xf3\x09\x7f\xf0\x82\x67\x7f\xbc\xe1\x25\x8a\x6b\x01\x44\x0e\x4b\xd9\x42\x78\xae\x1f\xfb\xf9\xd5\x2c\x0a\x91\x91\x6e\x11\xe7\xfe\x09\x00\x00\xff\xff\x04\x22\x86\x71\x29\x04\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 1065, mode: os.FileMode(420), modTime: time.Unix(1432300032, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua": mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

