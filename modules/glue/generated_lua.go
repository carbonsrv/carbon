package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x5d\x6f\xdb\x36\x17\xbe\x8e\x7f\x05\xcb\xbe\x4e\xa9\x77\x8a\x9a\xf6\x62\xc0\xdc\x28\x43\xb1\xee\x7a\xc3\x56\x0c\xd8\x9c\xd4\x63\x64\x2a\x16\x2c\x4b\xae\x44\x19\xce\xbc\xe4\xb7\xef\x1c\x7e\x88\x94\x6c\x39\x1e\xd0\xde\xec\xc6\x36\xc9\x73\x1e\x3e\xe7\x39\x87\x5f\xce\xcb\x84\xe7\x64\x21\x57\xf9\x4c\xd4\x09\x5f\x8b\x78\x37\xa5\x57\xf4\x36\xa6\xe7\xb9\x7c\x47\xc3\x29\xbd\x56\x8d\x7b\xdd\x38\x57\x0d\xbe\x5a\xbf\xa3\x8f\xa3\x91\x76\x6e\xaa\xcc\xfa\xa6\x4d\x91\xc8\xac\x2c\x18\x0f\x46\x67\x95\x90\x4d\x55\x10\x46\xc7\xe3\xf1\xe5\xdb\x2d\x0d\x26\x69\x59\xad\xb8\x64\x7c\x72\xf7\x20\x05\x0b\x82\x91\x28\xe6\x3e\x4a\x53\x1c\xc1\xa9\x65\x95\x15\xf7\x51\xb2\xe0\x15\x93\x65\xd1\xac\xee\x44\xc5\x78\xf8\xe6\x5b\x8b\x63\xf9\x8f\xce\x30\x1c\x87\x01\x8e\x80\xd2\xd2\x81\xe6\xe4\xbe\x6e\xee\x18\x9d\x5e\x5d\x9f\xdf\xd2\xd0\x0b\x1e\xa0\xce\x00\x2b\x1c\x9d\x35\xd5\x49\x08\x9f\xf8\xc5\x5f\xef\x2f\xfe\xb8\xbc\xf8\x6e\x16\x3d\x5d\x00\x98\x13\xc3\x61\xd5\x0b\x91\x9f\x84\x36\xae\xff\x7c\x7a\xf1\xf2\x7f\xe7\xff\x67\xc1\xdf\x37\x37\xaf\x6e\xe8\xbb\xab\xeb\xef\x77\x8f\xd3\xf1\xed\x27\x80\xa6\x37\x37\xe3\x37\xd4\xc0\x8e\x40\xfe\x56\xae\xdd\xa9\x7c\xbf\x01\x14\x02\x89\xd0\xad\xf1\x98\x8d\xb7\xe3\x6d\xa0\x59\x5b\x34\x6f\x82\x8b\x0b\x22\xf9\x3d\x59\x09\xc9\x25\xbf\xcb\x85\x49\x15\xf4\x41\xd7\x02\xa7\xad\xc0\x52\x54\xde\xcc\x22\x4f\x71\x6a\x6d\x98\x94\x85\x14\x85\x84\x76\x96\x12\x1c\x8a\x4c\x0f\x91\x0b\x51\x40\xf7\x99\x69\xc7\xbb\x47\x6c\x41\x7d\x90\x2c\xdc\x90\xac\x20\xd9\x9a\x67\x55\xcd\x7c\xa7\x80\xcc\x4b\xb4\x42\x30\xf9\xb0\x16\x6c\x13\xc4\x31\xd5\x65\x41\x5b\xc4\x16\x73\x9a\xdd\xc6\x1b\xd5\x23\xf2\x5a\x74\x7c\x74\xf1\x0c\xf8\xc8\x52\x43\x82\x69\xeb\xbd\x0f\x3c\xd1\x91\x33\x63\x03\x7a\xb5\x5f\xfa\x53\x2b\x50\xae\x51\x96\xda\x53\xc0\xf4\x10\x5e\xcc\x49\x21\xb6\x92\xf9\xbd\x41\x4b\xc9\x74\x78\xc2\x2c\xb5\x30\x9e\x2e\xad\x53\x4f\x97\xe5\xe1\x18\x55\x0a\xa3\xac\xa8\x45\x25\x99\xf1\x0d\xbd\x68\xfb\xe1\x1e\xb4\x5f\x46\x11\x8d\x6f\x28\x8d\x22\xcf\xd3\xd4\x13\x74\x87\xf4\xfc\x73\x53\xc2\x5e\x11\x80\x1d\xb4\x07\xe5\xb1\x72\xa4\x49\x5e\xd6\xa2\x65\x09\xdd\xfd\x12\xb1\x65\xac\xe9\xc0\x68\x02\x5b\x88\x2d\x09\x98\xe5\xea\x35\x90\x51\x58\x05\x5f\x09\xe8\xb8\xa6\x6e\x32\xeb\x3c\x60\x65\x2a\x43\x33\x29\xd7\xa2\x68\x67\xd5\xe9\xab\x44\xdd\xe4\xd2\x10\xb3\x99\xf3\x88\xe1\x68\x0c\xdb\x65\x17\x9a\xa0\x3a\x3e\x5b\x2b\x1e\xae\x3d\x47\xd0\x0a\x3d\x04\xd3\x89\xe3\x88\x30\xda\xbf\x37\xa5\x15\x68\x5f\x8a\x36\x26\x4b\xe0\xab\x85\xfa\x7c\x94\xff\x2e\x40\x50\x64\x20\xca\x53\xcb\xa0\x45\x22\xaf\x75\xfe\x71\x54\x6f\xd2\x7c\x3e\x9f\xd9\xdd\xa8\xb3\x9d\x85\x51\x14\x05\xba\x62\x8b\x52\x1e\xde\xc6\xfc\x4e\xbd\x64\xf5\xbc\x6a\x43\x8b\xdf\x84\x30\x2e\x12\xc9\x5e\xbd\x7c\xa5\xd0\xcc\x82\xd5\xc2\x6f\x78\xde\x88\xd8\x58\x64\x76\x36\xb7\xc9\xe1\xf0\xc1\x8d\x0e\x2c\x5e\xaa\xd1\xa7\xf8\x72\x68\x99\xfb\xc4\x42\xbd\xbf\x47\x78\xde\x19\xd8\xee\xf2\xb4\xa9\x1a\x46\xd0\x5e\xfd\xb5\x6c\x0f\x68\xb0\xb4\x6a\x42\xe0\x89\xf8\xaf\xeb\xe9\xd4\xf8\x1a\x12\x62\x41\xda\x53\xa0\x2b\xa0\xbc\xcb\xfb\x02\xf6\x17\xac\xdf\xd9\x17\xb0\x73\x90\x20\x96\x91\xef\xf8\xf1\xb1\x1f\x91\x5d\xea\x9b\xee\x42\xf7\xc7\xa6\x4b\x73\x06\x3f\x13\x6b\x92\x0b\x5e\x1d\x2e\x17\x04\xef\x94\x43\x91\xe5\xc7\x40\x0e\x4a\xd6\x82\xd8\xd1\x41\x90\x5a\xc8\xe3\x65\x8b\xbf\x27\x1d\xbe\x2c\xe8\x42\x4d\xbc\xad\x84\x69\x2f\x87\x7d\x34\xa3\x1e\xb6\xb1\x3b\x88\x6d\xc7\xb4\x97\xbf\xe0\xf0\x08\x1b\x88\x5c\x1d\x6f\xb1\xac\x1a\x71\x74\xc5\xe2\x69\x3c\x84\xa0\x07\xbb\x10\xba\x65\xee\x8b\xee\x7a\x28\xf1\x72\x38\x9b\x65\x70\x47\xda\xf6\x62\x5d\x9a\xda\x75\xb5\xa6\x4a\xcb\x95\xda\x50\xb8\xca\xd1\x96\x59\x7b\x29\x50\x57\x51\xa8\xb3\xee\x6e\x3e\x9b\x01\x93\x3c\x36\xc3\x91\x97\x11\xe4\x69\x09\xa1\x3b\xc3\xe3\xc2\x7b\x65\x08\xd9\x5e\x77\xd9\x0e\xc7\x62\xfc\x78\x0c\x55\x54\xe6\xa5\x01\xf7\xe2\x5f\xd7\x22\xc9\xd2\x2c\x21\x1f\xf9\xbd\xbe\xcc\xbd\xcf\x33\x5e\x8b\xda\x81\xe7\x59\xb1\x64\x70\x2f\x0f\xf1\x38\x85\x19\xf4\xb9\x6a\xc3\x74\x01\x50\x4e\xa7\xbb\x45\x25\xd2\x58\x19\x37\xc5\x9a\x27\x4b\x3c\x48\x83\x47\x88\xca\x04\x3c\x60\xae\x2c\x80\x92\xa2\xd5\xce\x5c\x27\x55\xb6\x86\x77\x56\x75\x5f\xeb\x79\x95\xd6\xaa\x49\xe2\x98\xf4\x04\xf7\xa0\xb5\x23\x9d\xa2\xa9\x99\x1b\xbc\xb1\x45\x9e\x62\x02\x8b\x66\xd8\x87\xb5\xf7\x41\x35\x4f\x70\x88\xb9\x31\x3d\x44\x39\xa9\x6b\xcb\x57\x57\x11\x27\x31\xd9\x21\x6f\xa8\x0f\xb8\x26\xbf\x06\x03\x78\x72\x3e\x1b\xcc\xde\x06\xa7\x0d\xf5\x0e\xc7\xa1\x4e\x00\x76\xd3\xd6\xca\x3e\x43\xf9\x00\x60\x53\x7e\x7b\x20\x1c\xf4\x38\x64\xda\x8b\x64\x5e\x26\x8a\x61\xd0\xb1\x7e\xf1\xe1\xa7\x1f\x3e\xfe\xfe\xf3\x8f\x90\x3b\x8a\x07\x30\x7d\xbc\x9d\xb8\x35\xcb\x5c\x61\xc1\x5b\x71\x2d\x2a\xaf\x8c\xea\x87\x42\xf2\xed\x22\x67\x28\x43\x48\xe6\x22\xe5\x70\x87\x01\x39\x74\x6a\x5d\xbb\x97\x9b\x99\x75\x44\x24\xe3\x8c\xab\x75\x2f\x33\x87\x0c\x53\x0e\x26\x81\x97\x28\x60\xf6\x8b\x36\xb7\xc4\xbc\xdc\x99\xbd\x6e\x0e\xcb\x26\x84\xd6\x5c\xc0\x27\x6a\xd0\x26\x13\xfb\x40\x78\xf5\x05\x09\x7a\x7b\x79\xd9\x8e\xa0\x1d\x0e\xa9\x6f\x18\xd3\xd9\x56\x12\x8d\xba\xcf\x48\xb0\xa2\xd4\x55\x00\xce\xa6\x2b\xa0\x77\x92\x3b\x73\x34\x19\x75\x9e\x7f\xce\xc9\x94\x0d\xae\x5c\xec\x8c\xf4\x7b\xae\x57\xe6\x5d\x28\xef\xcd\x67\x14\x74\xe3\x6d\xb9\xa8\x19\x4c\xb5\xa8\xe1\xad\x8c\x3e\x40\x1f\xf3\x74\x41\x91\x8a\x0d\x1c\xa4\x91\x76\x92\x25\xfe\xab\x51\xe7\x59\x22\xda\x2b\xad\xab\x88\xdf\x60\x48\xf1\xac\x65\x93\xa6\x24\xad\xca\x15\xb1\xc8\x2e\x09\x6b\x5e\xf1\x95\xdd\xcc\xf0\x6a\x00\xbf\x7a\xd1\x68\x35\x53\x60\x3b\x53\xd6\x3a\xdf\x96\xb8\x72\x35\x7b\x73\xaa\x24\xda\xdb\x92\xf5\xa9\xd9\x39\xc5\x53\x57\x23\x0a\xb3\x06\x74\xf5\xc3\x31\xc3\x7f\x7d\x4e\x26\x86\xc6\x5f\x98\x57\x4b\xe4\x73\x23\xaa\x87\x93\x99\x28\xeb\x2f\x4c\xe5\x9f\x00\x00\x00\xff\xff\x90\x27\x3f\xb0\x6e\x13\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 4974, mode: os.FileMode(420), modTime: time.Unix(1439574651, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xcd\x8a\xd4\x40\x10\x3e\x27\x4f\x51\xe4\x94\x40\x76\x59\x3c\x0a\x73\xd3\x9b\x7a\x58\xf5\x24\x22\x3d\x49\xc5\x34\xf4\x74\x87\xea\xca\x66\x83\xe8\xb3\x5b\xdd\xf9\x1d\x9d\x08\xee\xa5\xd9\x49\x7d\x7f\xf5\x6d\xdd\xdd\xc1\x7b\x5d\xd7\x06\x07\x45\x08\x2d\x9a\x0e\xc9\x97\x60\x1d\x03\xa1\x32\x66\x84\xde\x63\xd3\x1b\x18\x34\xb7\xa0\xec\xc8\xad\xb6\xdf\xe1\xdc\x33\x70\x8b\xe0\x91\x9e\x90\x40\x5b\xcd\xe0\x2b\xd2\x1d\xa7\x4d\x6f\x2b\xd6\xce\xc2\x65\xb8\xb7\x38\xe4\x8d\x2d\xe1\xac\x6d\x2d\xb4\x20\x8c\x83\x67\xc5\x58\xa4\x89\x71\x95\x32\x50\xb9\x1a\xe1\x04\x59\x96\x26\xba\x01\x1e\x3b\x14\x46\x01\x27\xf9\xb4\x28\x65\xc1\xca\xa6\x49\x32\x63\x3d\x93\x88\xdd\xd7\xfd\xa5\x0b\xd8\x34\x41\xe3\xf1\x4f\xf2\x04\x5a\xa9\x21\x05\x12\x09\xdb\x38\x55\x4f\xc3\x3c\xe8\x09\x3d\x18\x87\x85\xc3\x7c\x86\x1f\x5a\x45\xaf\x00\x10\xb0\xa3\x5c\xde\xf8\xd1\xd6\xe9\xf4\x4c\x4b\xd1\xf2\x87\xcc\xe3\x5e\xcb\xda\x8b\xfe\x92\x76\x29\x66\xca\xcc\xea\x6c\x70\x8d\x9c\xd0\x12\x59\x9a\x7c\xf3\xee\xf1\xdb\x87\x8f\x31\x71\x09\x4c\x3d\x6e\xa5\xee\x53\x1d\x52\x1a\x25\x88\x12\x7e\x7c\xc9\x7c\xf6\xf5\x94\x3d\x65\x3f\xb7\xdc\x13\xf7\x45\x91\x1e\x3f\xff\x7f\xa6\x8d\xf3\xaf\x50\xe1\x91\x48\x81\xf9\xeb\x04\x56\x9b\x25\xc3\xbe\xf8\x88\x22\xe4\x9e\xac\x74\x1e\x7e\xed\xaf\x0f\xab\xd6\xcd\x4e\x84\xbe\x5b\x4f\x2e\xfc\x90\x38\xec\x6c\x7f\x39\x23\xe5\x71\x08\x8e\xe0\xd5\xc3\xc3\x76\x85\xf1\x38\x6e\x9d\xd2\xec\x27\x06\x6f\x83\x41\x60\x97\x30\x9f\xd2\xfe\x12\x37\x81\xeb\x12\x0f\xf9\xaf\x49\x36\x90\x3c\x45\xb1\xfe\x53\x36\x6c\x58\xe6\x13\x3e\xf3\x8c\x67\xb7\xbf\xe1\xb9\x8a\x5b\x05\x44\x0e\xcb\xb3\x96\x70\xed\x1f\xe7\xf9\xcd\x2e\x0a\xb1\x91\x69\xf1\x97\xae\x1f\x2d\xab\xe7\xd6\x1c\xe9\xc6\xe2\x0f\x35\xaf\xd8\xc5\xa4\xfe\x3b\x00\x00\xff\xff\xa2\x01\xc1\xec\x87\x04\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 1159, mode: os.FileMode(420), modTime: time.Unix(1439571527, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua": mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

