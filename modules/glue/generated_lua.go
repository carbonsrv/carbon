package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x4d\x93\xe2\x36\x13\x3e\xc3\xaf\xd0\x6a\x5e\x33\xf2\x1b\xe3\x65\xf6\x90\xaa\x30\xe3\x49\xa5\x92\x54\xe5\x90\x54\x52\xd9\xb9\x24\xc0\x12\x61\x04\xb8\x30\x32\xb1\x65\x8a\x0d\x61\x7e\x7b\x5a\xd6\x87\x65\x0f\x66\x27\x87\xbd\xe4\xb0\xec\xa8\x3f\x1e\x75\x3f\x6a\xb5\xda\x69\x16\xd3\x14\x6d\xc4\x2e\x9d\xb3\x22\xa6\x7b\x16\x9d\x26\xf8\x01\xcf\x22\x3c\x48\xc5\x3d\x0e\x26\xf8\xb1\x5a\xac\xd5\x62\x50\x2d\xe8\x6e\x7f\x8f\xcf\x7d\xe5\x5b\xe6\x89\x71\x5d\x95\x3c\x16\x49\xc6\x09\xf5\xfb\xbd\x9c\x89\x32\xe7\x88\x60\xcf\xf3\x46\xef\x8e\xd8\x1f\xaf\xb2\x7c\x47\x05\xa1\xe3\xc5\x47\xc1\x88\xef\xf7\x19\x5f\x3a\x20\x25\xbf\x02\x53\x88\x3c\xe1\xeb\x30\xde\xd0\x9c\x88\x8c\x97\xbb\x05\xcb\x09\x0d\xee\xbe\xd4\x30\x26\xf8\x7e\x4f\xe6\x52\x43\x80\x1f\x80\xd8\x60\x60\x39\x5e\x17\xe5\x82\xe0\xc9\xc3\xe3\x60\x86\x03\x27\x73\x40\xea\x01\x54\xd0\xef\x95\xf9\xab\x10\x3e\xd0\xe1\x5f\xdf\x0c\x7f\x1f\x0d\xbf\x9a\x87\xcf\x43\x00\xab\xa9\xa8\xb1\x8a\x0d\x4b\x5f\x85\xe6\x15\x7f\x3c\xbf\xb9\xf9\xdf\xe0\xff\xc4\xff\x7b\x3a\xbd\x9d\xe2\xfb\x87\xc7\xaf\x4f\xe7\x89\x37\xfb\x00\xd0\x78\x3a\xf5\xee\xb0\x86\xed\x9f\xfb\x96\xac\xd3\x6b\xc3\xfd\x02\x40\x10\x9c\x82\x5a\x79\x1e\xf1\x8e\xde\xd1\x57\x41\x1b\xb4\x1a\x7f\x38\x44\x82\xae\xd1\x8e\x09\x2a\xe8\x22\x65\xfa\x9c\x40\x06\xa2\x8d\xdc\x35\x07\x43\x96\x3b\x1b\xb3\x74\x25\x77\x56\x86\x71\xc6\x05\xe3\x02\xd6\xc9\x0a\x49\x55\xa8\x25\x48\x6c\x18\x07\x71\x4f\xaf\xa3\xd3\x59\xae\xa0\x36\x50\x12\x1c\x50\xc2\x51\xb2\xa7\x49\x5e\x10\xd7\xc9\x47\xcb\x4c\x5a\x49\x30\xf1\x71\xcf\xc8\xc1\x8f\x22\xac\x6a\x02\x5b\x44\x8b\x39\x49\x66\xd1\xa1\x92\xb0\xb4\x60\x0d\x1f\x55\x39\x1d\x3e\x22\x53\x90\x60\x6a\xbd\x5f\x02\x8f\x55\xe6\x44\xdb\x00\x5d\xf6\x3f\xf5\xab\x18\xc8\xf6\x92\x96\xc2\x61\x40\x4b\x10\xe5\x4b\xc4\xd9\x51\x10\x57\xea\xdb\x90\xb4\xc0\x21\x66\xab\x88\x71\x78\xb1\x4e\x2d\x5e\xb6\x97\x73\xac\x8e\x30\x4c\x78\xc1\x72\x41\xb4\x6f\xe0\x64\xdb\x4e\xf7\xa2\xfd\x36\x0c\x71\x34\xc5\x38\x0c\x1d\x4f\x5d\x4e\x20\x0e\xf0\xe0\xcf\x32\x83\x36\xe1\x83\x1d\xac\x3b\xe9\x31\x74\xac\xe2\x34\x2b\x98\x8d\x12\xc4\xed\x12\x31\x55\xac\xc2\x01\x6d\x0c\xed\xc3\x94\x04\xec\xf2\xf0\x16\x82\xa9\xb0\x38\xdd\x31\x10\x3c\xe2\x7a\x33\xe3\xdc\x61\xa5\x2b\x43\x45\x92\xed\x19\xb7\xbb\xaa\xe3\xcb\x59\x51\xa6\x42\x07\x66\x4e\xce\x09\x4c\x6a\x23\xe8\x94\x4d\x68\x24\xd9\x71\xa3\x35\xe4\xc9\xab\x57\x07\x68\x88\xee\x82\x69\xe4\x71\x85\x18\xe5\xdf\xda\xd2\x10\xf4\x92\x0a\x9b\x93\x09\xe0\xb3\xa5\xfa\xe9\x2c\xff\x5d\x82\xc0\x48\x47\x96\xaf\x2d\x03\x8b\x84\xde\xaa\xf3\x97\x5a\xd5\xa2\xe9\x72\x39\x37\xdd\xa8\xd1\xce\x82\x30\x0c\x7d\x55\xb1\x3c\x13\x97\xdb\x98\x2b\x54\x57\x56\xed\x5b\x35\xb4\xe8\x2e\x00\x3d\x8b\x05\xb9\xbd\xb9\xad\xd0\xf4\x85\x55\xc4\x1f\x68\x5a\xb2\x48\x5b\x24\x66\xb7\xba\xc9\x49\xf5\xc5\x46\x07\x16\x37\x95\xf6\x39\x1a\x75\x5d\x73\x37\xb0\x40\xb5\xf7\x50\xbe\x76\x1a\xb6\x79\x3d\xcd\x51\x75\x23\x28\xaf\xf6\x5d\x36\xaf\x33\x58\x1a\x36\x21\xf1\x98\xfd\xd7\xf9\xac\xd9\xf8\x1c\x14\xca\x82\x34\xaf\x40\x93\x40\xb1\x48\xdb\x04\xb6\x2f\xac\x2b\x6c\x13\xd8\x78\x48\x24\x96\xa6\xef\xfa\xf3\xf1\x32\x23\x73\xd5\x0f\xcd\x8b\xee\xea\x26\x5b\xfd\x06\x7f\x22\xd7\x38\x65\x34\xbf\x5c\x2e\x12\xbc\x51\x0e\x3c\x49\xaf\x81\x5c\xa4\xcc\x82\x18\x6d\x27\x48\xc1\xc4\xf5\xb2\x95\x7f\x8f\x1b\xf1\x12\xbf\x09\x35\x76\x5a\x09\x51\x5e\x35\xf6\xd5\x13\x75\xb0\xb5\xdd\x45\x6c\xa3\x53\x5e\xee\x85\x93\x4f\x58\x47\xe6\xd5\xf3\x16\x89\xbc\x64\x57\x6f\xac\x7c\x8d\xbb\x10\x94\xb2\x09\xa1\x56\x6a\x5c\xac\xa7\x43\x21\x67\xc3\xf9\x3c\x81\x11\xe9\xd8\x4a\x75\xab\x4b\xb7\x2e\xb5\xaa\xb2\xea\x4a\xeb\xca\xb6\x72\x34\x55\x66\x67\x82\x6a\x12\x85\x32\x6b\x36\xf3\xf9\x1c\x22\x49\x23\xad\x0e\x9d\x03\x51\x53\xed\xfb\x3d\x8b\x93\x55\x12\xa3\x27\xba\x2e\xfa\x26\x40\x09\x47\xe4\xeb\xe1\x7c\x71\x30\x61\xa7\x5f\x72\x92\xba\x48\xfe\x9c\x83\x2a\x4b\xf5\xd5\x61\xdd\xd3\x84\x6f\x09\xcc\xe1\x81\x7c\x3f\x6b\x0c\x30\xc5\x52\x85\x27\xa7\x4d\xce\x56\x51\x65\x51\xf2\x3d\x8d\xb7\xf2\xb9\xf4\xcf\x33\xd2\x02\x2a\xe2\x3c\xd9\xcb\xd7\x6d\xc9\x9a\x30\x4a\x81\xb5\xa6\xe1\xb3\xcc\xe2\x8a\xd2\xa6\xc3\x9b\xef\x7e\xfe\xf6\xe9\xb7\x5f\xbe\x87\xbd\xb1\xec\xfb\xf8\x3c\x1b\xd7\xa5\xa2\xf7\x05\x42\x7e\x55\x2e\x06\xad\x86\x35\x75\xbc\x04\x0e\x02\xa4\x23\xaa\xde\xea\x25\x43\x51\x84\xe0\x22\x99\x93\x53\x22\xf4\x6e\x34\x52\x05\x61\x4f\x59\xfa\xfa\xd2\xb8\xdd\x73\x2b\xf0\xa3\x08\xdf\xab\x41\x52\x02\x04\xa8\xb2\xee\x37\x86\xf6\x1a\x40\xd7\x8a\x1c\x9e\xa5\x30\x54\x53\x38\x7a\x6e\x05\xa2\x60\x7f\x78\xfa\xe9\xc7\x17\xd0\x76\x70\xd7\x7b\x5c\xb3\xb7\x23\x6e\x15\x80\xfe\x2c\x92\xff\xfe\x09\x00\x00\xff\xff\x3c\x7a\xdf\xd0\x31\x0f\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 3889, mode: os.FileMode(420), modTime: time.Unix(1430963581, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\x51\x6a\xc3\x30\x10\x44\xbf\xad\x53\x0c\xfe\x72\x21\xc9\x0d\x7c\x84\xf6\x0e\xae\xb5\xae\x05\xca\xca\xac\x56\x35\xfe\xe9\xd9\xab\x8d\xe2\x52\x0a\xfd\x11\x68\x76\x66\x1e\x73\xbd\xe2\x35\x78\x1f\x69\x9f\x84\xb0\x52\xdc\x48\xf2\x05\x9c\x14\x42\x53\x8c\x07\x4a\xa6\xa5\x44\xec\x41\x57\x4c\x7c\xe8\x1a\xf8\x03\xef\x45\xa1\x2b\x21\x93\x7c\x92\x20\x70\x50\xe4\x59\xc2\xa6\x6e\x29\x3c\x6b\x48\x8c\xfb\x7e\x63\xda\x87\x85\x5f\x5c\x37\x27\x4f\x18\xd1\xf7\xae\x0b\x0b\xf4\xd8\xc8\x74\x8c\x55\x3a\xfd\xbd\x15\xb2\xeb\x4e\x6f\x56\xa9\xa4\x9b\x2f\xf7\xad\x75\x50\xcc\xf4\x37\xdc\x4c\x3f\xd1\x85\x2f\x20\x91\x9a\x8e\x69\xf2\xed\x38\x58\x5f\x8d\x1b\xd8\x66\xd9\xfd\x69\xff\x17\xf5\x60\x99\xa1\x9a\x93\x0c\xf5\x7d\x88\xec\x5d\x7b\xe4\xc4\xd4\x8d\x6f\x75\xe3\x13\x51\x09\x26\x7f\x8d\xe0\x10\x4f\xc8\xef\x8a\x16\x26\x2d\xc2\x10\x67\xbf\xef\x00\x00\x00\xff\xff\xb4\x73\xcf\x77\x80\x01\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 384, mode: os.FileMode(420), modTime: time.Unix(1430962075, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua": mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

