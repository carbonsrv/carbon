package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x4d\x6f\xe3\x36\x13\x3e\xc7\xbf\x82\xcb\xbc\x4e\xa8\xb7\xb2\x36\xd9\x43\x81\x3a\x51\x8a\xa2\x2d\xd0\x43\x8b\x16\xdd\x5c\x5a\x3b\xeb\x32\x32\x1d\x0b\x96\x25\x57\xa2\x0c\x6f\x5d\xe7\xb7\x77\xc8\x21\x29\x4a\xb1\xbc\xe9\x61\x2f\xbd\x38\xe1\x7c\x3c\x9c\x79\x38\xe4\x8c\xb2\x22\xe1\x19\x59\xca\x75\x36\x13\x55\xc2\x37\x22\xde\x4f\xe8\x2d\x7d\x88\xe9\x45\x26\x6f\x68\x38\xa1\x77\x7a\xf1\x84\x8b\x0b\xbd\xe0\xeb\xcd\x0d\x3d\x0c\xd0\xb7\x2e\x53\xeb\xba\xa8\xf3\x44\xa6\x45\xce\x78\x30\x38\x2b\x85\xac\xcb\x9c\x30\x3a\x1c\x0e\xaf\xde\xed\x68\x30\x5e\x14\xe5\x9a\x4b\xc6\xc7\x8f\x1f\xa5\x60\x41\x30\x10\xf9\xdc\x03\xa9\xf3\x13\x30\x95\x2c\xd3\xfc\x29\x4a\x96\xbc\x64\xb2\xc8\xeb\xf5\xa3\x28\x19\x0f\xaf\xbf\x34\x30\x36\xf8\xc1\x99\xca\xa5\x81\x00\x3f\x00\x71\xc1\xc0\x72\xfc\x54\xd5\x8f\x8c\x4e\x6e\xef\x2e\x1e\x68\xe8\x65\x0e\x48\x67\x00\x15\x0e\xce\xea\xf2\x55\x08\x1f\xf8\xe8\xaf\x6f\x46\xbf\x5f\x8d\xbe\x9a\x45\xcf\x23\x00\x6b\xa8\x68\xb0\xaa\xa5\xc8\x5e\x85\x36\xac\xfe\x78\x7e\x73\xfe\xbf\x8b\xff\xb3\xe0\xef\xe9\xf4\x72\x4a\x6f\x6e\xef\xbe\xde\x1f\x26\xc3\x87\x0f\x00\x4d\xa7\xd3\xe1\x35\x35\xb0\x83\xc3\xc0\x91\xb5\x7f\x6d\xb8\x5f\x00\x08\x81\x53\xc0\xd5\x70\xc8\x86\xbb\xe1\x2e\xc0\xa0\x2d\x5a\x83\x3f\x1a\x11\xc9\x9f\xc8\x5a\x48\x2e\xf9\x63\x26\xcc\x39\x81\x0c\x44\x4b\xb5\x6b\x09\x86\xa2\xf4\x36\x16\xd9\x42\xed\x8c\x86\x49\x91\x4b\x91\x4b\x58\xa7\x0b\xa2\x54\x91\x91\x10\xb9\x14\x39\x88\xcf\xcc\x3a\xde\x1f\xd4\x0a\x6a\x83\xa4\xe1\x96\xa4\x39\x49\x37\x3c\x2d\x2b\xe6\x3b\x05\x64\x5e\x28\x2b\x05\x26\x3f\x6e\x04\xdb\x06\x71\x4c\xb1\x26\xa8\x43\x74\x98\x93\xf4\x21\xde\x6a\x89\xc8\x2a\xd1\xf2\xc1\xca\xe9\xf1\x91\x05\x42\x82\xa9\xf3\x7e\x09\x3c\xc6\xcc\x99\xb1\x01\xba\xdc\x1f\xfc\x45\x06\x8a\x8d\xa2\xa5\xf2\x18\x30\x12\xc2\xf3\x39\xc9\xc5\x4e\x32\x5f\x1a\xb8\x90\x8c\xc0\x23\x66\x85\xc4\x78\xbc\x38\xa7\x0e\x2f\xab\xe3\x39\xea\x23\x8c\xd2\xbc\x12\xa5\x64\xc6\x37\xf4\xb2\xed\xa6\x7b\xd4\x7e\x15\x45\x34\x9e\x52\x1a\x45\x9e\xa7\x29\x27\x10\x87\xf4\xe2\xcf\xba\x80\x67\x22\x00\x3b\x58\xf7\xd2\x63\xe9\x58\x24\x59\x51\x09\x17\x25\x88\xbb\x25\x62\xab\x18\xc3\x01\x6d\x02\xcf\x87\x2d\x09\xd8\xe5\xf6\x2d\x04\xa3\xb1\x72\xbe\x16\x20\xb8\xa3\xcd\x66\xd6\xb9\xc7\xca\x54\x06\x46\x52\x6c\x44\xee\x76\xc5\xe3\x2b\x45\x55\x67\xd2\x04\x66\x4f\xce\x0b\x4c\x69\x63\x78\x29\xdb\xd0\x44\xb1\xe3\x47\x6b\xc9\x53\x57\xaf\x09\xd0\x12\xdd\x07\xd3\xca\xe3\x04\x31\xe8\xdf\xd9\xd2\x12\xf4\x92\x0a\x97\x93\x0d\xe0\xb3\xa5\xfa\xe9\x2c\xff\x5d\x82\xc0\x48\x4f\x96\xaf\x2d\x03\x87\x44\xde\xe2\xf9\x2b\x2d\x3e\xd1\x7c\x3e\x9f\xd9\xd7\xa8\xf5\x9c\x85\x51\x14\x05\x58\xb1\x79\x21\x8f\x3f\x63\xbe\x10\xaf\x2c\xee\xab\x1f\xb4\xf8\x3a\x04\xbd\x48\x24\xbb\x3c\xbf\xd4\x68\xe6\xc2\x22\xf1\x5b\x9e\xd5\x22\x36\x16\xa9\xdd\xad\x79\xe4\x94\xfa\xe8\x43\x07\x16\xe7\x5a\xfb\x1c\x5f\xf5\x5d\x73\x3f\xb0\x10\x9f\xf7\x48\x75\x3b\x03\xdb\xbe\x9e\xf6\xa8\xfa\x11\xd0\xab\x7b\x97\x6d\x77\x06\x4b\xcb\x26\x24\x9e\x88\xff\x3a\x9f\x0d\x1b\x9f\x83\x42\x55\x90\xb6\x0b\xb4\x09\x94\x8f\x59\x97\xc0\xee\x85\xf5\x85\x5d\x02\x5b\x8d\x44\x61\x19\xfa\x4e\xb7\x8f\x97\x19\xd9\xab\xbe\x6d\x5f\x74\x5f\x37\x59\x99\x1e\xfc\x89\x5c\x93\x4c\xf0\xf2\x78\xb9\x28\xf0\x56\x39\xe4\x69\x76\x0a\xe4\x28\x65\x0e\xc4\x6a\x7b\x41\x2a\x21\x4f\x97\xad\xfa\x7f\xdc\x8a\x97\x05\x6d\xa8\xb1\xf7\x94\x30\xf4\x6a\xb0\x4f\x9e\xa8\x87\x6d\xec\x8e\x62\x5b\x1d\x7a\xf9\x17\x4e\xb5\xb0\x9e\xcc\x75\x7b\x8b\x65\x59\x8b\x93\x37\x56\x75\xe3\x3e\x04\x54\xb6\x21\x70\x85\xe3\x62\x33\x1d\x4a\x35\x1b\xce\x66\x29\x8c\x48\xbb\x4e\xaa\x2b\x53\xba\x4d\xa9\xe9\xca\x6a\x2a\xad\x2f\x5b\xed\x68\xab\xcc\xcd\x04\x7a\x12\x85\x32\x6b\x3f\xe6\xb3\x19\x44\x92\xc5\x46\x1d\x79\x07\x82\x53\xed\xfb\x8d\x48\xd2\x45\x9a\x90\x7b\xfe\x54\x0d\x6c\x80\x0a\x8e\xa9\xee\xe1\x7d\x71\x08\xe9\xa6\x5f\xb6\x57\xba\x58\xfd\x1c\x42\x9d\x25\x7e\x75\x38\xf7\x2c\xcd\x57\x0c\xe6\xf0\x50\xf5\x4f\xc0\xc0\x46\x6a\x13\x6b\x42\xa6\x9c\x4e\xf6\xcb\x52\x2c\x62\x6d\x5c\xe7\x1b\x9e\xac\x54\xe7\x0c\x0e\x90\x87\x49\xb1\xc7\x5c\x5b\xa8\x4f\x1d\x7f\xe3\x2a\x29\xd3\x8d\xea\x86\x73\x2f\x74\xe5\x89\x0a\x6a\x34\x2d\x9f\x79\x91\xe8\x23\x68\x3b\xbc\xf9\xee\xe7\x6f\xef\x7f\xfb\xe5\x7b\xd8\x91\xaa\x3e\x41\x0f\x0f\xe3\xa6\xb4\x18\x62\x00\x81\xbf\xa2\x8b\x45\x6b\x60\x6d\xdd\xcf\x81\xb3\x90\x98\x88\x74\x6f\x9f\x0b\x12\xc7\x04\x2e\x9e\x25\x04\x45\xe4\xdd\xd5\x15\xa6\xe4\xaa\x42\xf9\x06\xca\xb8\xfb\x46\x6b\xf0\x9d\x8c\xde\xe3\xe0\xa9\x00\x42\xa2\xad\x07\xad\x21\xbf\x01\x30\xb5\xa5\x86\x6d\x25\x8c\x70\x6a\x27\xcf\x9d\x40\x10\xf6\x87\xfb\x9f\x7e\x7c\x01\xed\x06\xfd\xc0\x1d\x4d\xaf\xbd\x1b\x89\x75\x00\x41\x73\x52\xff\x04\x00\x00\xff\xff\x31\x5f\x88\xe5\x61\x0f\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 3937, mode: os.FileMode(420), modTime: time.Unix(1431797886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xcb\x8e\xd4\x40\x0c\x3c\x27\x5f\x61\xe5\x94\x48\xd9\xd5\x8a\x23\xd2\xdc\xe0\x06\x1c\x16\x38\x21\x84\xf2\x70\x48\x4b\x3d\xdd\x91\xdb\xd9\x30\x42\xf0\xed\xd8\x9d\xe7\xa2\x19\x24\xf6\x62\x4d\xda\x55\xae\x72\x8d\xef\xee\xe0\xbd\x69\x5b\x8b\x53\x45\x08\x3d\xda\x01\x29\x94\xe0\x3c\x03\x61\x65\xed\x05\xc6\x80\xdd\x68\x61\x32\xdc\x43\xe5\x2e\xdc\x1b\xf7\x1d\xea\x91\x81\x7b\x84\x80\xf4\x84\x04\xc6\x19\x86\xd0\x90\x19\x38\xed\x46\xd7\xb0\xf1\x0e\xce\xd3\xbd\xc3\x29\xef\x5c\x09\xb5\x71\xad\xd0\x74\x30\x4e\x81\x2b\xc6\x22\x4d\xac\x6f\x2a\x0b\x8d\x6f\x11\x4e\x90\x65\x69\x62\x3a\xe0\xcb\x80\xc2\x28\xe0\x24\x4f\xeb\xa4\x4c\xa5\x5c\x9a\x24\x0b\x36\x30\xc9\xb0\xfb\x76\x3c\x0f\x8a\x4d\x13\xb4\x01\xff\x26\xcf\xa0\x8d\xaa\x2e\x90\x48\xd8\xd6\x57\xed\xdc\xcc\x75\x9e\xd0\x55\x58\x17\xd6\xfe\x02\xbf\x29\x15\xb5\x14\x20\x60\x4f\xb9\xd4\xf8\xe8\xda\x74\x2e\xf3\x52\xb4\xfe\x90\x7e\xdc\x6b\x5d\x7b\x9d\xbf\xba\x5d\x83\x99\x3d\x73\x55\x5b\xdc\x2c\x27\xb4\x5a\x96\x24\xdf\xbc\x7b\xfc\xf6\xe1\x63\x74\x5c\x02\xd3\x88\x7b\xa8\x47\x57\x37\x29\x5d\x25\x88\x12\x7e\x7e\xc9\x42\xf6\xf5\x94\x3d\x65\xbf\x76\xdf\x33\xf7\x45\x96\x1e\x3f\xff\xbf\xa7\x9d\xf3\x2f\x53\x5a\xc4\x92\x32\x7f\x9f\xc0\x19\xbb\x7a\x38\x06\x1f\x51\x84\x3c\x92\x93\xcc\xf5\xeb\x78\x7d\xd8\xf4\x7e\x51\x22\x0c\xc3\x76\x72\xfa\x21\x76\xd8\xbb\xf1\x5c\x23\xe5\xb1\x09\x9e\xe0\xd5\xc3\xc3\x7e\x85\xf1\x38\xae\x9d\xd2\xa2\x27\x02\x6f\x55\x40\xd9\x25\x2c\xa7\x74\xbc\xc4\x7d\xc0\xf3\x10\x6f\xf2\x5f\x93\x6c\x20\x7e\x8a\x62\xfb\x53\x76\xac\x2e\xf3\x09\x7f\xf0\x82\x67\x7f\xbc\xe1\x25\x8a\x6b\x01\x44\x0e\x4b\xd9\x42\x78\xae\x1f\xfb\xf9\xd5\x2c\x0a\x91\x91\x6e\x11\xe7\xfe\x09\x00\x00\xff\xff\x04\x22\x86\x71\x29\x04\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 1065, mode: os.FileMode(420), modTime: time.Unix(1431700968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua":  mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua":  &_bintree_t{mainglue_lua, map[string]*_bintree_t{}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
