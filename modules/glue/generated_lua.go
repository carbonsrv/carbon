package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _confglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x53\xc1\x8e\xd3\x30\x10\x3d\x27\x5f\x31\xca\xa9\x91\xda\xd5\xc2\x11\xa9\x37\xb8\x01\x87\x5d\x10\x07\x84\x50\x9a\x4c\x89\x25\xd7\x8e\xc6\x93\xcd\x56\x08\xbe\x9d\xb1\x13\x27\xd9\x92\xac\x0a\xe2\xc4\xc5\x4a\x3d\xf3\xe6\x3d\xbf\x79\xdd\xed\xe0\x9d\xaa\x2a\x8d\x5d\x41\x08\x35\xea\x06\xc9\x6d\xc1\x58\x06\xc2\x42\xeb\x33\xb4\x0e\x8f\xad\x86\x4e\x71\x0d\x85\x39\x73\xad\xcc\x37\x38\xb4\x0c\x5c\x23\x38\xa4\x07\x24\x50\x46\x31\xb8\x92\x54\xc3\xe9\xb1\x35\x25\x2b\x6b\xe0\xd4\xdd\x18\xec\x36\x47\xb3\x85\x83\x32\x95\xc0\x64\xb0\x32\x8e\x0b\x53\xa2\xe7\xc0\x4e\xbe\x19\xf3\x34\xd1\xb6\x2c\x34\x94\xb6\x42\xd8\x43\x96\xc5\x8b\xb1\x59\x6e\xa7\x6f\x4b\xb0\x7b\x91\x26\xea\x08\x7c\x6e\x50\xe6\xe7\xb0\x17\x54\xe4\xcd\xbc\x30\x93\x26\xc9\x30\xce\x31\x09\xf5\x4d\xd5\x9e\x1a\xdf\x9b\x26\xa8\x1d\x5e\x82\xfb\xa6\x11\xea\x35\x23\x91\xa0\xb5\x2d\xaa\xbe\xb8\xf1\xf3\x04\xee\x89\xbd\x3d\xbe\x3e\xb4\xaf\x52\x05\x2e\xdf\x20\xcd\x96\x36\x72\x86\x4b\x53\xa5\xfd\xd1\x3f\x93\xe2\x87\xd4\xc3\xbb\xa2\x33\x71\x7e\x54\x1b\x6d\xec\x35\x73\x71\xd0\x38\x4a\x4e\x28\x4a\x16\xdf\x5f\xbf\xbd\xfb\xfa\xfe\x3e\x28\xde\x02\x53\x8b\xd3\x0a\xe6\xaa\x56\x21\xc7\x42\x3a\xb6\xf0\xfd\x73\xe6\xb2\x2f\xfb\xec\x21\xfb\x31\xe9\xee\xb1\x7f\x25\xe9\xee\x63\x24\x98\xc5\xe0\x7a\x79\x8b\xf0\xe7\xa4\xfa\x43\x84\xfa\x21\x3f\xf7\x60\x94\x8e\xca\xe6\xeb\x08\x5d\x84\xdc\x92\x91\x4d\xf8\x5f\xf3\x04\x77\x6e\x2d\xc0\x4b\xb1\xfd\x5f\x33\xf9\x07\x7f\xc7\xe7\x02\x71\xb1\xd0\x4f\xf7\x57\x26\x62\x50\x7c\x25\x7c\x31\x11\xff\x22\x0b\x58\xd6\x76\xa0\x23\x74\xcd\x18\x00\xff\x43\x54\xb1\x35\xed\xe9\x80\xb4\x09\x45\xef\xcb\xcb\xdb\xdb\xc9\x98\xb0\xaa\xa5\xc5\x0e\x7c\x42\xf0\xc6\x13\x78\xf4\x16\x86\xc5\xce\x73\x31\x0d\xb8\x70\x75\x0d\xff\x8a\xe4\x05\xa2\x27\x9f\x59\x38\xf6\xfa\xc7\x7c\xc0\x47\x1e\xfa\xd9\xce\x13\x35\x58\xb1\x64\x40\xc0\xb0\x1c\xa3\x09\x4f\xf9\x43\x7d\xb3\xe8\x45\x2e\x34\x52\xcd\x7f\x9b\xeb\xce\x86\x8b\xc7\x5a\xaf\xcd\x0d\xc6\xaf\xce\x7c\x82\xce\xfb\xe9\xbf\x02\x00\x00\xff\xff\xc2\x92\x0b\xda\xd7\x06\x00\x00")

func confglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_confglue_lua,
		"ConfGlue.lua",
	)
}

func confglue_lua() (*asset, error) {
	bytes, err := confglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "ConfGlue.lua", size: 1751, mode: os.FileMode(420), modTime: time.Unix(1440162650, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\xdd\x72\xdb\xb6\x12\xbe\x96\x9e\x02\x81\x8f\x1c\xf0\x1c\x5a\x49\xce\x74\x32\x53\xc7\x74\x27\xfd\xb9\x6e\x67\x9a\x99\x4e\x2b\x3b\x2a\x44\x81\x16\xc7\x14\xc9\x82\xa0\x62\x57\x95\x9f\xbd\x8b\x7f\x90\x22\x15\xf7\x22\x37\xbd\xb1\x05\xec\xee\x87\xdd\x6f\x17\x0b\x80\x45\x95\xd2\x02\x6d\xc4\xb6\x58\xb2\x26\xa5\x35\x4b\xf6\x0b\x7c\x85\x6f\x13\x7c\x5e\x88\x77\x38\x5e\xe0\x6b\x35\xb8\xd3\x83\x73\x35\xa0\xdb\xfa\x1d\x3e\x4c\xa7\xda\xb8\xe5\xb9\xb5\xcd\xda\x32\x15\x79\x55\x12\x1a\x4d\x27\x9c\x89\x96\x97\x88\xe0\xd9\x6c\xf6\xfa\xff\x0f\x38\xba\xcc\x2a\xbe\xa5\x82\xd0\xcb\xd5\xa3\x60\x24\x8a\xa6\xac\x5c\x87\x28\x6d\x79\x02\xa7\x11\x3c\x2f\xef\xe6\xe9\x86\x72\x22\xaa\xb2\xdd\xae\x18\x27\x34\x7e\xf3\xd6\xe2\x58\xff\xa7\x13\x19\x8e\xc7\x00\x43\x40\x71\xee\xc0\xf0\xf2\xae\x69\x57\x04\x2f\xae\xae\xcf\x6f\x71\x1c\x04\x0f\x50\x13\xc0\x8a\xa7\x93\x96\x3f\x0b\xe1\x23\xbd\xf8\xf3\xfd\xc5\x6f\xaf\x2f\xbe\x5e\xce\x9f\x2e\x00\xcc\x93\xe1\xb1\x9a\x0d\x2b\x9e\x85\x36\x6b\x7e\x7f\x7a\x71\xf6\x9f\xf3\xff\x92\xe8\xaf\x9b\x9b\x97\x37\xf8\xdd\xd5\xf5\x37\xfb\xc3\x62\x76\xfb\x11\xa0\xf1\xcd\xcd\xec\x0d\x36\xb0\x53\xa0\xdf\xd1\xb5\x7f\xae\xbf\xff\x03\x14\x04\x89\xd0\xa3\xd9\x8c\xcc\x1e\x66\x0f\x91\xf6\xda\xa2\x05\x0b\x5c\x5c\x20\x41\xef\xd0\x96\x09\x2a\xe8\xaa\x60\x26\x55\x30\x07\x53\x1b\xb9\x2c\x07\x4d\xc6\x83\x95\x59\x91\xc9\xa5\xb5\x62\x5a\x95\x82\x95\x02\xc6\x79\x86\xa4\x68\x6e\x66\x90\xd8\xb0\x12\xa6\x27\x66\x9c\xec\x0f\x72\x04\xf5\x81\xf2\x78\x87\xf2\x12\xe5\x35\xcd\x79\x43\x42\xa3\x08\xad\x2b\xa9\x25\xc1\xc4\x63\xcd\xc8\x2e\x4a\x12\xac\xcb\x02\x3b\x44\x87\xb9\xc8\x6f\x93\x9d\x9a\x61\x45\xc3\x3a\x36\xba\x78\x46\x6c\x44\xa5\x21\x41\xd5\x59\x1f\x03\x5f\xea\xc8\x89\xd1\x01\xbe\xdc\x3f\xfd\x57\x33\x50\xd5\x92\x96\x26\x60\xc0\xcc\x20\x5a\xae\x51\xc9\x1e\x04\x09\x67\x23\xe7\x92\x99\x08\x88\xb9\xd7\xc4\x04\xbc\x38\xa3\x1e\x2f\xf7\xc3\x31\xaa\x14\xce\xf3\xb2\x61\x5c\x10\x63\x1b\x07\xd1\xf6\xc3\x1d\xd4\xbf\x9f\xcf\x71\x72\x83\xf1\x7c\x1e\x58\x9a\x7a\x82\xe9\x18\x9f\xff\xd1\x56\xd0\x2b\x22\xd0\x83\xf1\x28\x3d\x96\x8e\x2c\x2d\xaa\x86\x39\x2f\x61\xba\x5f\x22\xb6\x8c\xb5\x3b\x20\x4d\xa1\x85\xd8\x92\x80\x55\xae\x5e\x81\x33\x0a\xab\xa4\x5b\x06\x13\xd7\xd8\x2f\x66\x8d\x47\xb4\x4c\x65\x68\x4f\xaa\x9a\x95\x6e\x55\x9d\x3e\xce\x9a\xb6\x10\xc6\x31\x9b\xb9\xc0\x31\x29\x4d\xa0\x5d\x76\xa1\x91\x64\x27\xf4\xd6\x92\x27\xf7\x9e\x77\xd0\x12\x3d\x06\xd3\x89\xe3\x04\x31\xda\xbe\xb7\xa4\x25\xe8\x98\x0a\x17\x93\x75\xe0\x8b\x85\xfa\xf9\x28\xff\x59\x80\xc0\xc8\x48\x94\xcf\x2d\x03\x87\x84\x5e\xe9\xfc\x4b\xa9\x6e\xd2\x74\xbd\x5e\xda\x6e\xd4\x69\x67\xf1\x7c\x3e\x8f\x74\xc5\x96\x95\x18\x6e\x63\xe1\xa4\xde\xb2\x7a\x5d\xd5\xd0\x92\x37\x31\xc8\x59\x2a\xc8\xcb\xb3\x97\x0a\xcd\x6c\x58\x4d\xfc\x8e\x16\x2d\x4b\x8c\x46\x6e\x57\xf3\x4d\x4e\x8a\x07\x1b\x1d\x68\x9c\x29\xe9\x53\xf2\x7a\x6c\x9b\x87\x8e\xc5\xba\xbf\xcf\xe5\x79\x67\x60\xbb\xdb\xd3\xa6\x6a\x1c\x41\x5b\xf5\xf7\xb2\x3d\xa0\x41\xd3\xb2\x09\x81\xa7\xec\xdf\xce\xa7\x67\xe3\x4b\x50\x28\x0b\xd2\x9e\x02\x5d\x02\xc5\xaa\xe8\x13\xd8\xdf\xb0\xe1\x64\x9f\xc0\xce\x41\x22\xb1\x0c\x7d\xa7\x8f\x8f\xe3\x88\xec\x56\xdf\x75\x37\x7a\x28\x5b\xdc\x9b\x33\xf8\x33\xb1\xa6\x05\xa3\x7c\xb8\x5c\x24\x78\xa7\x1c\xca\xbc\x38\x05\x32\x48\x99\x03\xb1\xd2\x51\x90\x86\x89\xd3\x65\x2b\x7f\x5f\x76\xfc\x25\x51\x17\xea\x32\x68\x25\x44\x5b\x79\xec\x93\x19\x0d\xb0\x8d\xde\x20\xb6\x95\x69\xab\x70\xc3\xc9\x23\x6c\x24\x72\x75\xbc\x25\x82\xb7\xec\xe4\x8e\x95\xa7\xf1\x18\x82\x16\x76\x21\xf4\xc8\xdc\x17\xfd\xf5\x50\xc8\xcb\xe1\x72\x99\xc3\x1d\xe9\xa1\x17\xeb\xbd\xa9\x5d\x5f\x6b\xaa\xb4\x7c\xa9\x8d\x85\xab\x0c\x6d\x99\xb9\x4b\x81\xba\x8a\x42\x9d\x75\xbb\xf9\x72\x09\x9e\x14\x89\x11\xcf\x83\x8c\x48\x3f\xad\x43\xd2\x9c\xc8\xe3\x22\x78\x65\x30\xe1\xae\xbb\x64\x2f\x65\x89\xfc\x73\x88\x55\x54\xe6\xa5\x01\xf7\xe2\x9f\x6b\x96\xe6\x59\x9e\xa2\x0f\xf4\x4e\x5f\xe6\xde\x17\x39\x6d\x58\xe3\xc1\x8b\xbc\xbc\x27\x70\x2f\x8f\xe5\x71\x0a\x2b\xe8\x73\xd5\x86\xe9\x03\xc0\x14\x2f\xf6\x1b\xce\xb2\x44\x29\xb7\x65\x4d\xd3\x7b\x79\x90\x46\x07\x88\xca\x04\x3c\xa2\xae\x34\xc0\x25\xe5\x96\x5b\xb9\x49\x79\x5e\xc3\x3b\x8b\xdf\x35\x7a\x5d\xc5\xb5\x1a\xa2\x24\x41\x3d\xc2\x03\x68\x6d\x88\x17\x52\xd5\xac\x0d\xd6\x72\x84\x9e\x12\x04\x9b\x66\xdc\x86\xb8\xfb\xa0\x5a\x27\x1a\xf2\xdc\xa8\x0e\xb9\x9c\x36\x8d\xf5\x57\x57\x11\x45\x09\xda\x4b\xbf\xa1\x3e\xe0\x9a\xfc\x0a\x14\xe0\xc9\xf9\xd9\x60\x8e\x1a\x9c\x56\xd4\x1d\x8e\x42\x9d\x00\xec\xce\xd5\xca\xb1\x87\xe2\x11\xc0\x16\xf4\x76\x20\x1c\x69\x31\xa4\xda\x8b\x64\x5d\xa5\xca\xc3\xa8\xa3\xfd\xe2\xfb\x1f\xbf\xfb\xf0\xeb\x4f\x3f\x40\xee\xb0\x3c\x80\xf1\xe1\xf6\xd2\xef\x59\xe2\x0b\x0b\xde\x8a\x35\xe3\x41\x19\x35\x8f\xa5\xa0\x0f\x9b\x82\x48\x1a\x62\x94\xb6\x8d\xa8\xb6\xc0\x86\xce\xac\x1b\xf6\x32\xb3\xb4\x66\x12\xc7\x98\xba\x90\x3c\xc6\x51\x9a\x86\xec\xd4\x35\xde\xa5\x0c\x7c\xfc\x85\xd3\xba\xeb\xa4\x80\x82\xa4\xeb\x79\x53\xd3\x4f\x25\xc9\xca\x18\xad\x60\xeb\xc3\x52\x3e\x9f\x69\xb5\x66\xc0\x3d\xc6\x3e\x87\x59\xa9\x33\x68\x51\x5c\x12\x8d\xae\x79\xf1\xaf\xdb\x6d\x2d\x75\xa7\x9d\x87\x9c\x35\xee\x1d\xe3\x72\x6d\xc6\x39\x58\x17\x15\x5d\xdb\x78\x01\x2f\x38\x31\xa5\xdc\x3f\x40\x87\x97\x72\x8d\x06\x94\x2b\x4e\xe0\x6f\x14\x74\x18\x1b\x14\xb7\x3f\x40\xee\xe3\x72\xb1\x0f\xd4\xa7\xf6\xcd\xd0\xb5\xd4\x7c\x49\x1f\x62\xd5\x49\x3b\xbc\x19\x0f\xc6\x2d\x32\x0a\x1a\x31\xda\x2f\x70\x23\x3f\xcb\xec\xf0\xc1\x96\x29\x78\x22\xcd\x06\xf7\xac\xb1\x0a\xe3\xea\x94\xb6\x6c\xe8\xdd\x8a\x36\x6b\xf3\x3a\xd5\xbf\x88\x4b\xaa\xa8\x96\x52\x0b\xfc\x4b\xab\xed\x3c\x05\xa1\x60\x1d\x69\x01\x4f\xaa\x51\x21\x5c\x85\x9a\x8e\xf4\xdb\x36\xcb\x18\x67\x6b\xf2\xf6\x2b\xa7\x97\xf1\x6a\x7b\x02\x46\x89\x4f\x03\x39\x55\xd7\x6b\xe0\x68\x20\x59\x8c\xcc\x89\x6e\xa4\x65\x70\x2c\x65\x23\x85\x09\xe5\x05\xeb\x28\xd5\x4e\x2d\x0e\x96\xa2\x05\x1e\x28\xc8\xcc\x5e\x49\xc3\x52\x3c\x4e\x50\xf0\x80\xd1\x0b\xf7\xbe\x2e\xa8\xc6\x0c\x6d\x12\x02\x39\xa8\x6d\xb3\x85\x17\x50\xb9\x26\x26\x2d\x71\xbf\xac\xa3\x9e\x12\xd0\x1a\xa3\x33\xd3\x76\x55\xeb\x5c\xc6\x28\xe8\x9d\x3b\xca\x5d\xef\x0c\xed\x24\xdf\xa0\x18\xf5\xaf\x74\xfe\x32\xd0\xa7\x9c\xc3\x69\xc9\x76\x2a\x6f\xfe\x9a\xae\x7c\x3f\xb8\x99\xc2\xa4\x10\x74\x59\x0e\xba\x36\xf3\x66\xe7\x16\xe8\x1a\xf9\x7b\xb9\x7d\x09\xc0\xb4\xf9\xfa\x21\x01\x17\xf9\xed\x10\x88\x14\x8d\x5d\xb9\xf5\xb6\x33\x87\xae\x51\x54\xe5\x3f\xe9\xf6\x34\x7b\x87\x91\x38\x35\xb0\x2a\x88\x4a\xbd\xa1\x3a\x3a\x9e\x96\x9e\x07\xe5\x65\x99\xa8\xdb\x66\xb3\x92\x6b\xd9\x87\x89\xa5\x83\x87\xa9\xf4\x74\x5b\x16\x62\xf9\x38\xe1\x3a\x8c\xd3\x99\xea\xd9\x06\xc9\xea\xc4\xff\x69\x93\x17\x4c\x85\xdf\x79\x3e\xd9\x9a\x3a\xf8\xa9\x95\x69\x92\x21\xaf\x36\x6e\xaf\xd5\x4f\x9f\xa1\xc0\x14\x7a\x37\x7b\x03\xe9\x9b\xc8\x85\x8f\xf3\x67\xaa\x6d\xe0\x3b\xd2\x89\xed\xb5\xb2\x0d\x7f\xb8\x11\x42\xa6\x6c\x12\xfc\x5e\xeb\x3e\x62\x9c\x42\x6d\x9b\x85\xa9\x10\x7d\x1b\xe8\x93\x29\x2f\x9d\x08\x6e\xbc\x93\x05\x36\xc4\x60\x19\x88\xdd\x87\x56\x00\x7c\xd8\x79\x99\x51\x3b\x2d\x03\xb4\xf3\x2a\x5b\x4a\x60\x13\xaf\x24\xae\x0a\xbc\xc8\x59\xb9\xd1\x74\x72\xf0\x97\x0e\xed\x8d\xf4\x7e\x49\xe1\x4c\xd7\x0e\xc9\x61\xec\x04\x6a\xca\x57\xb6\xef\x88\x86\xda\xa6\x4d\x2d\xb9\xbd\x96\xe9\xde\x9e\x6d\xfa\xbc\xf6\xe5\xbe\xbf\xf8\x36\x00\x92\x48\xfb\x62\x66\x95\x3b\xe6\x37\x08\x0e\xea\x14\xfa\x3b\x00\x00\xff\xff\x1d\x1a\x01\xbc\xa0\x18\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 6304, mode: os.FileMode(420), modTime: time.Unix(1447694576, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x51\xbb\x6e\xc3\x30\x0c\x9c\xad\xaf\x20\x3c\xc9\x40\x93\x06\x1d\x0b\x64\xeb\x17\x74\xe8\x5a\xa8\x36\xd5\x18\x90\xa9\x54\xa6\x8b\x64\xe9\xb7\x97\xa2\x6a\xbb\xaf\x21\x43\x06\x5b\x12\x79\x77\x3a\x9e\x36\x1b\x78\x44\x9e\x12\x81\x9f\xa8\xe5\x3e\x92\x99\x37\xd0\x46\x62\x24\xb6\x9d\x63\x77\x23\xa7\x0e\xe5\xcf\xe7\x23\x36\xa6\x0a\xb1\x75\x41\x6b\xb0\x2f\x4b\x4c\x70\xb7\xdb\x2d\x9d\x8c\xcb\x2d\x5d\xa5\x57\x33\x9e\xf8\xf6\xc0\x43\xa8\x57\xb6\xea\x0b\xaa\x96\x5a\xef\x21\x63\xf5\xb6\x06\xf6\x52\x1c\x39\xf5\xf4\x5a\x03\x1f\x90\x4c\x55\xad\xf0\x0c\x31\x15\x86\x11\xff\x92\xd8\xbd\x04\xac\xc1\x51\xa7\xb0\x6d\x42\xea\x30\xc1\xc7\x1e\xa8\x0f\xff\x4b\xdd\x17\x8c\x6d\x8a\xe6\x8f\x3e\xc7\xe2\xa2\xdc\x20\x00\xea\x4c\x69\x9f\x78\xfb\x20\x35\xfb\x2d\x97\x1c\x12\xbd\x63\xe2\x6d\x21\x71\x6c\x0f\x2e\x8d\xa1\x6f\xd1\x7e\x49\x36\x8d\xc9\x12\x46\x72\x7f\x92\x96\xfa\x1c\x79\xf2\x1e\x7c\x8a\x03\xcc\xca\xeb\x23\x1c\x5d\x72\x83\x25\x37\xe4\xd4\x65\xdc\xbc\xfb\x35\x4d\x49\xd3\x8b\xdb\x67\x45\x67\xae\x5d\x8c\x2b\x55\xb8\x99\xec\x35\xa2\x25\xd1\x2a\x95\xa7\x17\x2d\x39\xe9\x68\x73\xc9\x97\x51\xf3\xa7\x9a\xa3\xa8\xeb\x66\x75\xe6\x63\xba\xdc\x58\x06\x5f\xd9\xd7\x62\xe4\x6d\xc2\x74\xbe\xd8\x89\xa2\xaf\x6c\xe5\x33\x00\x00\xff\xff\x39\xf6\x47\xc5\x46\x03\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 838, mode: os.FileMode(420), modTime: time.Unix(1440162598, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ConfGlue.lua": confglue_lua,
	"MainGlue.lua": mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"ConfGlue.lua": &_bintree_t{confglue_lua, map[string]*_bintree_t{
	}},
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

