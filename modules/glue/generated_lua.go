package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _confglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x53\xc1\x8e\xd3\x30\x10\x3d\x27\x5f\x31\xca\xa9\x91\xda\xd5\xc2\x11\xa9\x37\xb8\x01\x87\x5d\x10\x07\x84\x50\x9a\x4c\x89\x25\xd7\x8e\xc6\x93\xcd\x56\x08\xbe\x9d\xb1\x13\x27\xd9\x92\xac\x0a\xe2\xc4\xc5\x4a\x3d\xf3\xe6\x3d\xbf\x79\xdd\xed\xe0\x9d\xaa\x2a\x8d\x5d\x41\x08\x35\xea\x06\xc9\x6d\xc1\x58\x06\xc2\x42\xeb\x33\xb4\x0e\x8f\xad\x86\x4e\x71\x0d\x85\x39\x73\xad\xcc\x37\x38\xb4\x0c\x5c\x23\x38\xa4\x07\x24\x50\x46\x31\xb8\x92\x54\xc3\xe9\xb1\x35\x25\x2b\x6b\xe0\xd4\xdd\x18\xec\x36\x47\xb3\x85\x83\x32\x95\xc0\x64\xb0\x32\x8e\x0b\x53\xa2\xe7\xc0\x4e\xbe\x19\xf3\x34\xd1\xb6\x2c\x34\x94\xb6\x42\xd8\x43\x96\xc5\x8b\xb1\x59\x6e\xa7\x6f\x4b\xb0\x7b\x91\x26\xea\x08\x7c\x6e\x50\xe6\xe7\xb0\x17\x54\xe4\xcd\xbc\x30\x93\x26\xc9\x30\xce\x31\x09\xf5\x4d\xd5\x9e\x1a\xdf\x9b\x26\xa8\x1d\x5e\x82\xfb\xa6\x11\xea\x35\x23\x91\xa0\xb5\x2d\xaa\xbe\xb8\xf1\xf3\x04\xee\x89\xbd\x3d\xbe\x3e\xb4\xaf\x52\x05\x2e\xdf\x20\xcd\x96\x36\x72\x86\x4b\x53\xa5\xfd\xd1\x3f\x93\xe2\x87\xd4\xc3\xbb\xa2\x33\x71\x7e\x54\x1b\x6d\xec\x35\x73\x71\xd0\x38\x4a\x4e\x28\x4a\x16\xdf\x5f\xbf\xbd\xfb\xfa\xfe\x3e\x28\xde\x02\x53\x8b\xd3\x0a\xe6\xaa\x56\x21\xc7\x42\x3a\xb6\xf0\xfd\x73\xe6\xb2\x2f\xfb\xec\x21\xfb\x31\xe9\xee\xb1\x7f\x25\xe9\xee\x63\x24\x98\xc5\xe0\x7a\x79\x8b\xf0\xe7\xa4\xfa\x43\x84\xfa\x21\x3f\xf7\x60\x94\x8e\xca\xe6\xeb\x08\x5d\x84\xdc\x92\x91\x4d\xf8\x5f\xf3\x04\x77\x6e\x2d\xc0\x4b\xb1\xfd\x5f\x33\xf9\x07\x7f\xc7\xe7\x02\x71\xb1\xd0\x4f\xf7\x57\x26\x62\x50\x7c\x25\x7c\x31\x11\xff\x22\x0b\x58\xd6\x76\xa0\x23\x74\xcd\x18\x00\xff\x43\x54\xb1\x35\xed\xe9\x80\xb4\x09\x45\xef\xcb\xcb\xdb\xdb\xc9\x98\xb0\xaa\xa5\xc5\x0e\x7c\x42\xf0\xc6\x13\x78\xf4\x16\x86\xc5\xce\x73\x31\x0d\xb8\x70\x75\x0d\xff\x8a\xe4\x05\xa2\x27\x9f\x59\x38\xf6\xfa\xc7\x7c\xc0\x47\x1e\xfa\xd9\xce\x13\x35\x58\xb1\x64\x40\xc0\xb0\x1c\xa3\x09\x4f\xf9\x43\x7d\xb3\xe8\x45\x2e\x34\x52\xcd\x7f\x9b\xeb\xce\x86\x8b\xc7\x5a\xaf\xcd\x0d\xc6\xaf\xce\x7c\x82\xce\xfb\xe9\xbf\x02\x00\x00\xff\xff\xc2\x92\x0b\xda\xd7\x06\x00\x00")

func confglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_confglue_lua,
		"ConfGlue.lua",
	)
}

func confglue_lua() (*asset, error) {
	bytes, err := confglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "ConfGlue.lua", size: 1751, mode: os.FileMode(420), modTime: time.Unix(1440162650, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x5f\x6f\xe3\xb8\x11\x7f\xb6\x3f\x05\x8f\x5b\x67\xa9\x56\xd1\xee\xb6\xc5\x01\xcd\xae\x52\x5c\xff\xbc\xf5\xd0\x03\x7a\x40\xd1\x3a\x39\x97\x96\x29\x5b\xb0\x2c\xa9\x24\xe5\x4d\xea\x3a\x9f\xbd\xc3\xbf\xa2\x64\xc9\x9b\x3e\xec\xcb\xbd\x24\x26\x67\xe6\xc7\x99\xdf\x0c\x87\xa4\x6e\x6f\xd1\xf7\xb4\xa8\xd0\xb6\x6c\xd9\x7c\x0e\xa3\xbf\xd4\x74\x83\x7e\xc3\x37\x0d\xe5\xf2\x19\x95\xc5\x9a\x53\x5e\x30\x31\x3f\x88\x6d\x43\xb3\x3d\x4a\x11\x15\x82\x71\x49\x4a\x50\x14\x92\x17\xd5\x96\x64\x94\xaf\xeb\x2a\x51\x18\x04\x3b\xdb\x77\xdf\x33\x21\xe8\x96\xfd\x00\x56\x49\xd9\x52\x1c\x45\x11\x89\xf4\x1a\x3f\xd2\xad\x98\x97\x75\x46\x4b\xb4\x93\x87\x72\xc5\x44\x46\x1b\x96\x9e\x96\xf8\x13\x7e\x4c\xf1\x4d\x29\x3f\xe2\x78\x89\xef\xf5\x60\x6b\x06\x37\x7a\x40\x0f\xcd\x47\x7c\x9e\x5b\xe3\x96\x17\xce\x36\x6f\xab\x4c\x16\x75\x45\x68\x34\x9f\x71\x26\x5b\x5e\x21\x82\x17\x8b\xc5\xfb\x5f\x3f\xe1\xe8\x2e\xaf\xf9\x81\x4a\x42\xef\xd6\xcf\x92\x91\x28\x9a\xb3\x6a\x13\xa2\xb4\xd5\x15\x1c\x13\x65\x92\xed\x28\x27\xb2\xae\xda\xc3\x9a\x71\x42\xe3\x0f\xdf\x3a\x1c\xe7\xff\x7c\xa6\xc2\xe9\x30\xc0\x10\x50\xbc\x3b\x30\xbc\xdb\x8a\x76\x4d\xf0\xf2\xd3\xfd\xcd\x23\x8e\x83\xe0\x01\x6a\x06\x58\xf1\x7c\xd6\xf2\x57\x21\xfc\x44\x6f\xff\xf3\xdd\xed\x3f\xdf\xdf\xfe\x6e\x95\xbc\xdc\x02\x58\x47\x46\x87\x25\x76\xac\x7c\x15\xda\x42\xfc\xeb\xe5\x9b\x37\xbf\xb8\xf9\x25\x89\xfe\xfb\xf0\xf0\xf6\x01\x7f\xfc\x74\xff\xfb\xd3\x79\xb9\x78\xfc\x09\xa0\xf1\xc3\xc3\xe2\x03\xb6\xb0\x73\xa0\xdf\xd3\x75\x7a\xad\xbf\xbf\x02\x14\x04\x89\x30\xa3\xc5\x82\x2c\x9e\x16\x4f\x91\xf1\xda\xa1\x05\x0b\x40\x91\x48\xba\x45\x07\x26\xa9\xa4\xeb\x92\xd9\x54\xc1\x1c\x4c\xed\xd4\xb2\x1c\x34\x19\x0f\x56\x66\x65\xae\x96\x36\x8a\x59\x5d\x49\x56\x49\x18\x17\x39\x52\xa2\xc4\xce\x20\xb9\x63\x15\x4c\xcf\xec\x38\x3d\x9d\xd5\x08\xea\x03\x15\xf1\x11\xc1\x4e\x28\x1a\x5a\x70\x41\x42\xa3\x08\x6d\x6a\xa5\xa5\xc0\xe4\x73\xc3\xc8\x31\x4a\x53\x6c\xca\x02\x7b\x44\x8f\xb9\x2c\x1e\xd3\xa3\x9e\x61\xa5\x60\x3d\x1b\x53\x3c\x13\x36\xb2\xb6\xfb\xe9\x18\x79\xeb\x4b\xe0\x3b\x13\x39\xb1\x3a\xc0\x97\xff\x67\xfe\x1a\x06\xea\x46\xd1\x22\x02\x06\xec\x0c\xa2\xd5\x06\x55\xec\x49\x92\x70\x36\xf2\x2e\xd9\x89\x80\x98\xbd\x21\x26\xe0\xc5\x1b\x0d\x78\xd9\x8f\xc7\xa8\x53\x98\x14\x95\xee\x1b\xd6\x36\x0e\xa2\x1d\x86\x3b\xaa\xbf\x4f\x12\x9c\x3e\x60\x9c\x24\x81\xa5\xad\x27\x98\x8e\xf1\xcd\xbf\xdb\x1a\x7a\x45\x04\x7a\x30\x9e\xa4\xc7\xd1\x91\x67\x65\x2d\x98\xf7\x12\xa6\x87\x25\xe2\xca\xd8\xb8\x03\xd2\x0c\x5a\x88\x2b\x09\x58\xe5\xd3\x3b\x70\x46\x63\x55\xf4\xc0\x60\xe2\x1e\x77\x8b\x39\xe3\x09\x2d\x5b\x19\xc6\x93\xba\x61\x95\x5f\xd5\xa4\x8f\x33\xd1\x96\xd2\x3a\xe6\x32\x17\x38\xa6\xa4\x29\xb4\xcb\x3e\x34\x52\xec\x84\xde\x3a\xf2\xd4\xde\xeb\x1c\x74\x44\x4f\xc1\xf4\xe2\xb8\x42\x8c\xb1\x1f\x2c\xe9\x08\xba\xa4\xc2\xc7\xe4\x1c\xf8\x6a\xa1\x7e\x39\xca\xff\x2f\x40\x60\x64\x22\xca\xd7\x96\x81\x47\x42\xef\x4c\xfe\x95\xd4\x34\x69\xba\xd9\xac\x5c\x37\xea\xb5\xb3\x38\x49\x92\xc8\x54\x6c\x55\xcb\xf1\x36\x16\x4e\x9a\x2d\x6b\xd6\xd5\x0d\x2d\xfd\x10\x83\x9c\x65\x92\xbc\x7d\xf3\x56\xa3\xd9\x0d\x6b\x88\x3f\x52\x38\xb0\x53\xab\x51\xb8\xd5\xba\x26\xa7\xc4\xa3\x8d\x0e\x34\xde\x68\xe9\x4b\xfa\x7e\x6a\x9b\x87\x8e\xc5\xa6\xbf\x27\xea\xbc\xb3\xb0\xfd\xed\xe9\x52\x35\x8d\x60\xac\x86\x7b\xd9\x1d\xd0\xa0\xe9\xd8\x84\xc0\x33\xf6\x73\xe7\xb3\x63\xe3\x6b\x50\xa8\x0a\xd2\x9d\x02\x7d\x02\xe5\xba\x1c\x12\x38\xdc\xb0\xe1\xe4\x90\xc0\xde\x41\xa2\xb0\x2c\x7d\xd7\x8f\x8f\xcb\x88\xdc\x56\x3f\xf6\x37\x7a\x28\x5b\xee\xed\x19\xfc\x85\x58\xb3\x92\x51\x3e\x5e\x2e\x0a\xbc\x57\x0e\x55\x51\x5e\x03\x19\xa5\xcc\x83\x38\xe9\x24\x88\x60\xf2\x7a\xd9\xaa\xdf\x77\x3d\x7f\x49\xd4\x87\xba\x0b\x5a\x09\x31\x56\x1d\xf6\xd5\x8c\x06\xd8\x56\x6f\x14\xdb\xc9\x8c\x55\xb8\xe1\xd4\x11\x36\x11\xb9\x3e\xde\x52\xc9\x5b\x76\x75\xc7\xaa\xd3\x78\x0a\xc1\x08\xfb\x10\x66\x64\xef\x8b\xdd\xf5\x50\xaa\xcb\xe1\x6a\x55\xc0\x1d\xe9\x69\x10\xeb\xde\xd6\x6e\x57\x6b\xba\xb4\xba\x52\x9b\x0a\x57\x1b\xba\x32\xf3\x97\x02\x7d\x15\x85\x3a\xeb\x77\xf3\xd5\x0a\x3c\x29\x53\x2b\x4e\x82\x8c\x28\x3f\x9d\x43\xca\x9c\xa8\xe3\x22\x78\x65\x30\xe9\xaf\xbb\xe4\xa4\x64\xa9\xfa\x73\x8e\x75\x54\xf6\xa5\x01\xf7\xe2\xbf\x35\x2c\x2b\xf2\x22\xd3\xaf\x28\x7d\x99\xfb\xae\x2c\xa8\x80\x27\x9a\x07\x2f\x8b\x6a\x4f\xe0\x5e\x1e\xab\xe3\x14\x56\x30\xe7\xaa\x0b\xb3\x0b\x00\x53\xbc\x3c\xed\x38\xcb\x53\xad\xdc\x56\xea\x85\xa7\x0e\xd2\xe8\x0c\x51\xd9\x80\x27\xd4\xb5\x06\xb8\xa4\xdd\xf2\x2b\x8b\x8c\x17\x0d\xbc\xb3\xf8\x56\x98\x75\x35\xd7\x7a\x88\xd2\x14\x0d\x08\x0f\xa0\x8d\x21\x5e\x2a\x55\xbb\x36\x58\xab\x11\x7a\x49\x11\x6c\x9a\x69\x1b\xe2\xef\x83\x7a\x9d\x68\xcc\x73\xab\x3a\xe6\x72\x26\x84\xf3\xd7\x54\x11\x85\x37\xee\x49\xf9\x0d\xf5\x01\xd7\xe4\x77\xa0\x00\x4f\xce\x2f\x06\x73\xd1\xe0\x8c\xa2\xe9\x70\x14\xea\x04\x60\x8f\xbe\x56\x2e\x3d\x94\xcf\x00\xb6\xa4\x8f\x23\xe1\x28\x8b\x31\xd5\x41\x24\x9b\x3a\xd3\x1e\x46\x3d\xed\x6f\xfe\xf4\xd7\x3f\xfe\xf8\x8f\x1f\xfe\x0c\xb9\xc3\xea\x00\xc6\xe7\xc7\xbb\x6e\xcf\x92\xae\xb0\xfe\xce\x69\xd3\x30\x1e\xd4\x91\x78\xae\x24\x7d\xda\x95\x44\xf1\x10\xa3\xac\x15\xb2\x3e\x00\x1d\x26\xb5\x7e\x38\x48\xcd\xca\x99\x29\x1c\x6b\xea\x63\xea\x30\x2e\xf2\x34\x66\xa7\xef\xf1\x97\x39\x93\x50\x85\x74\x93\x88\x86\x7e\xae\x48\x5e\xc5\x68\x0d\xfb\x1d\xe0\xbb\x24\x66\xf5\x86\x01\xe1\x18\x77\x89\xcb\x2b\x93\x36\x87\xe2\x33\x67\x75\xed\x33\x7f\xd3\x1e\x1a\xa5\x3b\xef\xbd\xde\x9c\xf1\xe0\xec\x56\x6b\x33\xce\xc1\x3a\xfc\x1c\x02\x78\xc1\x31\xa9\xe4\xdd\xab\x73\x7c\x29\xdf\x5d\x40\xb9\xe6\x04\xfe\x46\x41\x5b\x71\x41\x71\xf7\x03\xe4\x5d\x5c\x3e\xf6\x91\xa2\x34\xbe\x59\xba\x56\x86\x2f\xe5\x43\xac\xdb\x67\x8f\x37\xeb\xc1\xb4\x45\x4e\x41\x23\x46\xa7\x25\x16\xea\x5b\xcc\x11\x9f\x5d\x6d\x82\x27\xca\x6c\x74\xa3\x5a\xab\x30\xae\x5e\x3d\xab\x2e\xae\x26\x86\xb9\xe5\x4d\x66\x7e\x91\x08\x41\x71\x2a\x22\x3f\xd7\x7c\x0f\xce\xc6\xa8\x10\xa2\x65\x02\x7d\x2e\xe4\xce\x45\x80\x92\xdb\xc4\xb1\x23\xeb\x95\x42\x83\x30\xb2\xfa\x90\x64\x00\x22\xf5\xa6\xf0\xd2\x12\x9e\x5b\x93\x42\xb8\x26\x89\x9e\xf4\x0f\x6d\x9e\x33\xce\x36\xe4\xdb\xdf\x7a\xbd\x9c\xd7\x87\x2b\x30\x5a\x7c\x1d\xc8\xab\xfa\x3e\x04\xc7\x06\xc9\x63\x64\x4f\x7b\x2b\x55\x4c\x36\x50\x2c\x92\xe4\xe1\xe9\x95\x4f\x94\x32\x14\x24\x2c\xa9\xad\x7a\xd5\x3b\x5a\xbc\x6e\x8d\x91\x12\xce\xdd\xcd\x35\x2c\xde\xcb\x94\x06\xef\x1c\xb3\xb0\xbf\x6a\x59\x9f\xab\x2e\x14\xdd\xcb\xa1\xb3\x42\x7c\x67\xaf\xa0\xc8\x11\x60\x41\x6c\xce\xe2\xe1\xd6\xd0\x0f\x85\x50\x0b\x48\x8f\xd1\x1b\xdb\xb0\x75\xd3\x5d\xc5\x28\xe8\xba\x47\xca\x7d\xd7\x0d\xed\x54\x36\x40\x31\x1a\x5e\x06\xbb\x6b\xc4\x30\x21\x1c\xce\x59\x76\xd4\x59\xed\x2e\xf8\x3a\x84\xb3\x9f\x29\x6d\x82\x41\x97\x15\xa0\xeb\xea\xc2\xe6\xaa\x44\xf7\xa8\xbb\xd1\xbb\x37\x04\x4c\xdb\xef\x26\x0a\x70\x59\x3c\x8e\x81\x28\xd1\xd4\x65\xdd\xec\x5d\x7b\x5c\x5b\x45\xdd\x20\x67\xfd\xc6\xe8\x6e\x3f\x91\xe7\xbb\x6c\x29\x4f\x74\x49\x58\xc2\xa3\x09\x99\x8a\x21\x28\x43\xc7\x49\xd3\x8a\xdd\x5a\xad\xea\x1e\x37\x8e\x18\x1e\xe6\xb6\x23\xde\xf1\x11\xab\x07\x0e\x37\x01\x5d\xcf\xd9\xc0\x36\x48\x5b\x8f\x89\xcf\xbb\xa2\x64\x9a\x88\xde\x13\xcc\x15\xd9\xb9\x9b\x5a\xdb\x9e\x1b\x32\xec\x82\x57\x5a\x26\xf8\xb5\x6b\xda\x13\x89\xb5\x94\xd8\x5d\xd1\xcf\xeb\x48\x62\x67\xca\x91\xcb\xcc\xda\x3a\x1c\xf9\x36\x75\x65\x2f\x76\xae\x8d\xf6\x59\x88\xc0\x25\xa5\xdb\x98\xfd\x87\x91\x57\x68\x5c\x93\xb1\xb5\x63\x6e\x18\x43\x72\xd5\x45\x16\xc1\x2d\x7a\xb6\xc4\x96\x28\xac\x02\x71\x5b\xd4\x09\x80\x0f\x37\xaf\x32\xec\xa6\x55\x80\x6e\x5e\x67\x4f\x0b\x5c\x21\x68\x89\xaf\x8a\x4e\xe4\xad\xfc\x68\x3e\x3b\x77\x17\x19\xe3\x8d\xf2\x7e\x45\xe1\x9a\x60\x1c\x52\xc3\xd8\x0b\xf4\x54\x57\xf3\x5d\x27\xb5\xd4\x8a\x36\x73\xe4\x0e\x5a\xad\x7f\xcf\xb6\xd9\xeb\x7a\x9d\xff\xa6\xd3\x35\x08\x90\x44\xc6\x17\x3b\xab\xdd\xb1\xbf\x41\x70\xd6\x87\xdc\xff\x02\x00\x00\xff\xff\xf3\xc8\x11\x0b\x6e\x19\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 6510, mode: os.FileMode(420), modTime: time.Unix(1447732487, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x51\xbb\x6e\xc3\x30\x0c\x9c\xad\xaf\x20\x3c\xc9\x40\x93\x06\x1d\x0b\x64\xeb\x17\x74\xe8\x5a\xa8\x36\xd5\x18\x90\xa9\x54\xa6\x8b\x64\xe9\xb7\x97\xa2\x6a\xbb\xaf\x21\x43\x06\x5b\x12\x79\x77\x3a\x9e\x36\x1b\x78\x44\x9e\x12\x81\x9f\xa8\xe5\x3e\x92\x99\x37\xd0\x46\x62\x24\xb6\x9d\x63\x77\x23\xa7\x0e\xe5\xcf\xe7\x23\x36\xa6\x0a\xb1\x75\x41\x6b\xb0\x2f\x4b\x4c\x70\xb7\xdb\x2d\x9d\x8c\xcb\x2d\x5d\xa5\x57\x33\x9e\xf8\xf6\xc0\x43\xa8\x57\xb6\xea\x0b\xaa\x96\x5a\xef\x21\x63\xf5\xb6\x06\xf6\x52\x1c\x39\xf5\xf4\x5a\x03\x1f\x90\x4c\x55\xad\xf0\x0c\x31\x15\x86\x11\xff\x92\xd8\xbd\x04\xac\xc1\x51\xa7\xb0\x6d\x42\xea\x30\xc1\xc7\x1e\xa8\x0f\xff\x4b\xdd\x17\x8c\x6d\x8a\xe6\x8f\x3e\xc7\xe2\xa2\xdc\x20\x00\xea\x4c\x69\x9f\x78\xfb\x20\x35\xfb\x2d\x97\x1c\x12\xbd\x63\xe2\x6d\x21\x71\x6c\x0f\x2e\x8d\xa1\x6f\xd1\x7e\x49\x36\x8d\xc9\x12\x46\x72\x7f\x92\x96\xfa\x1c\x79\xf2\x1e\x7c\x8a\x03\xcc\xca\xeb\x23\x1c\x5d\x72\x83\x25\x37\xe4\xd4\x65\xdc\xbc\xfb\x35\x4d\x49\xd3\x8b\xdb\x67\x45\x67\xae\x5d\x8c\x2b\x55\xb8\x99\xec\x35\xa2\x25\xd1\x2a\x95\xa7\x17\x2d\x39\xe9\x68\x73\xc9\x97\x51\xf3\xa7\x9a\xa3\xa8\xeb\x66\x75\xe6\x63\xba\xdc\x58\x06\x5f\xd9\xd7\x62\xe4\x6d\xc2\x74\xbe\xd8\x89\xa2\xaf\x6c\xe5\x33\x00\x00\xff\xff\x39\xf6\x47\xc5\x46\x03\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 838, mode: os.FileMode(420), modTime: time.Unix(1440162598, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ConfGlue.lua": confglue_lua,
	"MainGlue.lua": mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"ConfGlue.lua": &_bintree_t{confglue_lua, map[string]*_bintree_t{
	}},
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

