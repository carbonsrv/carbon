package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _confglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x53\xc1\x8e\xd3\x30\x10\x3d\x27\x5f\x31\xca\xa9\x91\xda\xd5\xc2\x11\xa9\x37\xb8\x01\x87\x5d\x10\x07\x84\x50\x9a\x4c\x89\x25\xd7\x8e\xc6\x93\xcd\x56\x08\xbe\x9d\xb1\x13\x27\xd9\x92\xac\x0a\xe2\xc4\xc5\x4a\x3d\xf3\xe6\x3d\xbf\x79\xdd\xed\xe0\x9d\xaa\x2a\x8d\x5d\x41\x08\x35\xea\x06\xc9\x6d\xc1\x58\x06\xc2\x42\xeb\x33\xb4\x0e\x8f\xad\x86\x4e\x71\x0d\x85\x39\x73\xad\xcc\x37\x38\xb4\x0c\x5c\x23\x38\xa4\x07\x24\x50\x46\x31\xb8\x92\x54\xc3\xe9\xb1\x35\x25\x2b\x6b\xe0\xd4\xdd\x18\xec\x36\x47\xb3\x85\x83\x32\x95\xc0\x64\xb0\x32\x8e\x0b\x53\xa2\xe7\xc0\x4e\xbe\x19\xf3\x34\xd1\xb6\x2c\x34\x94\xb6\x42\xd8\x43\x96\xc5\x8b\xb1\x59\x6e\xa7\x6f\x4b\xb0\x7b\x91\x26\xea\x08\x7c\x6e\x50\xe6\xe7\xb0\x17\x54\xe4\xcd\xbc\x30\x93\x26\xc9\x30\xce\x31\x09\xf5\x4d\xd5\x9e\x1a\xdf\x9b\x26\xa8\x1d\x5e\x82\xfb\xa6\x11\xea\x35\x23\x91\xa0\xb5\x2d\xaa\xbe\xb8\xf1\xf3\x04\xee\x89\xbd\x3d\xbe\x3e\xb4\xaf\x52\x05\x2e\xdf\x20\xcd\x96\x36\x72\x86\x4b\x53\xa5\xfd\xd1\x3f\x93\xe2\x87\xd4\xc3\xbb\xa2\x33\x71\x7e\x54\x1b\x6d\xec\x35\x73\x71\xd0\x38\x4a\x4e\x28\x4a\x16\xdf\x5f\xbf\xbd\xfb\xfa\xfe\x3e\x28\xde\x02\x53\x8b\xd3\x0a\xe6\xaa\x56\x21\xc7\x42\x3a\xb6\xf0\xfd\x73\xe6\xb2\x2f\xfb\xec\x21\xfb\x31\xe9\xee\xb1\x7f\x25\xe9\xee\x63\x24\x98\xc5\xe0\x7a\x79\x8b\xf0\xe7\xa4\xfa\x43\x84\xfa\x21\x3f\xf7\x60\x94\x8e\xca\xe6\xeb\x08\x5d\x84\xdc\x92\x91\x4d\xf8\x5f\xf3\x04\x77\x6e\x2d\xc0\x4b\xb1\xfd\x5f\x33\xf9\x07\x7f\xc7\xe7\x02\x71\xb1\xd0\x4f\xf7\x57\x26\x62\x50\x7c\x25\x7c\x31\x11\xff\x22\x0b\x58\xd6\x76\xa0\x23\x74\xcd\x18\x00\xff\x43\x54\xb1\x35\xed\xe9\x80\xb4\x09\x45\xef\xcb\xcb\xdb\xdb\xc9\x98\xb0\xaa\xa5\xc5\x0e\x7c\x42\xf0\xc6\x13\x78\xf4\x16\x86\xc5\xce\x73\x31\x0d\xb8\x70\x75\x0d\xff\x8a\xe4\x05\xa2\x27\x9f\x59\x38\xf6\xfa\xc7\x7c\xc0\x47\x1e\xfa\xd9\xce\x13\x35\x58\xb1\x64\x40\xc0\xb0\x1c\xa3\x09\x4f\xf9\x43\x7d\xb3\xe8\x45\x2e\x34\x52\xcd\x7f\x9b\xeb\xce\x86\x8b\xc7\x5a\xaf\xcd\x0d\xc6\xaf\xce\x7c\x82\xce\xfb\xe9\xbf\x02\x00\x00\xff\xff\xc2\x92\x0b\xda\xd7\x06\x00\x00")

func confglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_confglue_lua,
		"ConfGlue.lua",
	)
}

func confglue_lua() (*asset, error) {
	bytes, err := confglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "ConfGlue.lua", size: 1751, mode: os.FileMode(420), modTime: time.Unix(1440162650, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x4f\x73\xeb\x34\x10\x3f\x37\x9f\x42\x4f\x25\xad\x0c\x8e\xdb\x72\x60\x86\xb4\x2e\xf3\x06\x38\xc3\x0c\xef\x02\x49\x5e\x50\x1c\x25\xf1\xc4\x91\x8d\x2d\x67\x52\x42\xfa\xd9\x59\xfd\xb3\x65\xc7\x4e\xcb\xe1\x5d\xb8\xa4\x95\xb4\xfb\xdb\xdd\xdf\xae\x76\xe5\x24\x8d\x68\x82\x36\x62\x97\xcc\x59\x11\xd1\x8c\x85\xc7\x09\x7e\xc2\xb3\x10\xdf\x24\xe2\x11\xfb\x13\xfc\xac\x16\x6b\xbd\xb8\x51\x0b\xba\xcb\x1e\xf1\x69\x30\xd0\xca\x65\x1e\x5b\xdd\x55\xc9\x23\x11\xa7\x9c\x50\x6f\x70\x95\x33\x51\xe6\x1c\x11\x3c\x1c\x0e\xef\xbf\x3d\x60\x6f\xbc\x4a\xf3\x1d\x15\x84\x8e\x17\x2f\x82\x11\xcf\x1b\x30\xbe\x74\x51\x4a\x7e\x01\xa7\x10\x79\xcc\xd7\x41\xb4\xa1\x39\x11\x29\x2f\x77\x0b\x96\x13\xea\x3f\x7c\x67\x71\xac\xff\x83\x2b\x19\x4e\x8d\x01\x8a\x80\x52\xb9\x03\xcb\xf1\xba\x28\x17\x04\x4f\x9e\x9e\x6f\x66\xd8\x77\x82\x07\xa8\x2b\xc0\xf2\x07\x57\x65\xfe\x2e\x84\xcf\x74\xf4\xf7\xc7\xd1\x1f\xf7\xa3\xef\xe7\xc1\xeb\x08\xc0\x6a\x32\x6a\xac\x62\xc3\x92\x77\xa1\x0d\x8b\x3f\x5f\x3f\x5c\x7f\x75\xf3\x35\xf1\xfe\x99\x4e\x6f\xa7\xf8\xf1\xe9\xf9\x87\xe3\x69\x32\x9c\x7d\x06\x68\x3c\x9d\x0e\x1f\xb0\x81\x1d\x00\xfd\x15\x5d\xc7\xf7\xfa\xfb\x0d\xa0\x20\x48\x84\x5e\x0d\x87\x64\x78\x18\x1e\x3c\xed\xb5\x45\x73\x0c\x8c\x46\x48\xd0\x35\xda\x31\x41\x05\x5d\x24\xcc\xa4\x0a\xf6\x60\x6b\x23\xcd\xe6\x20\xc9\x72\xc7\x32\x4b\x56\xd2\xb4\x16\x8c\x52\x2e\x18\x17\xb0\x8e\x57\x48\x1e\x05\x66\x07\x89\x0d\xe3\xb0\x7d\x65\xd6\xe1\xf1\x24\x57\x50\x1f\x28\xf6\xf7\x28\xe6\x28\xce\x68\x9c\x17\xc4\x55\xf2\xd0\x32\x95\x52\x12\x4c\xbc\x64\x8c\xec\xbd\x30\xc4\xba\x2c\x70\x85\x58\x61\x4e\xe2\x59\xb8\x57\x3b\x2c\x29\x58\x43\x47\x17\x4f\x8f\x8e\x48\x35\x24\x88\x56\xda\xe7\xc0\x63\x1d\x39\x31\x32\xc0\x57\xf5\x47\xff\x6a\x06\xd2\x4c\xd2\x52\x38\x0c\x98\x1d\x44\xf9\x12\x71\x76\x10\xc4\xdd\xf5\x2a\x97\xcc\x86\x43\xcc\x56\x13\xe3\xf0\x52\x29\xb5\x78\xd9\x76\xc7\xa8\x52\x18\xc4\xbc\x60\xb9\x20\x46\xd7\x77\xa2\x6d\x87\xdb\x29\xbf\x0d\x02\x1c\x4e\x31\x0e\x02\x47\xd3\xd4\x13\x6c\xfb\xf8\xe6\xaf\x32\x85\x5e\xe1\x81\x1c\xac\x7b\xe9\xb1\x74\xac\xa2\x24\x2d\x58\xe5\x25\x6c\xb7\x4b\xc4\x96\xb1\x76\x07\x4e\x23\x68\x21\xb6\x24\xc0\xca\xd3\x1d\x38\xa3\xb0\x38\xdd\x31\xd8\x78\xc6\xb5\x31\xab\xdc\x23\x65\x2a\x43\x7b\x92\x66\x8c\x57\x56\x75\xfa\x72\x56\x94\x89\x30\x8e\xd9\xcc\x39\x8e\xc9\xd3\x10\xda\x65\x13\x1a\x49\x76\x5c\x6f\x2d\x79\xf2\xee\xd5\x0e\x5a\xa2\xfb\x60\x1a\x71\x5c\x20\x46\xeb\xb7\x4c\x5a\x82\xce\xa9\xa8\x62\xb2\x0e\x7c\xb1\x50\xdf\x8e\xf2\xbf\x05\x08\x8c\xf4\x44\xf9\xde\x32\xa8\x90\xd0\x9d\xce\xbf\x3c\xd5\x4d\x9a\x2e\x97\x73\xdb\x8d\x1a\xed\xcc\x0f\x82\xc0\xd3\x15\xcb\x53\xd1\xdd\xc6\xdc\x4d\x7d\x65\xb5\x5d\xd5\xd0\xc2\x07\x1f\xce\x59\x24\xc8\xed\xf5\xad\x42\x33\x17\x56\x13\xbf\xa7\x49\xc9\x42\x23\x11\x5b\x6b\x75\x93\x93\xc7\x9d\x8d\x0e\x24\xae\xd5\xe9\x6b\x78\xdf\x77\xcd\x5d\xc7\x7c\xdd\xdf\x03\x39\xef\x0c\x6c\xf3\x7a\xda\x54\xf5\x23\x68\xad\xf6\x5d\xb6\x03\x1a\x24\x2d\x9b\x10\x78\xc4\xfe\xef\x7c\xd6\x6c\x7c\x09\x0a\x65\x41\xda\x29\xd0\x24\x50\x2c\x92\x36\x81\xed\x0b\xeb\x6e\xb6\x09\x6c\x0c\x12\x89\x65\xe8\xbb\x3c\x3e\xce\x23\xb2\x57\x7d\xdf\xbc\xe8\xee\xd9\x64\x6b\x66\xf0\x1b\xb1\x46\x09\xa3\x79\x77\xb9\x48\xf0\x46\x39\xf0\x38\xb9\x04\xd2\x49\x59\x05\x62\x4f\x7b\x41\x0a\x26\x2e\x97\xad\xfc\x7f\xdc\xf0\x97\x78\x4d\xa8\xb1\xd3\x4a\x88\xd6\xaa\xb1\x2f\x66\xd4\xc1\x36\x72\x9d\xd8\xf6\x4c\x6b\xb9\x17\x4e\x8e\xb0\x9e\xc8\xd5\x78\x0b\x45\x5e\xb2\x8b\x37\x56\x4e\xe3\x3e\x04\x7d\xd8\x84\xd0\x2b\xf3\x5e\xac\x9f\x87\x42\x3e\x0e\xe7\xf3\x18\xde\x48\x87\x56\xac\x5b\x53\xbb\x75\xad\xa9\xd2\xaa\x4b\xad\x2f\x5c\xa5\x68\xcb\xac\x7a\x14\xa8\xa7\x28\xd4\x59\xb3\x9b\xcf\xe7\xe0\x49\x12\x9a\xe3\xc0\xc9\x88\xf4\xd3\x3a\x24\xd5\x89\x1c\x17\xce\x57\x06\x13\xd5\x73\x97\x1c\xe5\x59\x28\x7f\x4e\xbe\x8a\xca\x7c\x69\xc0\xbb\xf8\xb7\x8c\x45\xf1\x2a\x8e\xd0\x27\xba\xd6\x8f\xb9\x8f\x49\x4c\x0b\x56\xd4\xe0\x49\xcc\xb7\x04\xde\xe5\xbe\x1c\xa7\x60\x41\xcf\x55\x1b\x66\x1d\x00\xa6\x78\x72\xdc\xe4\x6c\x15\x2a\xe1\x92\x67\x34\xda\xca\x41\xea\x9d\x20\x2a\x13\x70\x8f\xb8\x92\x00\x97\x94\x5b\x95\xe5\x22\xca\xe3\x0c\xbe\xb3\xf2\x75\xa1\xed\x2a\xae\xd5\x12\x85\x21\x6a\x11\xee\x40\x6b\x45\x3c\x91\xa2\xc6\x36\x68\xcb\x15\x7a\x0d\x11\x5c\x9a\x7e\x1d\x52\xbd\x07\x95\x1d\xaf\xcb\x73\x23\xda\xe5\x72\x54\x14\xd6\x5f\x5d\x45\x14\x85\xe8\x28\xfd\x86\xfa\x80\x67\xf2\x1d\x08\xc0\x27\xe7\x9b\xc1\x9c\x35\x38\x2d\xa8\x3b\x1c\x85\x3a\x01\xd8\x7d\x55\x2b\xe7\x1e\x8a\x17\x00\x9b\xd0\x59\x47\x38\x52\xa3\x4b\xb4\x15\xc9\x32\x8d\x94\x87\x5e\x43\xfa\xc3\x4f\xbf\xfc\xf8\xe9\xf7\x5f\x7f\x86\xdc\x61\x39\x80\xf1\x69\x36\xae\xef\x2c\xa9\x0b\x0b\xbe\x15\x33\x96\x3b\x65\x54\xbc\x70\x41\x0f\x9b\x84\x48\x1a\x7c\x14\x95\x85\x48\x77\xc0\x86\xce\x6c\xb5\x6c\x65\x66\x6e\xd5\x24\x8e\x51\xad\x42\xaa\x31\xce\xd2\xd4\xa5\xa7\x9e\xf1\x36\x65\xff\x06\x00\x00\xff\xff\xab\xfe\xf8\xee\x31\x10\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 4145, mode: os.FileMode(420), modTime: time.Unix(1442172917, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x51\xbb\x6e\xc3\x30\x0c\x9c\xad\xaf\x20\x3c\xc9\x40\x93\x06\x1d\x0b\x64\xeb\x17\x74\xe8\x5a\xa8\x36\xd5\x18\x90\xa9\x54\xa6\x8b\x64\xe9\xb7\x97\xa2\x6a\xbb\xaf\x21\x43\x06\x5b\x12\x79\x77\x3a\x9e\x36\x1b\x78\x44\x9e\x12\x81\x9f\xa8\xe5\x3e\x92\x99\x37\xd0\x46\x62\x24\xb6\x9d\x63\x77\x23\xa7\x0e\xe5\xcf\xe7\x23\x36\xa6\x0a\xb1\x75\x41\x6b\xb0\x2f\x4b\x4c\x70\xb7\xdb\x2d\x9d\x8c\xcb\x2d\x5d\xa5\x57\x33\x9e\xf8\xf6\xc0\x43\xa8\x57\xb6\xea\x0b\xaa\x96\x5a\xef\x21\x63\xf5\xb6\x06\xf6\x52\x1c\x39\xf5\xf4\x5a\x03\x1f\x90\x4c\x55\xad\xf0\x0c\x31\x15\x86\x11\xff\x92\xd8\xbd\x04\xac\xc1\x51\xa7\xb0\x6d\x42\xea\x30\xc1\xc7\x1e\xa8\x0f\xff\x4b\xdd\x17\x8c\x6d\x8a\xe6\x8f\x3e\xc7\xe2\xa2\xdc\x20\x00\xea\x4c\x69\x9f\x78\xfb\x20\x35\xfb\x2d\x97\x1c\x12\xbd\x63\xe2\x6d\x21\x71\x6c\x0f\x2e\x8d\xa1\x6f\xd1\x7e\x49\x36\x8d\xc9\x12\x46\x72\x7f\x92\x96\xfa\x1c\x79\xf2\x1e\x7c\x8a\x03\xcc\xca\xeb\x23\x1c\x5d\x72\x83\x25\x37\xe4\xd4\x65\xdc\xbc\xfb\x35\x4d\x49\xd3\x8b\xdb\x67\x45\x67\xae\x5d\x8c\x2b\x55\xb8\x99\xec\x35\xa2\x25\xd1\x2a\x95\xa7\x17\x2d\x39\xe9\x68\x73\xc9\x97\x51\xf3\xa7\x9a\xa3\xa8\xeb\x66\x75\xe6\x63\xba\xdc\x58\x06\x5f\xd9\xd7\x62\xe4\x6d\xc2\x74\xbe\xd8\x89\xa2\xaf\x6c\xe5\x33\x00\x00\xff\xff\x39\xf6\x47\xc5\x46\x03\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 838, mode: os.FileMode(420), modTime: time.Unix(1440162598, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ConfGlue.lua": confglue_lua,
	"MainGlue.lua": mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"ConfGlue.lua": &_bintree_t{confglue_lua, map[string]*_bintree_t{
	}},
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

