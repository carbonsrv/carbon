package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _confglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x53\xc1\x8e\xd3\x30\x10\x3d\x27\x5f\x31\xca\xa9\x91\xda\xd5\xc2\x11\xa9\x37\xb8\x01\x87\x5d\x10\x07\x84\x50\x9a\x4c\x89\x25\xd7\x8e\xc6\x93\xcd\x56\x08\xbe\x9d\xb1\x13\x27\xd9\x92\xac\x0a\xe2\xc4\xc5\x4a\x3d\xf3\xe6\x3d\xbf\x79\xdd\xed\xe0\x9d\xaa\x2a\x8d\x5d\x41\x08\x35\xea\x06\xc9\x6d\xc1\x58\x06\xc2\x42\xeb\x33\xb4\x0e\x8f\xad\x86\x4e\x71\x0d\x85\x39\x73\xad\xcc\x37\x38\xb4\x0c\x5c\x23\x38\xa4\x07\x24\x50\x46\x31\xb8\x92\x54\xc3\xe9\xb1\x35\x25\x2b\x6b\xe0\xd4\xdd\x18\xec\x36\x47\xb3\x85\x83\x32\x95\xc0\x64\xb0\x32\x8e\x0b\x53\xa2\xe7\xc0\x4e\xbe\x19\xf3\x34\xd1\xb6\x2c\x34\x94\xb6\x42\xd8\x43\x96\xc5\x8b\xb1\x59\x6e\xa7\x6f\x4b\xb0\x7b\x91\x26\xea\x08\x7c\x6e\x50\xe6\xe7\xb0\x17\x54\xe4\xcd\xbc\x30\x93\x26\xc9\x30\xce\x31\x09\xf5\x4d\xd5\x9e\x1a\xdf\x9b\x26\xa8\x1d\x5e\x82\xfb\xa6\x11\xea\x35\x23\x91\xa0\xb5\x2d\xaa\xbe\xb8\xf1\xf3\x04\xee\x89\xbd\x3d\xbe\x3e\xb4\xaf\x52\x05\x2e\xdf\x20\xcd\x96\x36\x72\x86\x4b\x53\xa5\xfd\xd1\x3f\x93\xe2\x87\xd4\xc3\xbb\xa2\x33\x71\x7e\x54\x1b\x6d\xec\x35\x73\x71\xd0\x38\x4a\x4e\x28\x4a\x16\xdf\x5f\xbf\xbd\xfb\xfa\xfe\x3e\x28\xde\x02\x53\x8b\xd3\x0a\xe6\xaa\x56\x21\xc7\x42\x3a\xb6\xf0\xfd\x73\xe6\xb2\x2f\xfb\xec\x21\xfb\x31\xe9\xee\xb1\x7f\x25\xe9\xee\x63\x24\x98\xc5\xe0\x7a\x79\x8b\xf0\xe7\xa4\xfa\x43\x84\xfa\x21\x3f\xf7\x60\x94\x8e\xca\xe6\xeb\x08\x5d\x84\xdc\x92\x91\x4d\xf8\x5f\xf3\x04\x77\x6e\x2d\xc0\x4b\xb1\xfd\x5f\x33\xf9\x07\x7f\xc7\xe7\x02\x71\xb1\xd0\x4f\xf7\x57\x26\x62\x50\x7c\x25\x7c\x31\x11\xff\x22\x0b\x58\xd6\x76\xa0\x23\x74\xcd\x18\x00\xff\x43\x54\xb1\x35\xed\xe9\x80\xb4\x09\x45\xef\xcb\xcb\xdb\xdb\xc9\x98\xb0\xaa\xa5\xc5\x0e\x7c\x42\xf0\xc6\x13\x78\xf4\x16\x86\xc5\xce\x73\x31\x0d\xb8\x70\x75\x0d\xff\x8a\xe4\x05\xa2\x27\x9f\x59\x38\xf6\xfa\xc7\x7c\xc0\x47\x1e\xfa\xd9\xce\x13\x35\x58\xb1\x64\x40\xc0\xb0\x1c\xa3\x09\x4f\xf9\x43\x7d\xb3\xe8\x45\x2e\x34\x52\xcd\x7f\x9b\xeb\xce\x86\x8b\xc7\x5a\xaf\xcd\x0d\xc6\xaf\xce\x7c\x82\xce\xfb\xe9\xbf\x02\x00\x00\xff\xff\xc2\x92\x0b\xda\xd7\x06\x00\x00")

func confglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_confglue_lua,
		"ConfGlue.lua",
	)
}

func confglue_lua() (*asset, error) {
	bytes, err := confglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "ConfGlue.lua", size: 1751, mode: os.FileMode(420), modTime: time.Unix(1440162650, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x5f\x93\xdb\x34\x10\x7f\xbe\x7c\x0a\x55\x25\x57\x19\x7c\x6e\xcb\x03\x33\xa4\xe7\x63\x3a\xc0\x33\xcc\xd0\x19\x06\x92\x34\x28\x8e\x92\x78\xe2\xc8\x46\x96\x43\x8e\x90\xfb\xec\xac\xac\x3f\x96\x1d\x3b\x3d\x1e\xfa\xc2\x4b\x7a\x92\x76\x7f\xbb\xfb\xdb\xd5\xae\xdc\x2c\x4f\x68\x86\xb6\x72\x9f\x2d\x58\x99\xd0\x82\xc5\xa7\x29\xbe\xc7\xf3\x18\xdf\x66\xf2\x1d\x0e\xa7\xf8\xa1\x5e\x6c\xf4\xe2\xb6\x5e\xd0\x7d\xf1\x0e\x9f\x47\x23\xad\x5c\x89\xd4\xea\xae\x2b\x9e\xc8\x34\xe7\x84\x06\xa3\x1b\xc1\x64\x25\x38\x22\x78\x3c\x1e\xbf\xf9\xfa\x88\x83\xc9\x3a\x17\x7b\x2a\x09\x9d\x2c\x1f\x25\x23\x41\x30\x62\x7c\xe5\xa3\x54\xfc\x0a\x4e\x29\x45\xca\x37\x51\xb2\xa5\x82\xc8\x9c\x57\xfb\x25\x13\x84\x86\x6f\xbf\xb1\x38\xd6\xff\xd1\x8d\x0a\xa7\xc1\x00\x45\x40\x71\xee\xc0\x72\xb2\x29\xab\x25\xc1\xd3\xfb\x87\xdb\x39\x0e\xbd\xe0\x01\xea\x06\xb0\xc2\xd1\x4d\x25\x9e\x85\xf0\x91\xde\xfd\xfd\xfe\xee\xf7\x37\x77\xdf\x2e\xa2\xa7\x3b\x00\x6b\xc8\x68\xb0\xca\x2d\xcb\x9e\x85\x36\x2e\xff\x78\x7a\xf1\xf2\x8b\xdb\x2f\x49\xf0\xcf\x6c\xf6\x6a\x86\xdf\xdd\x3f\x7c\x77\x3a\x4f\xc7\xf3\x8f\x00\x8d\x67\xb3\xf1\x5b\x6c\x60\x47\x40\xbf\xa3\xeb\xf4\x5c\x7f\xbf\x02\x14\x04\x89\xd0\xab\xf1\x98\x8c\x8f\xe3\x63\xa0\xbd\xb6\x68\x9e\x81\xbb\x3b\x24\xe9\x06\xed\x99\xa4\x92\x2e\x33\x66\x52\x05\x7b\xb0\xb5\x55\x66\x05\x48\x32\xe1\x59\x66\xd9\x5a\x99\xd6\x82\x49\xce\x25\xe3\x12\xd6\xe9\x1a\xa9\xa3\xc8\xec\x20\xb9\x65\x1c\xb6\x6f\xcc\x3a\x3e\x9d\xd5\x0a\xea\x03\xa5\xe1\x01\xa5\x1c\xa5\x05\x4d\x45\x49\x7c\xa5\x00\xad\x72\x25\xa5\xc0\xe4\x63\xc1\xc8\x21\x88\x63\xac\xcb\x02\x3b\x44\x87\x39\x4d\xe7\xf1\xa1\xde\x61\x59\xc9\x5a\x3a\xba\x78\x06\x74\x64\xae\x21\x41\xd4\x69\x5f\x02\x4f\x74\xe4\xc4\xc8\x00\x5f\xee\x1f\xfd\xab\x19\xc8\x0b\x45\x4b\xe9\x31\x60\x76\x10\xe5\x2b\xc4\xd9\x51\x12\x7f\x37\x70\x2e\x99\x0d\x8f\x98\x9d\x26\xc6\xe3\xc5\x29\x75\x78\xd9\xf5\xc7\x58\xa7\x30\x4a\x79\xc9\x84\x24\x46\x37\xf4\xa2\xed\x86\xdb\x2b\xbf\x8b\x22\x1c\xcf\x30\x8e\x22\x4f\xd3\xd4\x13\x6c\x87\xf8\xf6\xcf\x2a\x87\x5e\x11\x80\x1c\xac\x07\xe9\xb1\x74\xac\x93\x2c\x2f\x99\xf3\x12\xb6\xbb\x25\x62\xcb\x58\xbb\x03\xa7\x09\xb4\x10\x5b\x12\x60\xe5\xfe\x35\x38\x53\x63\x71\xba\x67\xb0\xf1\x80\x1b\x63\x56\x79\x40\xca\x54\x86\xf6\x24\x2f\x18\x77\x56\x75\xfa\x04\x2b\xab\x4c\x1a\xc7\x6c\xe6\x3c\xc7\xd4\x69\x0c\xed\xb2\x0d\x8d\x14\x3b\xbe\xb7\x96\x3c\x75\xf7\x1a\x07\x2d\xd1\x43\x30\xad\x38\xae\x10\xa3\xf5\x3b\x26\x2d\x41\x97\x54\xb8\x98\xac\x03\x9f\x2d\xd4\x4f\x47\xf9\xdf\x02\x04\x46\x06\xa2\x7c\x6e\x19\x38\x24\xf4\x5a\xe7\x5f\x9d\xea\x26\x4d\x57\xab\x85\xed\x46\xad\x76\x16\x46\x51\x14\xe8\x8a\xe5\xb9\xec\x6f\x63\xfe\xa6\xbe\xb2\xda\x6e\xdd\xd0\xe2\xb7\x21\x9c\xb3\x44\x92\x57\x2f\x5f\xd5\x68\xe6\xc2\x6a\xe2\x0f\x34\xab\x58\x6c\x24\x52\x6b\xad\x69\x72\xea\xb8\xb7\xd1\x81\xc4\xcb\xfa\xf4\x29\x7e\x33\x74\xcd\x7d\xc7\x42\xdd\xdf\x23\x35\xef\x0c\x6c\xfb\x7a\xda\x54\x0d\x23\x68\xad\xee\x5d\xb6\x03\x1a\x24\x2d\x9b\x10\x78\xc2\xfe\xef\x7c\x36\x6c\x7c\x0e\x0a\x55\x41\xda\x29\xd0\x26\x50\x2e\xb3\x2e\x81\xdd\x0b\xeb\x6f\x76\x09\x6c\x0d\x12\x85\x65\xe8\xbb\x3e\x3e\x2e\x23\xb2\x57\xfd\xd0\xbe\xe8\xfe\xd9\x74\x67\x66\xf0\x27\x62\x4d\x32\x46\x45\x7f\xb9\x28\xf0\x56\x39\xf0\x34\xbb\x06\xd2\x4b\x99\x03\xb1\xa7\x83\x20\x25\x93\xd7\xcb\x56\xfd\x3d\x69\xf9\x4b\x82\x36\xd4\xc4\x6b\x25\x44\x6b\x35\xd8\x57\x33\xea\x61\x1b\xb9\x5e\x6c\x7b\xa6\xb5\xfc\x0b\xa7\x46\xd8\x40\xe4\xf5\x78\x8b\xa5\xa8\xd8\xd5\x1b\xab\xa6\xf1\x10\x82\x3e\x6c\x43\xe8\x95\x79\x2f\x36\xcf\x43\xa9\x1e\x87\x8b\x45\x0a\x6f\xa4\x63\x27\xd6\x9d\xa9\xdd\xa6\xd6\xea\xd2\x6a\x4a\x6d\x28\xdc\x5a\xd1\x96\x99\x7b\x14\xd4\x4f\x51\xa8\xb3\x76\x37\x5f\x2c\xc0\x93\x2c\x36\xc7\x91\x97\x11\xe5\xa7\x75\x48\xa9\x13\x35\x2e\xbc\xaf\x0c\x26\xdd\x73\x97\x9c\xd4\x59\xac\x7e\xce\x61\x1d\x95\xf9\xd2\x80\x77\xf1\x2f\x05\x4b\xd2\x75\x9a\xa0\x0f\x74\xa3\x1f\x73\xef\xb3\x94\x96\xac\x6c\xc0\xb3\x94\xef\x08\xbc\xcb\x43\x35\x4e\xc1\x82\x9e\xab\x36\xcc\x26\x00\x4c\xf1\xf4\xb4\x15\x6c\x1d\xd7\xc2\x15\x2f\x68\xb2\x53\x83\x34\x38\x43\x54\x26\xe0\x01\xf1\x5a\x02\x5c\xaa\xdd\x72\x96\xcb\x44\xa4\x05\x7c\x67\x89\x4d\xa9\xed\xd6\x5c\xd7\x4b\x14\xc7\xa8\x43\xb8\x07\xad\x15\xf1\x54\x89\x1a\xdb\xa0\xad\x56\xe8\x29\x46\x70\x69\x86\x75\x88\x7b\x0f\xd6\x76\x82\x3e\xcf\x8d\x68\x9f\xcb\x49\x59\x5a\x7f\x75\x15\x51\x14\xa3\x93\xf2\x1b\xea\x03\x9e\xc9\xaf\x41\x00\x3e\x39\x3f\x19\xcc\x45\x83\xd3\x82\xba\xc3\x51\xa8\x13\x80\x3d\xb8\x5a\xb9\xf4\x50\x3e\x02\xd8\x94\xce\x7b\xc2\x51\x1a\x7d\xa2\x9d\x48\x56\x79\x52\x7b\x18\xb4\xa4\x5f\xfc\xf0\xd3\xf7\x1f\x7e\xfb\xf9\x47\xc8\x1d\x56\x03\x18\x9f\xe7\x93\xe6\xce\x92\xa6\xb0\xe0\x5b\xb1\x60\xc2\x2b\xa3\xf2\x91\x4b\x7a\xdc\x66\x44\xd1\x10\xa2\xa4\x2a\x65\xbe\x07\x36\x74\x66\xdd\xb2\x93\x99\x85\x55\x53\x38\x46\xd5\x85\xd4\x60\x5c\xa4\xa9\x4f\xaf\x7e\xc6\xbb\x94\x81\x8f\xbf\x0a\x5a\xb4\x9d\x94\x50\x90\x74\x15\x95\x05\xfd\x8b\x93\x35\x0f\xd1\x12\xae\x3e\x98\x6a\xf2\x99\xe4\x2b\x06\xdc\x63\xdc\xe4\x70\xcd\x75\x06\x2d\x8a\x4b\xa2\x91\x35\x5f\xfc\xab\x6a\x5f\x28\xd9\x51\xeb\x43\xce\x2a\x77\xc6\xb8\xb2\xcd\x84\x00\xed\x2c\xa7\x2b\x1b\x2f\xe0\x79\x13\x53\x9d\x37\x1f\xa0\xfd\xa6\x5c\xa3\x01\xe1\x5c\x10\xf8\x0d\xbc\x0e\x63\x83\x12\xf6\x0f\x38\x6f\xe2\x72\xb1\xf7\xd4\xa7\xf6\xcd\xd0\xb5\xd0\x7c\x29\x1f\xc2\xba\x93\xb6\x78\x33\x1e\x0c\x6b\xac\x29\x48\x84\xe8\x34\xc5\xa5\xfa\x6f\x99\x03\x3e\xdb\x32\x05\x4f\x94\x5a\xef\x9d\x35\x5a\x7e\x5c\xad\xd2\x56\x0d\x5d\x6d\xfc\x1b\x00\x00\xff\xff\x83\x84\x66\x96\x1a\x12\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 4634, mode: os.FileMode(420), modTime: time.Unix(1447646340, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x51\xbb\x6e\xc3\x30\x0c\x9c\xad\xaf\x20\x3c\xc9\x40\x93\x06\x1d\x0b\x64\xeb\x17\x74\xe8\x5a\xa8\x36\xd5\x18\x90\xa9\x54\xa6\x8b\x64\xe9\xb7\x97\xa2\x6a\xbb\xaf\x21\x43\x06\x5b\x12\x79\x77\x3a\x9e\x36\x1b\x78\x44\x9e\x12\x81\x9f\xa8\xe5\x3e\x92\x99\x37\xd0\x46\x62\x24\xb6\x9d\x63\x77\x23\xa7\x0e\xe5\xcf\xe7\x23\x36\xa6\x0a\xb1\x75\x41\x6b\xb0\x2f\x4b\x4c\x70\xb7\xdb\x2d\x9d\x8c\xcb\x2d\x5d\xa5\x57\x33\x9e\xf8\xf6\xc0\x43\xa8\x57\xb6\xea\x0b\xaa\x96\x5a\xef\x21\x63\xf5\xb6\x06\xf6\x52\x1c\x39\xf5\xf4\x5a\x03\x1f\x90\x4c\x55\xad\xf0\x0c\x31\x15\x86\x11\xff\x92\xd8\xbd\x04\xac\xc1\x51\xa7\xb0\x6d\x42\xea\x30\xc1\xc7\x1e\xa8\x0f\xff\x4b\xdd\x17\x8c\x6d\x8a\xe6\x8f\x3e\xc7\xe2\xa2\xdc\x20\x00\xea\x4c\x69\x9f\x78\xfb\x20\x35\xfb\x2d\x97\x1c\x12\xbd\x63\xe2\x6d\x21\x71\x6c\x0f\x2e\x8d\xa1\x6f\xd1\x7e\x49\x36\x8d\xc9\x12\x46\x72\x7f\x92\x96\xfa\x1c\x79\xf2\x1e\x7c\x8a\x03\xcc\xca\xeb\x23\x1c\x5d\x72\x83\x25\x37\xe4\xd4\x65\xdc\xbc\xfb\x35\x4d\x49\xd3\x8b\xdb\x67\x45\x67\xae\x5d\x8c\x2b\x55\xb8\x99\xec\x35\xa2\x25\xd1\x2a\x95\xa7\x17\x2d\x39\xe9\x68\x73\xc9\x97\x51\xf3\xa7\x9a\xa3\xa8\xeb\x66\x75\xe6\x63\xba\xdc\x58\x06\x5f\xd9\xd7\x62\xe4\x6d\xc2\x74\xbe\xd8\x89\xa2\xaf\x6c\xe5\x33\x00\x00\xff\xff\x39\xf6\x47\xc5\x46\x03\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 838, mode: os.FileMode(420), modTime: time.Unix(1440162598, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ConfGlue.lua": confglue_lua,
	"MainGlue.lua": mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"ConfGlue.lua": &_bintree_t{confglue_lua, map[string]*_bintree_t{
	}},
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

