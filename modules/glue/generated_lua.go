package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\xdf\x6f\xdb\xb6\x13\x7f\x8e\xff\x0a\x96\xfd\x3a\xa5\xbe\x53\xd4\xb4\x0f\x03\xe6\x46\x19\x8a\x75\xcf\x1b\xb6\x62\xc0\xe6\xa4\x1e\x23\x53\xb6\x60\x59\x72\x25\xca\x70\xe6\x39\x7f\xfb\xee\xf8\x43\xa2\x64\xc9\xf1\x80\xf6\x65\x2f\xb6\xc9\xbb\xfb\xf0\xee\x73\xc7\x23\xe9\x34\x8f\x78\x4a\x96\x72\x9d\xce\x44\x19\xf1\x8d\x08\xf7\x53\x7a\x43\xef\x43\x7a\x99\xca\x77\xd4\x9f\xd2\x5b\x35\x58\xe8\xc1\xa5\x1a\xf0\xf5\xe6\x1d\x3d\x8c\x46\xda\xb8\x2a\x12\x6b\x1b\x57\x59\x24\x93\x3c\x63\xdc\x1b\x5d\x14\x42\x56\x45\x46\x18\x1d\x8f\xc7\xd7\x6f\x77\xd4\x9b\xc4\x79\xb1\xe6\x92\xf1\xc9\xc3\xa3\x14\xcc\xf3\x46\x22\x9b\xbb\x28\x55\x76\x02\xa7\x94\x45\x92\x2d\x82\x68\xc9\x0b\x26\xf3\xac\x5a\x3f\x88\x82\x71\xff\xcd\xb7\x16\xc7\xfa\x3f\xba\xc0\x70\x1a\x0c\x30\x04\x94\xda\x1d\x18\x4e\x16\x65\xf5\xc0\xe8\xf4\xe6\xf6\xf2\x9e\xfa\x4e\xf0\x00\x75\x01\x58\xfe\xe8\xa2\x2a\xce\x42\xf8\xc4\xaf\xfe\x7a\x7f\xf5\xc7\xf5\xd5\x77\xb3\xe0\xe9\x0a\xc0\x1a\x32\x1a\xac\x72\x29\xd2\xb3\xd0\xc6\xe5\x9f\x4f\x2f\x5e\xfe\xef\xf2\xff\xcc\xfb\xfb\xee\xee\xd5\x1d\x7d\x77\x73\xfb\xfd\xfe\x30\x1d\xdf\x7f\x02\x68\x7a\x77\x37\x7e\x43\x0d\xec\x08\xe8\xaf\xe9\xda\x9f\xeb\xef\x37\x80\x42\x20\x11\x7a\x34\x1e\xb3\xf1\x6e\xbc\xf3\xb4\xd7\x16\xcd\x59\xe0\xea\x8a\x48\xbe\x20\x6b\x21\xb9\xe4\x0f\xa9\x30\xa9\x82\x39\x98\x5a\xe2\xb2\x05\x68\x8a\xc2\x59\x59\xa4\x31\x2e\xad\x15\xa3\x3c\x93\x22\x93\x30\x4e\x62\x82\xa2\xc0\xcc\x10\xb9\x14\x19\x4c\x5f\x98\x71\xb8\x3f\xe0\x08\xea\x83\x24\xfe\x96\x24\x19\x49\x36\x3c\x29\x4a\xe6\x1a\x79\x64\x9e\xa3\x16\x82\xc9\xc7\x8d\x60\x5b\x2f\x0c\xa9\x2e\x0b\x5a\x23\xd6\x98\xd3\xe4\x3e\xdc\xaa\x19\x91\x96\xa2\x65\xa3\x8b\x67\xc0\x46\xe6\x1a\x12\x54\x6b\xeb\x63\xe0\x89\x8e\x9c\x19\x1d\xe0\xab\xfe\xd2\x9f\x9a\x81\x7c\x83\xb4\x94\x0e\x03\x66\x86\xf0\x6c\x4e\x32\xb1\x93\xcc\x9d\xf5\x6a\x97\xcc\x84\x43\xcc\x4a\x13\xe3\xf0\x52\x1b\x75\x78\x59\xf5\xc7\xa8\x52\x18\x24\x59\x29\x0a\xc9\x8c\xad\xef\x44\xdb\x0d\xb7\x57\x7f\x15\x04\x34\xbc\xa3\x34\x08\x1c\x4b\x53\x4f\x30\xed\xd3\xcb\xcf\x55\x0e\xbd\xc2\x03\x3d\x18\x0f\xd2\x63\xe9\x88\xa3\x34\x2f\x45\xed\x25\x4c\x77\x4b\xc4\x96\xb1\x76\x07\xa4\x11\xb4\x10\x5b\x12\xb0\xca\xcd\x6b\x70\x46\x61\x65\x7c\x2d\x60\xe2\x96\x36\x8b\x59\xe3\x01\x2d\x53\x19\xda\x93\x7c\x23\xb2\x7a\x55\x9d\xbe\x42\x94\x55\x2a\x8d\x63\x36\x73\x8e\x63\x28\x0d\xa1\x5d\xb6\xa1\x09\xb2\xe3\x7a\x6b\xc9\xc3\xbd\xd7\x38\x68\x89\x1e\x82\x69\xc5\x71\x82\x18\x6d\xdf\x59\xd2\x12\x74\x4c\x45\x1d\x93\x75\xe0\xab\x85\xfa\x7c\x94\xff\x2e\x40\x60\x64\x20\xca\x73\xcb\xa0\x46\x22\xaf\x75\xfe\x51\xaa\x9b\x34\x9f\xcf\x67\xb6\x1b\xb5\xda\x99\x1f\x04\x81\xa7\x2b\x36\xcb\x65\x7f\x1b\x73\x27\xf5\x96\xd5\xeb\xaa\x86\x16\xbe\xf1\x41\x2e\x22\xc9\x5e\xbd\x7c\xa5\xd0\xcc\x86\xd5\xc4\x6f\x79\x5a\x89\xd0\x68\x24\x76\xb5\xa6\xc9\xa1\xb8\xb7\xd1\x81\xc6\x4b\x25\x7d\x0a\xaf\x87\xb6\xb9\xeb\x98\xaf\xfb\x7b\x80\xe7\x9d\x81\x6d\x6f\x4f\x9b\xaa\x61\x04\x6d\xd5\xdd\xcb\xf6\x80\x06\x4d\xcb\x26\x04\x1e\x89\xff\x3a\x9f\x0d\x1b\x5f\x83\x42\x2c\x48\x7b\x0a\xb4\x09\x94\x0f\x69\x97\xc0\xee\x86\x75\x27\xbb\x04\xb6\x0e\x12\xc4\x32\xf4\x9d\x3e\x3e\x8e\x23\xb2\x5b\x7d\xdb\xde\xe8\xae\x6c\xba\x32\x67\xf0\x33\xb1\x46\xa9\xe0\x45\x7f\xb9\x20\x78\xab\x1c\xb2\x24\x3d\x05\xd2\x4b\x59\x0d\x62\xa5\x83\x20\xa5\x90\xa7\xcb\x16\x7f\x4f\x5a\xfe\x32\xaf\x0d\x35\x71\x5a\x09\xd3\x56\x0d\xf6\xc9\x8c\x3a\xd8\x46\xaf\x17\xdb\xca\xb4\x95\xbb\xe1\xf0\x08\x1b\x88\x5c\x1d\x6f\xa1\x2c\x2a\x71\x72\xc7\xe2\x69\x3c\x84\xa0\x85\x6d\x08\x3d\x32\xf7\xc5\xe6\x7a\x28\xf1\x72\x38\x9b\x25\x70\x47\xda\x75\x62\x5d\x99\xda\x6d\x6a\x4d\x95\x56\x53\x6a\x43\xe1\x2a\x43\x5b\x66\xf5\xa5\x40\x5d\x45\xa1\xce\xda\xdd\x7c\x36\x03\x4f\xd2\xd0\x88\x03\x27\x23\xe8\xa7\x75\x08\xcd\x19\x1e\x17\xce\x2b\x43\xc8\xfa\xba\xcb\xf6\x28\x0b\xf1\xe3\xe0\xab\xa8\xcc\x4b\x03\xee\xc5\xbf\x6e\x44\x94\xc4\x49\x44\x3e\xf2\x85\xbe\xcc\xbd\x4f\x13\x5e\x8a\xb2\x01\x4f\x93\x6c\xc5\xe0\x5e\xee\xe3\x71\x0a\x2b\xe8\x73\xd5\x86\xd9\x04\x40\x39\x9d\xee\x97\x85\x88\x43\xa5\x5c\x65\x1b\x1e\xad\xf0\x20\xf5\x0e\x10\x95\x09\x78\x40\x5d\x69\x80\x4b\xca\xad\x7a\xe5\x32\x2a\x92\x0d\xbc\xb3\x8a\x45\xa9\xd7\x55\x5c\xab\x21\x09\x43\xd2\x21\xdc\x81\xd6\x86\x74\x8a\xaa\x66\x6d\xb0\xc6\x11\x79\x0a\x09\x6c\x9a\x61\x1b\x56\xdf\x07\xd5\x3a\x5e\x9f\xe7\x46\xb5\xcf\xe5\xa8\x2c\xad\xbf\xba\x8a\x38\x09\xc9\x1e\xfd\x86\xfa\x80\x6b\xf2\x6b\x50\x80\x27\xe7\xb3\xc1\x1c\x35\x38\xad\xa8\x3b\x1c\x87\x3a\x01\xd8\x6d\x5d\x2b\xc7\x1e\xca\x47\x00\x9b\xf2\xfb\x9e\x70\xd0\xa2\x4f\xb5\x13\xc9\x3c\x8f\x94\x87\x5e\x4b\xfb\xc5\x87\x9f\x7e\xf8\xf8\xfb\xcf\x3f\x42\xee\x28\x1e\xc0\xf4\x70\x3f\x69\xf6\x2c\x6b\x0a\x0b\xde\x8a\x1b\x51\x38\x65\x54\x3e\x66\x92\xef\x96\x29\x43\x1a\x7c\x68\xf9\x73\x11\x73\xb8\xc5\x00\x21\x3a\xb9\xee\x4c\x27\x3f\x33\x6b\x8c\x68\x06\x20\xe6\x10\xf5\x51\x7a\xfa\x34\x71\x6f\x7b\x4e\xb2\xc0\xbb\x5f\xb4\xb6\x75\xce\xc9\x9f\xe9\x77\x73\xd8\x3a\x3e\x8c\xe6\x02\x3e\x91\x87\x3a\xa1\x38\x07\xe4\xab\x2f\x48\xd2\xdb\xeb\xeb\x5a\x82\x7a\x28\x52\xdf\x20\xd3\x19\x57\x34\x8d\xda\x4f\x49\xd0\xa2\xb4\xa9\x02\x5c\x4d\x57\x41\xe7\x34\x6f\xd4\x51\x65\xd4\x7a\x02\x36\x46\xa6\x74\x70\xf7\xe2\x64\xa0\xdf\x74\x9d\x52\x6f\x43\x39\xef\x3e\x43\x60\x23\xaf\x4b\x46\xad\x60\x2a\x46\x89\x77\x32\xf8\x00\x73\xcc\xe1\x05\x49\xca\xb6\x70\x98\x06\xda\x48\xe6\xf8\xcf\x46\x99\x26\x91\xa8\xaf\xb5\x4d\x55\xfc\x06\x22\xe5\x67\x29\xab\x38\x26\x71\x91\xaf\x89\x45\x6e\x92\xb0\xe1\x05\x5f\xdb\x86\x86\x95\x01\xbf\x3a\xd1\x68\x36\x63\xf0\x76\xa6\xb4\x75\xba\xad\xe3\xca\xd4\xf4\xe7\x58\x51\x74\xd4\x96\xf5\xc9\xd9\x3a\xc9\xe3\xa6\x46\x14\x66\x09\xe8\xea\x47\xe3\x19\xfe\xf3\x73\xb6\x63\xa8\xfc\x85\xfd\xaa\x1d\xf9\x5c\x89\xe2\xf1\x6c\x4f\x94\xf6\x17\x76\xe5\x9f\x00\x00\x00\xff\xff\xb9\x46\x45\x86\x72\x13\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 4978, mode: os.FileMode(420), modTime: time.Unix(1439575822, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xcd\x8a\xd4\x40\x10\x3e\x27\x4f\x51\xe4\x94\x40\x76\x59\x3c\x0a\x73\xd3\x9b\x7a\x58\xf5\x24\x22\x3d\x49\xc5\x34\xf4\x74\x87\xea\xca\x66\x83\xe8\xb3\x5b\xdd\xf9\x1d\x9d\x08\xee\xa5\xd9\x49\x7d\x7f\xf5\x6d\xdd\xdd\xc1\x7b\x5d\xd7\x06\x07\x45\x08\x2d\x9a\x0e\xc9\x97\x60\x1d\x03\xa1\x32\x66\x84\xde\x63\xd3\x1b\x18\x34\xb7\xa0\xec\xc8\xad\xb6\xdf\xe1\xdc\x33\x70\x8b\xe0\x91\x9e\x90\x40\x5b\xcd\xe0\x2b\xd2\x1d\xa7\x4d\x6f\x2b\xd6\xce\xc2\x65\xb8\xb7\x38\xe4\x8d\x2d\xe1\xac\x6d\x2d\xb4\x20\x8c\x83\x67\xc5\x58\xa4\x89\x71\x95\x32\x50\xb9\x1a\xe1\x04\x59\x96\x26\xba\x01\x1e\x3b\x14\x46\x01\x27\xf9\xb4\x28\x65\xc1\xca\xa6\x49\x32\x63\x3d\x93\x88\xdd\xd7\xfd\xa5\x0b\xd8\x34\x41\xe3\xf1\x4f\xf2\x04\x5a\xa9\x21\x05\x12\x09\xdb\x38\x55\x4f\xc3\x3c\xe8\x09\x3d\x18\x87\x85\xc3\x7c\x86\x1f\x5a\x45\xaf\x00\x10\xb0\xa3\x5c\xde\xf8\xd1\xd6\xe9\xf4\x4c\x4b\xd1\xf2\x87\xcc\xe3\x5e\xcb\xda\x8b\xfe\x92\x76\x29\x66\xca\xcc\xea\x6c\x70\x8d\x9c\xd0\x12\x59\x9a\x7c\xf3\xee\xf1\xdb\x87\x8f\x31\x71\x09\x4c\x3d\x6e\xa5\xee\x53\x1d\x52\x1a\x25\x88\x12\x7e\x7c\xc9\x7c\xf6\xf5\x94\x3d\x65\x3f\xb7\xdc\x13\xf7\x45\x91\x1e\x3f\xff\x7f\xa6\x8d\xf3\xaf\x50\xe1\x91\x48\x81\xf9\xeb\x04\x56\x9b\x25\xc3\xbe\xf8\x88\x22\xe4\x9e\xac\x74\x1e\x7e\xed\xaf\x0f\xab\xd6\xcd\x4e\x84\xbe\x5b\x4f\x2e\xfc\x90\x38\xec\x6c\x7f\x39\x23\xe5\x71\x08\x8e\xe0\xd5\xc3\xc3\x76\x85\xf1\x38\x6e\x9d\xd2\xec\x27\x06\x6f\x83\x41\x60\x97\x30\x9f\xd2\xfe\x12\x37\x81\xeb\x12\x0f\xf9\xaf\x49\x36\x90\x3c\x45\xb1\xfe\x53\x36\x6c\x58\xe6\x13\x3e\xf3\x8c\x67\xb7\xbf\xe1\xb9\x8a\x5b\x05\x44\x0e\xcb\xb3\x96\x70\xed\x1f\xe7\xf9\xcd\x2e\x0a\xb1\x91\x69\xf1\x97\xae\x1f\x2d\xab\xe7\xd6\x1c\xe9\xc6\xe2\x0f\x35\xaf\xd8\xc5\xa4\xfe\x3b\x00\x00\xff\xff\xa2\x01\xc1\xec\x87\x04\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 1159, mode: os.FileMode(420), modTime: time.Unix(1439571527, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua": mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

