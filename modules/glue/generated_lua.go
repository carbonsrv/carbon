package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x5f\x73\xe3\x34\x10\x7f\x6e\x3e\x85\x4f\x47\x5a\x19\x1c\xb7\xbd\x07\x66\x48\xeb\x32\x0c\xc7\x33\x0c\xdc\x0b\x24\xbd\xa0\x3a\x4a\xe3\x89\x23\xe7\x6c\x39\x93\x12\xd2\xcf\xce\xae\xfe\x59\x76\xe3\x5c\x99\xe1\x5e\x78\x89\x23\xed\xee\x6f\x77\x7f\x5a\xad\xa4\xbc\x48\x59\x1e\x2c\xe5\x3a\x9f\xf1\x2a\x65\x1b\x9e\xec\x27\xe4\x96\xdc\x27\xe4\x3c\x97\x37\x24\x9a\x90\x3b\x35\x78\xd4\x83\x73\x35\x60\xeb\xcd\x0d\x39\x0c\x06\xda\xb8\x2e\x33\x6b\xbb\xa8\x45\x2a\xb3\x42\x50\x16\x0e\xce\x4a\x2e\xeb\x52\x04\x94\x0c\x87\xc3\xab\x77\x3b\x12\x8e\x17\x45\xb9\x66\x92\xb2\xf1\xc3\x93\xe4\x34\x0c\x07\x5c\xcc\x7d\x94\x5a\x9c\xc0\xa9\x64\x99\x89\xc7\x38\x5d\xb2\x92\xca\x42\xd4\xeb\x07\x5e\x52\x16\x5d\x7f\x6b\x71\x6c\xfc\x83\x33\x4c\xa7\xc1\x00\x43\x40\x71\xe1\xc0\x70\xfc\x58\xd5\x0f\x94\x4c\x6e\xef\xce\xef\x49\xe4\x25\x0f\x50\x67\x80\x15\x0d\xce\xea\xf2\x55\x08\x1f\xd9\xe8\xaf\x1f\x46\x7f\x5c\x8d\xbe\x9b\xc5\xcf\x23\x00\x6b\xc8\x68\xb0\xaa\x25\xcf\x5f\x85\x36\xac\xfe\x7c\x7e\xf3\xf6\xab\xf3\xaf\x69\xf8\xf7\x74\x7a\x31\x25\x37\xb7\x77\xdf\xef\x0f\x93\xe1\xfd\x47\x80\x26\xd3\xe9\xf0\x9a\x18\xd8\x01\xd0\xef\xe8\xda\xbf\x36\xde\x6f\x00\x25\x80\x85\xd0\xa3\xe1\x90\x0e\x77\xc3\x5d\xa8\xa3\xb6\x68\x9e\x83\xd1\x28\x90\xec\x31\x58\x73\xc9\x24\x7b\xc8\xb9\x59\x2a\x98\x83\xa9\x25\xba\x2d\x41\x93\x97\x9e\x67\x9e\x2f\xd0\xb5\x56\x4c\x0b\x21\xb9\x90\x30\xce\x16\x01\x8a\x62\x33\x13\xc8\x25\x17\x30\x7d\x66\xc6\xc9\xfe\x80\x23\xa8\x8f\x20\x8b\xb6\x41\x26\x82\x6c\xc3\xb2\xb2\xa2\xbe\x51\x18\xcc\x0b\xd4\x42\x30\xf9\xb4\xe1\x74\x1b\x26\x09\xd1\x65\x41\x1c\xa2\xc3\x9c\x64\xf7\xc9\x56\xcd\xf0\xbc\xe2\x2d\x1b\x5d\x3c\x3d\x36\xb2\xd0\x90\xa0\xea\xac\x5f\x02\x8f\x75\xe6\xd4\xe8\x00\x5f\xee\xa3\x7f\x35\x03\xc5\x06\x69\xa9\x3c\x06\xcc\x4c\xc0\xc4\x3c\x10\x7c\x27\xa9\x3f\x1b\xba\x90\xcc\x84\x47\xcc\x4a\x13\xe3\xf1\xe2\x8c\x3a\xbc\xac\x8e\xe7\xa8\x96\x30\xce\x44\xc5\x4b\x49\x8d\x6d\xe4\x65\xdb\x4d\xf7\xa8\xfe\x2a\x8e\x49\x32\x25\x24\x8e\x3d\x4b\x53\x4f\x30\x1d\x91\xf3\x4f\x75\x01\xbd\x22\x04\x3d\x18\xf7\xd2\x63\xe9\x58\xa4\x79\x51\x71\x17\x25\x4c\x77\x4b\xc4\x96\xb1\x0e\x07\xa4\x29\xb4\x10\x5b\x12\xe0\xe5\xf6\x12\x82\x51\x58\x82\xad\x39\x4c\xdc\x91\xc6\x99\x35\xee\xd1\x32\x95\xa1\x23\x29\x36\x5c\x38\xaf\x7a\xf9\x4a\x5e\xd5\xb9\x34\x81\xd9\x95\xf3\x02\x43\x69\x02\xed\xb2\x0d\x1d\x20\x3b\x7e\xb4\x96\x3c\xdc\x7b\x4d\x80\x96\xe8\x3e\x98\x56\x1e\x27\x88\xd1\xf6\x1d\x97\x96\xa0\x97\x54\xb8\x9c\x6c\x00\x5f\x2c\xd5\xcf\x67\xf9\xef\x12\x04\x46\x7a\xb2\x7c\x6d\x19\x38\xa4\xe0\x52\xaf\x3f\x4a\x75\x93\x66\xf3\xf9\xcc\x76\xa3\x56\x3b\x8b\xe2\x38\x0e\x75\xc5\x8a\x42\x1e\x6f\x63\xfe\xa4\xde\xb2\xda\xaf\x6a\x68\xc9\x75\x04\x72\x9e\x4a\x7a\xf1\xf6\x42\xa1\x99\x0d\xab\x89\xdf\xb2\xbc\xe6\x89\xd1\xc8\xac\xb7\xa6\xc9\xa1\xf8\x68\xa3\x03\x8d\xb7\x4a\xfa\x9c\x5c\xf5\x6d\x73\x3f\xb0\x48\xf7\xf7\x18\xcf\x3b\x03\xdb\xde\x9e\x76\xa9\xfa\x11\xb4\x55\x77\x2f\xdb\x03\x1a\x34\x2d\x9b\x90\x78\xca\xff\xef\x7c\x36\x6c\x7c\x09\x0a\xb1\x20\xed\x29\xd0\x26\x50\x3e\xe4\x5d\x02\xbb\x1b\xd6\x9f\xec\x12\xd8\x3a\x48\x10\xcb\xd0\x77\xfa\xf8\x78\x99\x91\xdd\xea\xdb\xf6\x46\xf7\x65\x93\x95\x39\x83\x3f\x93\x6b\x9a\x73\x56\x1e\x2f\x17\x04\x6f\x95\x83\xc8\xf2\x53\x20\x47\x29\x73\x20\x56\xda\x0b\x52\x71\x79\xba\x6c\xf1\xff\xb8\x15\x2f\x0d\xdb\x50\x63\xaf\x95\x50\x6d\xd5\x60\x9f\x5c\x51\x0f\xdb\xe8\x1d\xc5\xb6\x32\x6d\xe5\x6f\x38\x3c\xc2\x7a\x32\x57\xc7\x5b\x22\xcb\x9a\x9f\xdc\xb1\x78\x1a\xf7\x21\x68\x61\x1b\x42\x8f\xcc\x7d\xb1\xb9\x1e\x4a\xbc\x1c\xce\x66\x19\xdc\x91\x76\x9d\x5c\x57\xa6\x76\x9b\x5a\x53\xa5\xd5\x94\x5a\x5f\xba\xca\xd0\x96\x99\xbb\x14\xa8\xab\x28\xd4\x59\xbb\x9b\xcf\x66\x10\x49\x9e\x18\x71\xec\xad\x88\xb9\xd7\xfe\xb6\xe1\x69\xb6\xc8\xd2\xe0\x03\x7b\xac\x06\x36\x42\xc4\xa3\x78\x7e\x78\xcf\x0e\x2e\xdd\xfd\x97\xee\x51\x96\xe0\xcf\x21\x52\x69\x9a\xa7\x87\xb3\xcf\x33\xb1\xa2\x70\x17\x8f\xf0\x08\x05\x10\x7d\x96\xda\xd4\x9a\xa0\x09\x23\x93\xfd\xb2\xe4\x8b\x44\x29\xd7\x62\xc3\xd2\x15\x1e\x9e\xe1\x01\x32\x31\x49\xf6\xa8\x2b\x0d\xf0\xda\xf6\x5c\xa5\x65\xb6\xc1\x13\x71\xee\x05\x8f\xa6\x5a\x40\x8c\xa4\x6d\x34\x2f\x52\xb5\x0c\x6d\x8b\x37\xef\x7f\xfe\xf1\xc3\xef\xbf\xfc\x04\x3e\x09\x1e\x16\xe4\x70\x3f\x6e\xea\x8b\x6a\x10\xe0\xf0\x57\x6d\x62\xd1\x1a\x58\x5b\xfc\x73\xa0\x2d\x0a\xd0\x31\xfc\xa2\x23\xf0\x63\x5f\x06\x73\x1e\x24\xfa\x03\x2d\xe9\xdd\xd5\x95\x93\xa0\x1e\x8a\xd4\x17\x64\x44\xc2\x2d\xf9\x52\xc5\x31\x68\xbf\x2b\x40\x8b\x90\x81\xab\x25\xf4\x16\x06\x09\x4c\x76\x5a\x7b\xa3\x8e\x2a\x83\xd6\x7b\xa0\x31\x32\x55\x88\xf7\x72\x9c\x8c\xf5\x05\x3f\x78\x4e\x02\x68\x16\xc7\xa1\xbc\x47\x80\x59\xb2\x46\xee\xae\xc7\xca\x83\x5e\x31\x2d\xde\xc9\xf8\x3d\xcc\x51\x8f\x17\x24\x49\x6c\xa1\xb3\xc6\xda\x48\x16\xf8\xcc\xad\xf2\x2c\xe5\xee\x8e\xd3\x5d\x3b\x7c\x4c\xdb\x5a\xc5\xa3\x00\xfe\x75\x82\xd5\x64\x2d\x20\x98\x19\x2a\xa3\x25\x75\x61\x29\x4b\xb3\x15\x17\x8a\x80\x17\x3b\x50\x37\xc9\x56\xd3\x5e\x34\xa5\xe7\x02\xf9\x54\xf3\xf2\x69\x0b\xaf\xf2\xd7\x06\xa3\x0c\xfe\xe3\x68\xfe\x09\x00\x00\xff\xff\x5d\x1c\x41\x5a\xc8\x10\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 4296, mode: os.FileMode(420), modTime: time.Unix(1437657363, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xcb\x8e\xd4\x40\x0c\x3c\x27\x5f\x61\xe5\x94\x48\xd9\xd5\x8a\x23\xd2\xdc\xe0\x06\x1c\x16\x38\x21\x84\xf2\x70\x48\x4b\x3d\xdd\x91\xdb\xd9\x30\x42\xf0\xed\xd8\x9d\xe7\xa2\x19\x24\xf6\x62\x4d\xda\x55\xae\x72\x8d\xef\xee\xe0\xbd\x69\x5b\x8b\x53\x45\x08\x3d\xda\x01\x29\x94\xe0\x3c\x03\x61\x65\xed\x05\xc6\x80\xdd\x68\x61\x32\xdc\x43\xe5\x2e\xdc\x1b\xf7\x1d\xea\x91\x81\x7b\x84\x80\xf4\x84\x04\xc6\x19\x86\xd0\x90\x19\x38\xed\x46\xd7\xb0\xf1\x0e\xce\xd3\xbd\xc3\x29\xef\x5c\x09\xb5\x71\xad\xd0\x74\x30\x4e\x81\x2b\xc6\x22\x4d\xac\x6f\x2a\x0b\x8d\x6f\x11\x4e\x90\x65\x69\x62\x3a\xe0\xcb\x80\xc2\x28\xe0\x24\x4f\xeb\xa4\x4c\xa5\x5c\x9a\x24\x0b\x36\x30\xc9\xb0\xfb\x76\x3c\x0f\x8a\x4d\x13\xb4\x01\xff\x26\xcf\xa0\x8d\xaa\x2e\x90\x48\xd8\xd6\x57\xed\xdc\xcc\x75\x9e\xd0\x55\x58\x17\xd6\xfe\x02\xbf\x29\x15\xb5\x14\x20\x60\x4f\xb9\xd4\xf8\xe8\xda\x74\x2e\xf3\x52\xb4\xfe\x90\x7e\xdc\x6b\x5d\x7b\x9d\xbf\xba\x5d\x83\x99\x3d\x73\x55\x5b\xdc\x2c\x27\xb4\x5a\x96\x24\xdf\xbc\x7b\xfc\xf6\xe1\x63\x74\x5c\x02\xd3\x88\x7b\xa8\x47\x57\x37\x29\x5d\x25\x88\x12\x7e\x7e\xc9\x42\xf6\xf5\x94\x3d\x65\xbf\x76\xdf\x33\xf7\x45\x96\x1e\x3f\xff\xbf\xa7\x9d\xf3\x2f\x53\x5a\xc4\x92\x32\x7f\x9f\xc0\x19\xbb\x7a\x38\x06\x1f\x51\x84\x3c\x92\x93\xcc\xf5\xeb\x78\x7d\xd8\xf4\x7e\x51\x22\x0c\xc3\x76\x72\xfa\x21\x76\xd8\xbb\xf1\x5c\x23\xe5\xb1\x09\x9e\xe0\xd5\xc3\xc3\x7e\x85\xf1\x38\xae\x9d\xd2\xa2\x27\x02\x6f\x55\x40\xd9\x25\x2c\xa7\x74\xbc\xc4\x7d\xc0\xf3\x10\x6f\xf2\x5f\x93\x6c\x20\x7e\x8a\x62\xfb\x53\x76\xac\x2e\xf3\x09\x7f\xf0\x82\x67\x7f\xbc\xe1\x25\x8a\x6b\x01\x44\x0e\x4b\xd9\x42\x78\xae\x1f\xfb\xf9\xd5\x2c\x0a\x91\x91\x6e\x11\xe7\xfe\x09\x00\x00\xff\xff\x04\x22\x86\x71\x29\x04\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 1065, mode: os.FileMode(420), modTime: time.Unix(1432300032, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua": mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

