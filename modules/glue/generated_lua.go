package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x4d\x73\xe2\x46\x13\x3e\x9b\x5f\xa1\x9d\x7d\xb1\xa5\x37\x42\xb6\xf7\x90\xaa\x60\xcb\xa9\xad\x6c\xce\xd9\x24\x7b\x49\x80\x25\x63\x31\x80\x0a\x21\xb1\xd2\x88\xc2\x21\xf8\xb7\xa7\x7b\xbe\x25\x10\x76\xaa\xb2\x97\x5c\x6c\xcf\x74\xf7\xd3\xdd\xcf\xf4\x74\x8f\x9c\x15\x09\xcd\xbc\x25\x5f\x67\x53\x56\x25\x74\xc3\xe2\xfd\x88\xdc\x93\x49\x4c\x2e\x33\x7e\x47\xc2\x11\x79\x10\x8b\x85\x5c\x5c\x8a\x05\x5d\x6f\xee\xc8\xa1\xd7\x93\xc6\x75\x99\x6a\xdb\x79\x9d\x27\x3c\x2d\x72\x9f\x06\xbd\x8b\x92\xf1\xba\xcc\x3d\x9f\xf4\xfb\xfd\x9b\x77\x3b\x12\x0c\xe7\x45\xb9\xa6\xdc\xa7\xc3\xc7\x27\xce\xfc\x20\xe8\xb1\x7c\xe6\xa2\xd4\xf9\x19\x9c\x8a\x97\x69\xbe\x88\x92\x25\x2d\x7d\x5e\xe4\xf5\xfa\x91\x95\x3e\x0d\x6f\xbf\xd5\x38\x3a\xfe\xde\x05\xa6\x63\x31\xc0\x10\x50\x4c\x38\xb0\x1c\x2e\xaa\xfa\xd1\x27\xa3\xfb\x87\xcb\x09\x09\x9d\xe4\x01\xea\x02\xb0\xc2\xde\x45\x5d\xbe\x0a\xe1\x33\x1d\xfc\xf9\x7e\xf0\xfb\xcd\xe0\xbb\x69\xf4\x3c\x00\x30\x4b\x86\xc5\xaa\x96\x2c\x7b\x15\x5a\xbf\xfa\xe3\xf9\xcd\xdb\xff\x5d\xfe\xdf\x0f\xfe\x1a\x8f\xaf\xc6\xe4\xee\xfe\xe1\xfb\xfd\x61\xd4\x9f\x7c\x06\x68\x32\x1e\xf7\x6f\x89\x82\xed\x01\xfd\x86\xae\xfd\x6b\xe3\xfd\x06\x50\x3c\x38\x08\xb9\xea\xf7\xfd\xfe\xae\xbf\x0b\x64\xd4\x1a\xcd\x71\x30\x18\x78\x9c\x2e\xbc\x35\xe3\x94\xd3\xc7\x8c\xa9\xa3\x82\x3d\xd8\x5a\xa2\xdb\x12\x34\x59\xe9\x78\x66\xd9\x1c\x5d\x4b\xc5\xa4\xc8\x39\xcb\x39\xac\xd3\xb9\x87\xa2\x48\xed\x78\x7c\xc9\x72\xd8\xbe\x50\xeb\x78\x7f\xc0\x15\xd4\x87\x97\x86\x5b\x2f\xcd\xbd\x74\x43\xd3\xb2\xf2\x5d\xa3\xc0\x9b\x15\xa8\x85\x60\xfc\x69\xc3\xfc\x6d\x10\xc7\x44\x96\x05\x31\x88\x06\x73\x94\x4e\xe2\xad\xd8\x61\x59\xc5\x1a\x36\xb2\x78\x3a\x6c\x78\x21\x21\x41\xd5\x58\x1f\x03\x0f\x65\xe6\xbe\xd2\x01\xbe\xcc\x2f\xf9\x53\x32\x50\x6c\x90\x96\xca\x61\x40\xed\x78\x34\x9f\x79\x39\xdb\x71\xdf\xdd\x0d\x4c\x48\x6a\xc3\x21\x66\x25\x89\x71\x78\x31\x46\x2d\x5e\x56\xa7\x73\x14\x47\x18\xa5\x79\xc5\x4a\xee\x2b\xdb\xd0\xc9\xb6\x9d\xee\x49\xfd\x55\x14\x91\x78\x4c\x48\x14\x39\x96\xaa\x9e\x60\x3b\x24\x97\x5f\xea\x02\x7a\x45\x00\x7a\xb0\xee\xa4\x47\xd3\x31\x4f\xb2\xa2\x62\x26\x4a\xd8\x6e\x97\x88\x2e\x63\x19\x0e\x48\x13\x68\x21\xba\x24\xc0\xcb\xfd\x35\x04\x23\xb0\x72\xba\x66\xb0\xf1\x40\xac\x33\x6d\xdc\xa1\xa5\x2a\x43\x46\x52\x6c\x58\x6e\xbc\xca\xe3\x2b\x59\x55\x67\x5c\x05\xa6\x4f\xce\x09\x0c\xa5\x31\xb4\xcb\x26\xb4\x87\xec\xb8\xd1\x6a\xf2\xf0\xee\xd9\x00\x35\xd1\x5d\x30\x8d\x3c\xce\x10\x23\xed\x5b\x2e\x35\x41\xc7\x54\x98\x9c\x74\x00\x5f\x2d\xd5\x97\xb3\xfc\x67\x09\x02\x23\x1d\x59\xbe\xb6\x0c\x0c\x92\x77\x2d\xcf\x1f\xa5\xb2\x49\xd3\xd9\x6c\xaa\xbb\x51\xa3\x9d\x85\x51\x14\x05\xb2\x62\xf3\x82\x9f\x6e\x63\xee\xa6\xbc\xb2\xd2\xaf\x68\x68\xf1\x6d\x08\x72\x96\x70\xff\xea\xed\x95\x40\x53\x17\x56\x12\xbf\xa5\x59\xcd\x62\xa5\x91\x6a\x6f\xb6\xc9\xa1\xf8\x64\xa3\x03\x8d\xb7\x42\xfa\x1c\xdf\x74\x5d\x73\x37\xb0\x50\xf6\xf7\x08\xe7\x9d\x82\x6d\x5e\x4f\x7d\x54\xdd\x08\xd2\xaa\x7d\x97\xf5\x80\x06\x4d\xcd\x26\x24\x9e\xb0\xff\x3a\x9f\x96\x8d\xaf\x41\x21\x16\xa4\x9e\x02\x4d\x02\xf9\x63\xd6\x26\xb0\x7d\x61\xdd\xcd\x36\x81\x8d\x41\x82\x58\x8a\xbe\xf3\xe3\xe3\x38\x23\x7d\xd5\xb7\xcd\x8b\xee\xca\x46\x2b\x35\x83\x5f\xc8\x35\xc9\x18\x2d\x4f\x97\x0b\x82\x37\xca\x21\x4f\xb3\x73\x20\x27\x29\x33\x20\x5a\xda\x09\x52\x31\x7e\xbe\x6c\xf1\xef\x61\x23\x5e\x3f\x68\x42\x0d\x9d\x56\xe2\x4b\x2b\x8b\x7d\xf6\x44\x1d\x6c\xa5\x77\x12\x5b\xcb\xa4\x95\x7b\xe1\x70\x84\x75\x64\x2e\xc6\x5b\xcc\xcb\x9a\x9d\xbd\xb1\x38\x8d\xbb\x10\xa4\xb0\x09\x21\x57\xea\xbd\x68\x9f\x87\x1c\x1f\x87\xd3\x69\x0a\x6f\xa4\x5d\x2b\xd7\x95\xaa\x5d\x5b\x6b\xa2\xb4\x6c\xa9\x75\xa5\x2b\x0c\x75\x99\x99\x47\x81\x78\x8a\x42\x9d\x35\xbb\xf9\x74\x0a\x91\x64\xb1\x12\x47\xce\x89\x60\x9c\x3a\x20\x34\xf7\x71\x5c\x38\x5f\x19\x8c\x9b\xe7\xae\xbf\x47\x59\x8c\x3f\x0e\xa1\xc8\x4a\x7d\x69\xc0\xbb\xf8\xd7\x0d\x4b\xd2\x79\x9a\x78\x9f\xe8\x42\x3e\xe6\xde\x67\x29\xad\x58\x65\xc1\xb3\x34\x5f\xf9\xf0\x2e\x0f\x71\x9c\x82\x07\x39\x57\x75\x9a\x36\x01\x42\xc9\x68\xbf\x2c\xd9\x3c\x16\xca\x75\xbe\xa1\xc9\x0a\x07\x69\x70\x80\xac\x54\xc2\x1d\xea\x42\x03\x42\x12\x61\x19\xcf\x55\x52\xa6\x1b\xf8\xce\x2a\x17\x95\xf4\x2b\xb8\x16\x4b\x2f\x8e\xbd\x16\xe1\x0e\xb4\x34\x24\x23\x54\x55\xbe\xc1\x1a\x57\xde\x73\xec\xc1\xa5\xe9\xb6\xf1\xcd\x7b\x50\xf8\x09\x4e\x45\xae\x54\x4f\x85\x9c\x54\x95\x8e\x57\x56\x11\xf5\x62\x6f\x8f\x71\x43\x7d\xc0\x33\xf9\x1a\x14\xe0\x93\xf3\xc5\x64\x8e\x1a\x9c\x54\x94\x1d\x8e\x42\x9d\x00\xec\xd6\xd4\xca\x71\x84\xfc\x09\xc0\x46\x74\x72\x22\x1d\xb4\x38\xa5\xda\xca\x64\x56\x24\x22\xc2\xa0\xa1\xfd\xe6\xc3\x4f\x3f\x7c\xfa\xed\xe3\x8f\x70\x76\x04\x07\x30\x39\x4c\x86\xf6\xce\xfa\xb6\xb0\x7e\x91\x36\x1a\xce\x61\x48\x75\x94\x19\x14\x67\x08\xab\x19\x83\x9f\xe8\xc9\x50\x86\x7b\x90\x9e\xf8\x05\x34\xbc\xbb\xb9\x31\x12\xd4\x43\x91\xf8\x0d\x32\xc9\xa9\x08\xa4\xd7\xfc\x58\x03\x2d\x42\x2c\xcf\xe8\x4d\xf2\xdc\x9a\x97\x56\x1d\x55\x7a\x8d\x8f\x2c\x6b\xa4\x0e\x07\xef\x07\x6e\x46\xf2\xab\xa9\x55\x4c\x4d\x28\xe7\xcb\x4a\x9d\x8f\x95\x9b\x43\x11\x1e\xd4\x99\x08\xf1\x8e\x47\x1f\x60\xcf\x77\x78\x41\x92\xf2\x2d\x8c\xab\x48\x1a\xf1\x02\xff\x77\x50\x65\x69\xc2\xcc\xc3\xd1\xf2\xfe\x11\xa0\xe1\xed\x50\xca\xcb\xfc\x73\xcd\xca\x27\xb1\x8c\xec\x09\xe0\xbf\x2f\x74\xbb\xc0\xe1\x0b\x7f\xb5\x32\x91\x4c\xce\x21\xd2\x29\x2a\xa3\xa5\x2d\x24\x61\xa9\x9a\xdf\x5c\xb0\x73\xd4\xf3\xe4\x58\x6a\x8c\xc9\xb9\xbd\x2d\x26\x90\x2f\x18\x1d\x04\xf7\xea\x60\x84\xc1\xbf\x1c\xcd\xdf\x01\x00\x00\xff\xff\x1f\xe9\xc4\x35\x3a\x12\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 4666, mode: os.FileMode(420), modTime: time.Unix(1438891984, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\x4d\x8b\xd4\x40\x10\x3d\x27\xbf\xa2\xc8\x29\x81\xec\xb2\x78\x14\xe6\xa6\xe0\x61\xf5\xb0\xab\x27\x11\xe9\x49\x2a\xa6\xa1\xa7\x3b\x54\x57\x36\x3b\x88\xfe\x76\xab\x3b\x9f\xa3\x13\xd1\xbd\x14\x93\xae\xf7\xea\xbd\x7a\x53\x37\x37\xf0\x5e\xd7\xb5\xc1\x41\x11\x42\x8b\xa6\x43\xf2\x25\x58\xc7\x40\xa8\x8c\x39\x43\xef\xb1\xe9\x0d\x0c\x9a\x5b\x50\xf6\xcc\xad\xb6\xdf\xe0\xd8\x33\x70\x8b\xe0\x91\x9e\x90\x40\x5b\xcd\xe0\x2b\xd2\x1d\xa7\x4d\x6f\x2b\xd6\xce\xc2\x69\xb8\xb5\x38\xe4\x8d\x2d\xe1\xa8\x6d\x2d\xb4\x30\x18\x07\xcf\x8a\xb1\x48\x13\xe3\x2a\x65\xa0\x72\x35\xc2\x01\xb2\x2c\x4d\x74\x03\x7c\xee\x50\x18\x05\x1c\xe4\x69\x9e\x94\x05\x29\x9b\x26\xc9\x84\xf5\x4c\x32\xec\xb6\xee\x4f\x5d\xc0\xa6\x09\x1a\x8f\xbf\x93\x47\xd0\x42\x0d\x2e\x90\x48\xd8\xc6\xa9\x7a\x6c\xe6\x61\x9e\xd0\x83\x70\x58\x38\xf4\x27\xf8\xae\x54\xd4\x0a\x00\x01\x3b\xca\xa5\xc6\x47\x5b\xa7\x63\x19\x97\xa2\xf9\x87\xf4\xe3\x5e\xf3\xda\xf3\xfc\xd9\xed\x1c\xcc\xe8\x99\xd5\xd1\xe0\x62\x39\xa1\xd9\xb2\x24\xf9\xe6\xfe\xe1\xeb\x87\xc7\xe8\xb8\x04\xa6\x1e\xd7\x50\xb7\xae\x76\x29\x8d\x12\x44\x09\xdf\x3f\x67\x3e\xfb\x72\xc8\x9e\xb2\x1f\xab\xef\x91\xfb\x22\x4b\x0f\x9f\xfe\xdf\xd3\xca\xf9\x9b\xa9\x50\xc4\x52\x60\xfe\x3c\x80\xd5\x66\xf6\xb0\x0d\x3e\xa2\x08\xb9\x27\x2b\x99\x87\xaf\xed\xf5\x61\xd5\xba\x49\x89\xd0\x77\xcb\xc9\x85\x0f\xb1\xc3\xce\xf6\xa7\x23\x52\x1e\x9b\xe0\x08\x5e\xdd\xdd\xad\x57\x18\x8f\xe3\xda\x29\x4d\x7a\x22\xf0\x36\x08\x04\x76\x09\xd3\x29\x6d\x2f\x71\x1d\x70\x19\xe2\x2e\xff\x35\xc9\x06\xe2\xa7\x28\x96\x3f\x65\xc5\x86\x65\x3e\xe2\x33\x4f\x78\x76\xdb\x1b\x9e\xa2\xb8\x16\x40\xe4\xb0\x94\x25\x84\x4b\xfd\xd8\xcf\xaf\x66\x51\x88\x8c\x74\x8b\x3f\xe6\xfa\xb3\x65\xf5\xdc\x9a\xbd\xb9\x8f\xb1\xff\xee\xfe\x5f\xe6\xfe\x0a\x00\x00\xff\xff\xef\x53\x03\x2d\x81\x04\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 1153, mode: os.FileMode(420), modTime: time.Unix(1439570518, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua": mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

