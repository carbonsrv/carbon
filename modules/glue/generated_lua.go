package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x5f\x73\xe2\x36\x10\x7f\x0e\x9f\xc2\xa7\x94\x44\x6e\x8d\x93\xdc\x43\x67\x4a\xe2\x74\x6e\x7a\x7d\x6e\xa7\xbd\x97\x16\x38\xaa\x18\x01\x1e\x8c\xcd\xd9\x32\x43\x4a\xc9\x67\xef\xae\xfe\x59\x76\x30\x47\x67\x7a\x2f\xf7\x12\x22\xed\xee\x4f\xbb\xbf\x5d\xed\xca\x69\x1e\xb3\xd4\x5b\x8a\x75\x3a\xe5\x65\xcc\x36\x3c\xda\x8f\xc8\x03\x99\x44\xe4\x2a\x15\xf7\x24\x18\x91\x47\xb9\x58\xa8\xc5\x95\x5c\xb0\xf5\xe6\x9e\x1c\x7a\x3d\x65\x5c\x15\x89\xb1\x9d\x57\x59\x2c\x92\x3c\xa3\xcc\xef\x5d\x14\x5c\x54\x45\xe6\x51\xd2\xef\xf7\x6f\xdf\xee\x88\x3f\x9c\xe7\xc5\x9a\x09\xca\x86\x4f\xcf\x82\x53\xdf\xef\xf1\x6c\xe6\xa2\x54\xd9\x09\x9c\x52\x14\x49\xb6\x08\xe3\x25\x2b\xa8\xc8\xb3\x6a\xfd\xc4\x0b\xca\x82\xbb\xef\x0d\x8e\xf1\xbf\x77\x81\xe1\xd4\x18\x60\x08\x28\xd6\x1d\x58\x0e\x17\x65\xf5\x44\xc9\xe8\xe1\xf1\x6a\x42\x02\x27\x78\x80\xba\x00\xac\xa0\x77\x51\x15\x67\x21\x7c\x64\x83\xbf\xdf\x0d\xfe\xbc\x1d\xfc\x30\x0d\x5f\x06\x00\x56\x93\x51\x63\x95\x4b\x9e\x9e\x85\xd6\x2f\xff\x7a\x79\x73\xf9\xcd\xd5\xb7\xd4\xff\x67\x3c\xbe\x1e\x93\xfb\x87\xc7\x1f\xf7\x87\x51\x7f\xf2\x11\xa0\xc9\x78\xdc\xbf\x23\x1a\xb6\x07\xf4\x5b\xba\xf6\xe7\xfa\xfb\x1d\xa0\x78\x90\x08\xb5\xea\xf7\x69\x7f\xd7\xdf\xf9\xca\x6b\x83\xe6\x1c\x30\x18\x78\x82\x2d\xbc\x35\x17\x4c\xb0\xa7\x94\xeb\x54\xc1\x1e\x6c\x2d\xf1\xd8\x02\x34\x79\xe1\x9c\xcc\xd3\x39\x1e\xad\x14\xe3\x3c\x13\x3c\x13\xb0\x4e\xe6\x1e\x8a\x42\xbd\xe3\x89\x25\xcf\x60\xfb\x42\xaf\xa3\xfd\x01\x57\x50\x1f\x5e\x12\x6c\xbd\x24\xf3\x92\x0d\x4b\x8a\x92\xba\x46\xbe\x37\xcb\x51\x0b\xc1\xc4\xf3\x86\xd3\xad\x1f\x45\x44\x95\x05\xb1\x88\x16\x73\x94\x4c\xa2\xad\xdc\xe1\x69\xc9\x1b\x36\xaa\x78\x3a\x6c\x44\xae\x20\x41\xd5\x5a\xbf\x06\x1e\xaa\xc8\xa9\xd6\x01\xbe\xec\x8f\xfa\xab\x18\xc8\x37\x48\x4b\xe9\x30\xa0\x77\x3c\x96\xcd\xbc\x8c\xef\x04\x75\x77\x7d\xeb\x92\xde\x70\x88\x59\x29\x62\x1c\x5e\xac\x51\x8b\x97\xd5\xf1\x18\x65\x0a\xc3\x24\x2b\x79\x21\xa8\xb6\x0d\x9c\x68\xdb\xe1\x1e\xd5\x5f\x85\x21\x89\xc6\x84\x84\xa1\x63\xa9\xeb\x09\xb6\x03\x72\xf5\xa9\xca\xa1\x57\xf8\xa0\x07\xeb\x4e\x7a\x0c\x1d\xf3\x38\xcd\x4b\x6e\xbd\x84\xed\x76\x89\x98\x32\x56\xee\x80\x34\x86\x16\x62\x4a\x02\x4e\x79\xb8\x01\x67\x24\x56\xc6\xd6\x1c\x36\x1e\x49\x7d\x98\x31\xee\xd0\xd2\x95\xa1\x3c\xc9\x37\x3c\xb3\xa7\xaa\xf4\x15\xbc\xac\x52\xa1\x1d\x33\x99\x73\x1c\x43\x69\x04\xed\xb2\x09\xed\x21\x3b\xae\xb7\x86\x3c\xbc\x7b\xb5\x83\x86\xe8\x2e\x98\x46\x1c\x27\x88\x51\xf6\xad\x23\x0d\x41\xaf\xa9\xb0\x31\x19\x07\xbe\x58\xa8\x9f\x8f\xf2\xbf\x05\x08\x8c\x74\x44\x79\x6e\x19\x58\x24\xef\x46\xe5\x1f\xa5\xaa\x49\xb3\xd9\x6c\x6a\xba\x51\xa3\x9d\x05\x61\x18\xfa\xaa\x62\xb3\x5c\x1c\x6f\x63\xee\xa6\xba\xb2\xea\x5c\xd9\xd0\xa2\xbb\x00\xe4\x3c\x16\xf4\xfa\xf2\x5a\xa2\xe9\x0b\xab\x88\xdf\xb2\xb4\xe2\x91\xd6\x48\xcc\x69\x75\x93\x43\xf1\xd1\x46\x07\x1a\x97\x52\xfa\x12\xdd\x76\x5d\x73\xd7\xb1\x40\xf5\xf7\x10\xe7\x9d\x86\x6d\x5e\x4f\x93\xaa\x6e\x04\x65\xd5\xbe\xcb\x66\x40\x83\xa6\x61\x13\x02\x8f\xf9\xd7\xce\x67\xcd\xc6\x97\xa0\x10\x0b\xd2\x4c\x81\x26\x81\xe2\x29\x6d\x13\xd8\xbe\xb0\xee\x66\x9b\xc0\xc6\x20\x41\x2c\x4d\xdf\xe9\xf1\xf1\x3a\x22\x73\xd5\xb7\xcd\x8b\xee\xca\x46\x2b\x3d\x83\x3f\x13\x6b\x9c\x72\x56\x1c\x2f\x17\x04\x6f\x94\x43\x96\xa4\xa7\x40\x8e\x52\x66\x41\x8c\xb4\x13\xa4\xe4\xe2\x74\xd9\xe2\xff\xc3\x86\xbf\xd4\x6f\x42\x0d\x9d\x56\x42\x95\x55\x8d\x7d\x32\xa3\x0e\xb6\xd6\x3b\x8a\x6d\x64\xca\xca\xbd\x70\x38\xc2\x3a\x22\x97\xe3\x2d\x12\x45\xc5\x4f\xde\x58\x9c\xc6\x5d\x08\x4a\xd8\x84\x50\x2b\xfd\x5e\xac\x9f\x87\x02\x1f\x87\xd3\x69\x02\x6f\xa4\x5d\x2b\xd6\x95\xae\xdd\xba\xd6\x64\x69\xd5\xa5\xd6\x15\xae\x34\x34\x65\x66\x1f\x05\xf2\x29\x0a\x75\xd6\xec\xe6\xd3\x29\x78\x92\x46\x5a\x1c\x3a\x19\x41\x3f\x8d\x43\x68\x4e\x71\x5c\x38\x5f\x19\x5c\xd8\xe7\x2e\xdd\xa3\x2c\xc2\x3f\x87\x40\x46\xa5\xbf\x34\xe0\x5d\xfc\xfb\x86\xc7\xc9\x3c\x89\xbd\x0f\x6c\xa1\x1e\x73\xef\xd2\x84\x95\xbc\xac\xc1\xd3\x24\x5b\x51\x78\x97\x07\x38\x4e\xe1\x04\x35\x57\x4d\x98\x75\x00\x84\x91\xd1\x7e\x59\xf0\x79\x24\x95\xab\x6c\xc3\xe2\x15\x0e\x52\xff\x00\x51\xe9\x80\x3b\xd4\xa5\x06\xb8\x24\xdd\x2a\xe3\x22\x81\x03\x22\xa9\xa5\x16\xc4\x09\x36\x2e\x4b\xca\x8a\x45\x09\xae\xa8\x44\x31\x50\xdd\x63\x1a\x20\x05\xf0\x12\xbd\x01\x05\xf8\xaa\xb3\xb9\x91\xba\x5e\x14\x79\xad\x04\xbd\xea\x21\x4a\x51\x35\x11\x06\xa9\x00\xd8\xad\x93\x8e\x9e\xeb\x7c\x29\x9e\x01\x6a\xc4\x26\xca\x65\xeb\xdc\x2c\x8f\xe5\xa1\x7e\x43\xfb\xcd\xfb\x5f\x7e\xfa\xf0\xc7\xaf\x3f\x43\xc4\x04\xc7\x16\x39\x4c\x86\x75\xa5\x53\x95\x0e\xc8\xc6\x6f\xca\xc4\xa0\x39\x31\xeb\x6b\x38\x83\x8c\x06\xb0\x9a\x71\xf8\x8b\x07\x59\x12\x70\x0f\x1c\x96\x3f\x10\xd8\xdb\xdb\x5b\x2b\x41\x3d\x14\xc9\x5f\x90\x29\x96\xa4\x1f\xbd\xe6\x17\x0e\x68\x11\x52\x33\x87\xa7\x29\xe6\x5a\x43\xa6\x56\x47\x95\x5e\xe3\xcb\xa4\x36\xd2\x74\x63\x51\xe1\x66\xa8\x3e\x35\xbc\x97\xc8\x83\xb6\x75\x1c\xca\xf9\x1c\xd1\x05\x53\xcb\xed\x43\x5d\x9e\xa0\x53\x22\xc5\x3b\x11\xbe\x87\x3d\xea\xf0\x82\x24\x65\x5b\xe8\xf1\xa1\x32\x12\x39\x7e\x70\x97\x69\x12\x73\xfb\xda\xf2\x5b\xb9\xc3\xcf\x7a\x73\x8d\x70\x28\xc1\x7f\x2d\x67\x15\x59\x73\x70\x66\x8a\xca\x68\x49\xad\x5b\xd2\x52\x37\x85\xb9\x24\xe0\x55\x2f\x50\xed\xba\x31\x3e\xe6\x75\xe1\x5b\x47\x3e\x55\xbc\x78\xde\xb2\xe2\x6c\x67\xa4\xc1\xff\xec\xcd\xbf\x01\x00\x00\xff\xff\x6c\xeb\x0b\xbe\x52\x11\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 4434, mode: os.FileMode(420), modTime: time.Unix(1438809755, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xcb\x8e\xd4\x40\x0c\x3c\x27\x5f\x61\xe5\x94\x48\xd9\xd5\x8a\x23\xd2\xdc\xe0\x06\x1c\x16\x38\x21\x84\xf2\x70\x48\x4b\x3d\xdd\x91\xdb\xd9\x30\x42\xf0\xed\xd8\x9d\xe7\xa2\x19\x24\xf6\x62\x4d\xda\x55\xae\x72\x8d\xef\xee\xe0\xbd\x69\x5b\x8b\x53\x45\x08\x3d\xda\x01\x29\x94\xe0\x3c\x03\x61\x65\xed\x05\xc6\x80\xdd\x68\x61\x32\xdc\x43\xe5\x2e\xdc\x1b\xf7\x1d\xea\x91\x81\x7b\x84\x80\xf4\x84\x04\xc6\x19\x86\xd0\x90\x19\x38\xed\x46\xd7\xb0\xf1\x0e\xce\xd3\xbd\xc3\x29\xef\x5c\x09\xb5\x71\xad\xd0\x74\x30\x4e\x81\x2b\xc6\x22\x4d\xac\x6f\x2a\x0b\x8d\x6f\x11\x4e\x90\x65\x69\x62\x3a\xe0\xcb\x80\xc2\x28\xe0\x24\x4f\xeb\xa4\x4c\xa5\x5c\x9a\x24\x0b\x36\x30\xc9\xb0\xfb\x76\x3c\x0f\x8a\x4d\x13\xb4\x01\xff\x26\xcf\xa0\x8d\xaa\x2e\x90\x48\xd8\xd6\x57\xed\xdc\xcc\x75\x9e\xd0\x55\x58\x17\xd6\xfe\x02\xbf\x29\x15\xb5\x14\x20\x60\x4f\xb9\xd4\xf8\xe8\xda\x74\x2e\xf3\x52\xb4\xfe\x90\x7e\xdc\x6b\x5d\x7b\x9d\xbf\xba\x5d\x83\x99\x3d\x73\x55\x5b\xdc\x2c\x27\xb4\x5a\x96\x24\xdf\xbc\x7b\xfc\xf6\xe1\x63\x74\x5c\x02\xd3\x88\x7b\xa8\x47\x57\x37\x29\x5d\x25\x88\x12\x7e\x7e\xc9\x42\xf6\xf5\x94\x3d\x65\xbf\x76\xdf\x33\xf7\x45\x96\x1e\x3f\xff\xbf\xa7\x9d\xf3\x2f\x53\x5a\xc4\x92\x32\x7f\x9f\xc0\x19\xbb\x7a\x38\x06\x1f\x51\x84\x3c\x92\x93\xcc\xf5\xeb\x78\x7d\xd8\xf4\x7e\x51\x22\x0c\xc3\x76\x72\xfa\x21\x76\xd8\xbb\xf1\x5c\x23\xe5\xb1\x09\x9e\xe0\xd5\xc3\xc3\x7e\x85\xf1\x38\xae\x9d\xd2\xa2\x27\x02\x6f\x55\x40\xd9\x25\x2c\xa7\x74\xbc\xc4\x7d\xc0\xf3\x10\x6f\xf2\x5f\x93\x6c\x20\x7e\x8a\x62\xfb\x53\x76\xac\x2e\xf3\x09\x7f\xf0\x82\x67\x7f\xbc\xe1\x25\x8a\x6b\x01\x44\x0e\x4b\xd9\x42\x78\xae\x1f\xfb\xf9\xd5\x2c\x0a\x91\x91\x6e\x11\xe7\xfe\x09\x00\x00\xff\xff\x04\x22\x86\x71\x29\x04\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 1065, mode: os.FileMode(420), modTime: time.Unix(1432300032, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua": mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

