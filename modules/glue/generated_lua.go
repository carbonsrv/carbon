package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _confglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x53\xc1\x8e\xd3\x30\x10\x3d\x27\x5f\x31\xca\xa9\x91\xda\xd5\xc2\x11\xa9\x37\xb8\x01\x87\x5d\x10\x07\x84\x50\x9a\x4c\x89\x25\xd7\x8e\xc6\x93\xcd\x56\x08\xbe\x9d\xb1\x13\x27\xd9\x92\xac\x0a\xe2\xc4\xc5\x4a\x3d\xf3\xe6\x3d\xbf\x79\xdd\xed\xe0\x9d\xaa\x2a\x8d\x5d\x41\x08\x35\xea\x06\xc9\x6d\xc1\x58\x06\xc2\x42\xeb\x33\xb4\x0e\x8f\xad\x86\x4e\x71\x0d\x85\x39\x73\xad\xcc\x37\x38\xb4\x0c\x5c\x23\x38\xa4\x07\x24\x50\x46\x31\xb8\x92\x54\xc3\xe9\xb1\x35\x25\x2b\x6b\xe0\xd4\xdd\x18\xec\x36\x47\xb3\x85\x83\x32\x95\xc0\x64\xb0\x32\x8e\x0b\x53\xa2\xe7\xc0\x4e\xbe\x19\xf3\x34\xd1\xb6\x2c\x34\x94\xb6\x42\xd8\x43\x96\xc5\x8b\xb1\x59\x6e\xa7\x6f\x4b\xb0\x7b\x91\x26\xea\x08\x7c\x6e\x50\xe6\xe7\xb0\x17\x54\xe4\xcd\xbc\x30\x93\x26\xc9\x30\xce\x31\x09\xf5\x4d\xd5\x9e\x1a\xdf\x9b\x26\xa8\x1d\x5e\x82\xfb\xa6\x11\xea\x35\x23\x91\xa0\xb5\x2d\xaa\xbe\xb8\xf1\xf3\x04\xee\x89\xbd\x3d\xbe\x3e\xb4\xaf\x52\x05\x2e\xdf\x20\xcd\x96\x36\x72\x86\x4b\x53\xa5\xfd\xd1\x3f\x93\xe2\x87\xd4\xc3\xbb\xa2\x33\x71\x7e\x54\x1b\x6d\xec\x35\x73\x71\xd0\x38\x4a\x4e\x28\x4a\x16\xdf\x5f\xbf\xbd\xfb\xfa\xfe\x3e\x28\xde\x02\x53\x8b\xd3\x0a\xe6\xaa\x56\x21\xc7\x42\x3a\xb6\xf0\xfd\x73\xe6\xb2\x2f\xfb\xec\x21\xfb\x31\xe9\xee\xb1\x7f\x25\xe9\xee\x63\x24\x98\xc5\xe0\x7a\x79\x8b\xf0\xe7\xa4\xfa\x43\x84\xfa\x21\x3f\xf7\x60\x94\x8e\xca\xe6\xeb\x08\x5d\x84\xdc\x92\x91\x4d\xf8\x5f\xf3\x04\x77\x6e\x2d\xc0\x4b\xb1\xfd\x5f\x33\xf9\x07\x7f\xc7\xe7\x02\x71\xb1\xd0\x4f\xf7\x57\x26\x62\x50\x7c\x25\x7c\x31\x11\xff\x22\x0b\x58\xd6\x76\xa0\x23\x74\xcd\x18\x00\xff\x43\x54\xb1\x35\xed\xe9\x80\xb4\x09\x45\xef\xcb\xcb\xdb\xdb\xc9\x98\xb0\xaa\xa5\xc5\x0e\x7c\x42\xf0\xc6\x13\x78\xf4\x16\x86\xc5\xce\x73\x31\x0d\xb8\x70\x75\x0d\xff\x8a\xe4\x05\xa2\x27\x9f\x59\x38\xf6\xfa\xc7\x7c\xc0\x47\x1e\xfa\xd9\xce\x13\x35\x58\xb1\x64\x40\xc0\xb0\x1c\xa3\x09\x4f\xf9\x43\x7d\xb3\xe8\x45\x2e\x34\x52\xcd\x7f\x9b\xeb\xce\x86\x8b\xc7\x5a\xaf\xcd\x0d\xc6\xaf\xce\x7c\x82\xce\xfb\xe9\xbf\x02\x00\x00\xff\xff\xc2\x92\x0b\xda\xd7\x06\x00\x00")

func confglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_confglue_lua,
		"ConfGlue.lua",
	)
}

func confglue_lua() (*asset, error) {
	bytes, err := confglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "ConfGlue.lua", size: 1751, mode: os.FileMode(420), modTime: time.Unix(1440162650, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x4d\x73\xdb\x36\x13\x3e\x5b\xbf\x02\x41\x5e\x39\xe0\x5b\x9a\x49\x7a\xe8\x4c\x15\xd3\x9d\x4c\xd3\x5b\x67\xda\x49\xd2\xe9\xb4\xb2\xa3\x42\x14\x24\x71\x44\x81\x2c\x08\x2a\x72\x55\xf9\xb7\x77\x41\x7c\x10\xa4\x48\xd9\x3d\xe4\xd2\x8b\x62\x00\xbb\xcf\xee\x3e\xbb\xd8\x05\x93\xe5\x09\xcd\xd0\x5a\x6e\xb3\x19\x2b\x13\x5a\xb0\xf8\x30\xc5\xd7\xf8\x2e\xc6\x97\x99\x7c\x83\xc3\x29\xbe\xa9\x17\x2b\xbd\xb8\xac\x17\x74\x5b\xbc\xc1\xc7\xd1\x48\x2b\x57\x22\xb5\xba\xcb\x8a\x27\x32\xcd\x39\xa1\xc1\xe8\x42\x30\x59\x09\x8e\x08\x1e\x8f\xc7\xaf\xbe\xde\xe3\x60\xb2\xcc\xc5\x96\x4a\x42\x27\xf3\x7b\xc9\x48\x10\x8c\x18\x5f\xf8\x28\x15\x3f\x83\x53\x4a\x91\xf2\x55\x94\xac\xa9\x20\x32\xe7\xd5\x76\xce\x04\xa1\xe1\xeb\x6f\x2c\x8e\xf5\x7f\x74\xa1\xc2\x69\x30\x40\x11\x50\x9c\x3b\xb0\x9c\xac\xca\x6a\x4e\xf0\xf4\xfa\xe6\xf2\x0e\x87\x5e\xf0\x00\x75\x01\x58\xe1\xe8\xa2\x12\x4f\x42\xf8\x44\xaf\xfe\x7a\x7b\xf5\xfb\xab\xab\x6f\x67\xd1\xc3\x15\x80\x35\x64\x34\x58\xe5\x9a\x65\x4f\x42\x1b\x97\x7f\x3c\x3c\x7b\xfe\xbf\xcb\xff\x93\xe0\xef\xdb\xdb\x17\xb7\xf8\xcd\xf5\xcd\x77\x87\xe3\x74\x7c\xf7\x09\xa0\xf1\xed\xed\xf8\x35\x36\xb0\x23\xa0\xdf\xd1\x75\x78\xaa\xbf\x5f\x01\x0a\x82\x44\xe8\xd5\x78\x4c\xc6\xfb\xf1\x3e\xd0\x5e\x5b\x34\xcf\xc0\xd5\x15\x92\x74\x85\xb6\x4c\x52\x49\xe7\x19\x33\xa9\x82\x3d\xd8\x5a\x2b\xb3\x02\x24\x99\xf0\x2c\xb3\x6c\xa9\x4c\x6b\xc1\x24\xe7\x92\x71\x09\xeb\x74\x89\xd4\x51\x64\x76\x90\x5c\x33\x0e\xdb\x17\x66\x1d\x1f\x8e\x6a\x05\xf5\x81\xd2\x70\x87\x52\x8e\xd2\x82\xa6\xa2\x24\xbe\x52\x80\x16\xb9\x92\x52\x60\xf2\xbe\x60\x64\x17\xc4\x31\xd6\x65\x81\x1d\xa2\xc3\x9c\xa6\x77\xf1\xae\xde\x61\x59\xc9\x5a\x3a\xba\x78\x06\x74\x64\xae\x21\x41\xd4\x69\x9f\x02\x4f\x74\xe4\xc4\xc8\x00\x5f\xee\x1f\xfd\xab\x19\xc8\x0b\x45\x4b\xe9\x31\x60\x76\x10\xe5\x0b\xc4\xd9\x5e\x12\x7f\x37\x70\x2e\x99\x0d\x8f\x98\x8d\x26\xc6\xe3\xc5\x29\x75\x78\xd9\xf4\xc7\x58\xa7\x30\x4a\x79\xc9\x84\x24\x46\x37\xf4\xa2\xed\x86\xdb\x2b\xbf\x89\x22\x1c\xdf\x62\x1c\x45\x9e\xa6\xa9\x27\xd8\x0e\xf1\xe5\x9f\x55\x0e\xbd\x22\x00\x39\x58\x0f\xd2\x63\xe9\x58\x26\x59\x5e\x32\xe7\x25\x6c\x77\x4b\xc4\x96\xb1\x76\x07\x4e\x13\x68\x21\xb6\x24\xc0\xca\xf5\x4b\x70\xa6\xc6\xe2\x74\xcb\x60\xe3\x06\x37\xc6\xac\xf2\x80\x94\xa9\x0c\xed\x49\x5e\x30\xee\xac\xea\xf4\x09\x56\x56\x99\x34\x8e\xd9\xcc\x79\x8e\xa9\xd3\x18\xda\x65\x1b\x1a\x29\x76\x7c\x6f\x2d\x79\xea\xee\x35\x0e\x5a\xa2\x87\x60\x5a\x71\x9c\x21\x46\xeb\x77\x4c\x5a\x82\x4e\xa9\x70\x31\x59\x07\xbe\x58\xa8\x8f\x47\xf9\xef\x02\x04\x46\x06\xa2\x7c\x6a\x19\x38\x24\xf4\x52\xe7\x5f\x9d\xea\x26\x4d\x17\x8b\x99\xed\x46\xad\x76\x16\x46\x51\x14\xe8\x8a\xe5\xb9\xec\x6f\x63\xfe\xa6\xbe\xb2\xda\x6e\xdd\xd0\xe2\xd7\x21\x9c\xb3\x44\x92\x17\xcf\x5f\xd4\x68\xe6\xc2\x6a\xe2\x77\x34\xab\x58\x6c\x24\x52\x6b\xad\x69\x72\xea\xb8\xb7\xd1\x81\xc4\xf3\xfa\xf4\x21\x7e\x35\x74\xcd\x7d\xc7\x42\xdd\xdf\x23\x35\xef\x0c\x6c\xfb\x7a\xda\x54\x0d\x23\x68\xad\xee\x5d\xb6\x03\x1a\x24\x2d\x9b\x10\x78\xc2\xfe\xeb\x7c\x36\x6c\x7c\x09\x0a\x55\x41\xda\x29\xd0\x26\x50\xce\xb3\x2e\x81\xdd\x0b\xeb\x6f\x76\x09\x6c\x0d\x12\x85\x65\xe8\x3b\x3f\x3e\x4e\x23\xb2\x57\x7d\xd7\xbe\xe8\xfe\xd9\x74\x63\x66\xf0\x23\xb1\x26\x19\xa3\xa2\xbf\x5c\x14\x78\xab\x1c\x78\x9a\x9d\x03\xe9\xa5\xcc\x81\xd8\xd3\x41\x90\x92\xc9\xf3\x65\xab\xfe\x9e\xb4\xfc\x25\x41\x1b\x6a\xe2\xb5\x12\xa2\xb5\x1a\xec\xb3\x19\xf5\xb0\x8d\x5c\x2f\xb6\x3d\xd3\x5a\xfe\x85\x53\x23\x6c\x20\xf2\x7a\xbc\xc5\x52\x54\xec\xec\x8d\x55\xd3\x78\x08\x41\x1f\xb6\x21\xf4\xca\xbc\x17\x9b\xe7\xa1\x54\x8f\xc3\xd9\x2c\x85\x37\xd2\xbe\x13\xeb\xc6\xd4\x6e\x53\x6b\x75\x69\x35\xa5\x36\x14\x6e\xad\x68\xcb\xcc\x3d\x0a\xea\xa7\x28\xd4\x59\xbb\x9b\xcf\x66\xe0\x49\x16\x9b\xe3\xc8\xcb\x88\xf2\xd3\x3a\xa4\xd4\x89\x1a\x17\xde\x57\x06\x93\xee\xb9\x4b\x0e\xea\x2c\x56\x3f\xc7\xb0\x8e\xca\x7c\x69\xc0\xbb\xf8\x43\xc1\x92\x74\x99\x26\xe8\x23\x5d\xe9\xc7\xdc\xdb\x2c\xa5\x25\x2b\x1b\xf0\x2c\xe5\x1b\x02\xef\xf2\x50\x8d\x53\xb0\xa0\xe7\xaa\x0d\xb3\x09\x00\x53\x3c\x3d\xac\x05\x5b\xc6\xb5\x70\xc5\x0b\x9a\x6c\xd4\x20\x0d\x8e\x10\x95\x09\x78\x40\xbc\x96\x00\x97\x6a\xb7\x9c\xe5\x32\x11\x69\x01\xdf\x59\x62\x55\x6a\xbb\x35\xd7\xf5\x12\xc5\x31\xea\x10\xee\x41\x6b\x45\x3c\x55\xa2\xc6\x36\x68\xab\x15\x7a\x88\x11\x5c\x9a\x61\x1d\xe2\xde\x83\xb5\x9d\xa0\xcf\x73\x23\xda\xe7\x72\x52\x96\xd6\x5f\x5d\x45\x14\xc5\xe8\xa0\xfc\x86\xfa\x80\x67\xf2\x4b\x10\x80\x4f\xce\x47\x83\x39\x69\x70\x5a\x50\x77\x38\x0a\x75\x02\xb0\x3b\x57\x2b\xa7\x1e\xca\x7b\x00\x9b\xd2\xbb\x9e\x70\x94\x46\x9f\x68\x27\x92\x45\x9e\xd4\x1e\x06\x2d\xe9\x67\xef\x7e\xfa\xfe\xe3\x6f\x3f\xff\x00\xb9\xc3\x6a\x00\xe3\xe3\xdd\xa4\xb9\xb3\xa4\x29\x2c\xf8\x56\x2c\x98\xf0\xca\xa8\xbc\xe7\x92\xee\xd7\x19\x51\x34\x84\x28\xa9\x4a\x99\x6f\x81\x0d\x9d\x59\xb7\xec\x64\x66\x66\xd5\x14\x8e\x51\x75\x21\x35\x18\x27\x69\xea\xd3\xab\x9f\xf1\x2e\x65\xe0\xe3\xaf\x82\x16\x6d\x27\x25\x14\x24\x5d\x44\x65\x41\x3f\x73\xb2\xe4\x21\x9a\xc3\xd5\x07\x53\x4d\x3e\x93\x7c\xc1\x80\x7b\x8c\x9b\x1c\x2e\xb9\xce\xa0\x45\x71\x49\x34\xb2\xe6\x8b\x7f\x51\x6d\x0b\x25\x3b\x6a\x7d\xc8\x59\xe5\xce\x18\x57\xb6\x99\x10\xa0\x9d\xe5\x74\x61\xe3\x05\x3c\x6f\x62\xaa\xf3\xe6\x03\xb4\xdf\x94\x6b\x34\x20\x9c\x0b\x02\xbf\x81\xd7\x61\x6c\x50\xc2\xfe\x01\xe7\x4d\x5c\x2e\xf6\x9e\xfa\xd4\xbe\x6d\x3f\x47\xef\x7e\x7c\x3f\x7b\xff\xcb\x87\xda\xb7\xb0\x6e\xa3\x2d\xd2\x8c\xf9\x01\xf1\x25\x85\xe3\x10\x1d\xa6\xb8\x54\xff\x21\xb3\xc3\x47\x5b\xa0\xe0\x83\xd2\xe9\xbd\xad\x46\xcb\x8f\xa8\x55\xd4\xaa\x95\xab\x8d\x7f\x02\x00\x00\xff\xff\x1e\x05\x18\xce\x14\x12\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 4628, mode: os.FileMode(420), modTime: time.Unix(1447645082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x51\xbb\x6e\xc3\x30\x0c\x9c\xad\xaf\x20\x3c\xc9\x40\x93\x06\x1d\x0b\x64\xeb\x17\x74\xe8\x5a\xa8\x36\xd5\x18\x90\xa9\x54\xa6\x8b\x64\xe9\xb7\x97\xa2\x6a\xbb\xaf\x21\x43\x06\x5b\x12\x79\x77\x3a\x9e\x36\x1b\x78\x44\x9e\x12\x81\x9f\xa8\xe5\x3e\x92\x99\x37\xd0\x46\x62\x24\xb6\x9d\x63\x77\x23\xa7\x0e\xe5\xcf\xe7\x23\x36\xa6\x0a\xb1\x75\x41\x6b\xb0\x2f\x4b\x4c\x70\xb7\xdb\x2d\x9d\x8c\xcb\x2d\x5d\xa5\x57\x33\x9e\xf8\xf6\xc0\x43\xa8\x57\xb6\xea\x0b\xaa\x96\x5a\xef\x21\x63\xf5\xb6\x06\xf6\x52\x1c\x39\xf5\xf4\x5a\x03\x1f\x90\x4c\x55\xad\xf0\x0c\x31\x15\x86\x11\xff\x92\xd8\xbd\x04\xac\xc1\x51\xa7\xb0\x6d\x42\xea\x30\xc1\xc7\x1e\xa8\x0f\xff\x4b\xdd\x17\x8c\x6d\x8a\xe6\x8f\x3e\xc7\xe2\xa2\xdc\x20\x00\xea\x4c\x69\x9f\x78\xfb\x20\x35\xfb\x2d\x97\x1c\x12\xbd\x63\xe2\x6d\x21\x71\x6c\x0f\x2e\x8d\xa1\x6f\xd1\x7e\x49\x36\x8d\xc9\x12\x46\x72\x7f\x92\x96\xfa\x1c\x79\xf2\x1e\x7c\x8a\x03\xcc\xca\xeb\x23\x1c\x5d\x72\x83\x25\x37\xe4\xd4\x65\xdc\xbc\xfb\x35\x4d\x49\xd3\x8b\xdb\x67\x45\x67\xae\x5d\x8c\x2b\x55\xb8\x99\xec\x35\xa2\x25\xd1\x2a\x95\xa7\x17\x2d\x39\xe9\x68\x73\xc9\x97\x51\xf3\xa7\x9a\xa3\xa8\xeb\x66\x75\xe6\x63\xba\xdc\x58\x06\x5f\xd9\xd7\x62\xe4\x6d\xc2\x74\xbe\xd8\x89\xa2\xaf\x6c\xe5\x33\x00\x00\xff\xff\x39\xf6\x47\xc5\x46\x03\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 838, mode: os.FileMode(420), modTime: time.Unix(1440162598, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ConfGlue.lua":  confglue_lua,
	"MainGlue.lua":  mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"ConfGlue.lua":  &_bintree_t{confglue_lua, map[string]*_bintree_t{}},
	"MainGlue.lua":  &_bintree_t{mainglue_lua, map[string]*_bintree_t{}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
