package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x4d\x93\xe2\x36\x13\x3e\xc3\xaf\xd0\x6a\x5e\x33\xf2\x1b\xe3\x65\xf6\x90\xaa\x30\xe3\x49\xa5\x92\x54\xe5\x90\x54\x52\xd9\xb9\x24\xc0\x12\x61\x04\xb8\x30\x32\xb1\x65\x8a\x0d\x61\x7e\x7b\x5a\x5f\xb6\xec\xc1\xec\xe4\xb0\x97\x1c\x96\x1d\xf5\xc7\xa3\xee\x47\xad\x6e\x39\xcd\x62\x9a\xa2\x8d\xd8\xa5\x73\x56\xc4\x74\xcf\xa2\xd3\x04\x3f\xe0\x59\x84\x07\xa9\xb8\xc7\xc1\x04\x3f\xaa\xc5\x5a\x2f\x06\x6a\x41\x77\xfb\x7b\x7c\xee\x6b\xdf\x32\x4f\xac\xeb\xaa\xe4\xb1\x48\x32\x4e\xa8\xdf\xef\xe5\x4c\x94\x39\x47\x04\x7b\x9e\x37\x7a\x77\xc4\xfe\x78\x95\xe5\x3b\x2a\x08\x1d\x2f\x3e\x0a\x46\x7c\xbf\xcf\xf8\xd2\x01\x29\xf9\x15\x98\x42\xe4\x09\x5f\x87\xf1\x86\xe6\x44\x64\xbc\xdc\x2d\x58\x4e\x68\x70\xf7\xa5\x81\xb1\xc1\xf7\x7b\x32\x97\x1a\x02\xfc\x00\xa4\x0a\x06\x96\xe3\x75\x51\x2e\x08\x9e\x3c\x3c\x0e\x66\x38\x70\x32\x07\xa4\x1e\x40\x05\xfd\x5e\x99\xbf\x0a\xe1\x03\x1d\xfe\xf5\xcd\xf0\xf7\xd1\xf0\xab\x79\xf8\x3c\x04\xb0\x9a\x8a\x1a\xab\xd8\xb0\xf4\x55\x68\x5e\xf1\xc7\xf3\x9b\x9b\xff\x0d\xfe\x4f\xfc\xbf\xa7\xd3\xdb\x29\xbe\x7f\x78\xfc\xfa\x74\x9e\x78\xb3\x0f\x00\x8d\xa7\x53\xef\x0e\x1b\xd8\xfe\xb9\x5f\x91\x75\x7a\x6d\xb8\x5f\x00\x08\x82\x53\xd0\x2b\xcf\x23\xde\xd1\x3b\xfa\x3a\x68\x8b\x56\xe3\x0f\x87\x48\xd0\x35\xda\x31\x41\x05\x5d\xa4\xcc\x9c\x13\xc8\x40\xb4\x91\xbb\xe6\x60\xc8\x72\x67\x63\x96\xae\xe4\xce\xda\x30\xce\xb8\x60\x5c\xc0\x3a\x59\x21\xa9\x0a\x8d\x04\x89\x0d\xe3\x20\xee\x99\x75\x74\x3a\xcb\x15\xd4\x06\x4a\x82\x03\x4a\x38\x4a\xf6\x34\xc9\x0b\xe2\x3a\xf9\x68\x99\x49\x2b\x09\x26\x3e\xee\x19\x39\xf8\x51\x84\x75\x4d\xe0\x0a\xb1\xc2\x9c\x24\xb3\xe8\xa0\x24\x2c\x2d\x58\xc3\x47\x57\x4e\x87\x8f\xc8\x34\x24\x98\x56\xde\x2f\x81\xc7\x3a\x73\x62\x6c\x80\xae\xea\x3f\xfd\xab\x19\xc8\xf6\x92\x96\xc2\x61\xc0\x48\x10\xe5\x4b\xc4\xd9\x51\x10\x57\xea\x57\x21\x19\x81\x43\xcc\x56\x13\xe3\xf0\x52\x39\xb5\x78\xd9\x5e\xce\x51\x1d\x61\x98\xf0\x82\xe5\x82\x18\xdf\xc0\xc9\xb6\x9d\xee\x45\xfb\x6d\x18\xe2\x68\x8a\x71\x18\x3a\x9e\xa6\x9c\x40\x1c\xe0\xc1\x9f\x65\x06\x6d\xc2\x07\x3b\x58\x77\xd2\x63\xe9\x58\xc5\x69\x56\xb0\x2a\x4a\x10\xb7\x4b\xc4\x56\xb1\x0e\x07\xb4\x31\xb4\x0f\x5b\x12\xb0\xcb\xc3\x5b\x08\x46\x61\x71\xba\x63\x20\x78\xc4\xf5\x66\xd6\xb9\xc3\xca\x54\x86\x8e\x24\xdb\x33\x5e\xed\xaa\x8f\x2f\x67\x45\x99\x0a\x13\x98\x3d\x39\x27\x30\xa9\x8d\xa0\x53\x36\xa1\x91\x64\xc7\x8d\xd6\x92\x27\xaf\x5e\x1d\xa0\x25\xba\x0b\xa6\x91\xc7\x15\x62\xb4\x7f\x6b\x4b\x4b\xd0\x4b\x2a\xaa\x9c\x6c\x00\x9f\x2d\xd5\x4f\x67\xf9\xef\x12\x04\x46\x3a\xb2\x7c\x6d\x19\x54\x48\xe8\xad\x3e\x7f\xa9\xd5\x2d\x9a\x2e\x97\x73\xdb\x8d\x1a\xed\x2c\x08\xc3\xd0\xd7\x15\xcb\x33\x71\xb9\x8d\xb9\x42\x7d\x65\xf5\xbe\xaa\xa1\x45\x77\x01\xe8\x59\x2c\xc8\xed\xcd\xad\x42\x33\x17\x56\x13\x7f\xa0\x69\xc9\x22\x63\x91\xd8\xdd\xea\x26\x27\xd5\x17\x1b\x1d\x58\xdc\x28\xed\x73\x34\xea\xba\xe6\x6e\x60\x81\x6e\xef\xa1\x9c\x76\x06\xb6\x79\x3d\xed\x51\x75\x23\x68\xaf\xf6\x5d\xb6\xd3\x19\x2c\x2d\x9b\x90\x78\xcc\xfe\xeb\x7c\xd6\x6c\x7c\x0e\x0a\x65\x41\xda\x29\xd0\x24\x50\x2c\xd2\x36\x81\xed\x0b\xeb\x0a\xdb\x04\x36\x06\x89\xc4\x32\xf4\x5d\x1f\x1f\x2f\x33\xb2\x57\xfd\xd0\xbc\xe8\xae\x6e\xb2\x35\x33\xf8\x13\xb9\xc6\x29\xa3\xf9\xe5\x72\x91\xe0\x8d\x72\xe0\x49\x7a\x0d\xe4\x22\x65\x15\x88\xd5\x76\x82\x14\x4c\x5c\x2f\x5b\xf9\xf7\xb8\x11\x2f\xf1\x9b\x50\x63\xa7\x95\x10\xed\x55\x63\x5f\x3d\x51\x07\xdb\xd8\x5d\xc4\xb6\x3a\xed\xe5\x5e\x38\x39\xc2\x3a\x32\x57\xe3\x2d\x12\x79\xc9\xae\xde\x58\x39\x8d\xbb\x10\xb4\xb2\x09\xa1\x57\xfa\xb9\x58\xbf\x0e\x85\x7c\x1b\xce\xe7\x09\x3c\x91\x8e\xad\x54\xb7\xa6\x74\xeb\x52\x53\x95\x55\x57\x5a\x57\xb6\xca\xd1\x56\x59\xf5\x26\x50\x2f\x51\x28\xb3\x66\x33\x9f\xcf\x21\x92\x34\x32\xea\xd0\x39\x10\xfd\xaa\x7d\xbf\x67\x71\xb2\x4a\x62\xf4\x44\xd7\x45\xdf\x06\x28\xe1\x88\x9c\x1e\xce\x17\x07\x13\xd5\xeb\x97\x9c\xa4\x2e\x92\x3f\xe7\x40\x65\xa9\xbf\x3a\x2a\xf7\x34\xe1\x5b\x02\xef\xf0\x40\xce\xcf\x1a\x03\x4c\xb1\x54\xe1\xc9\x69\x93\xb3\x55\xa4\x2c\x4a\xbe\xa7\xf1\x56\x8e\x4b\xff\x3c\x23\x2d\xa0\x22\xce\x93\xbd\x9c\x6e\x4b\xd6\x84\xd1\x0a\x6c\x34\x0d\x9f\x65\x16\x2b\x4a\x9b\x0e\x6f\xbe\xfb\xf9\xdb\xa7\xdf\x7e\xf9\x1e\xf6\xc6\xb2\xef\xe3\xf3\x6c\x5c\x97\x8a\xd9\x17\x08\xf9\x55\xbb\x58\xb4\x1a\xd6\xd6\xf1\x12\x38\x08\x90\x89\x48\xcd\xea\x25\x43\x51\x84\xe0\x22\xd9\x93\xd3\x22\xf4\x6e\x34\xd2\x05\x51\x9d\xb2\xf4\xf5\xa5\x71\xbb\xe7\xae\x12\x9e\x14\x1b\x95\x4d\x80\x94\x55\xbf\xf1\x58\xaf\x1d\x9b\x35\xa2\x82\x3a\x8a\xf0\x87\xa7\x9f\x7e\x7c\xaf\x1f\xa1\x35\x46\xf5\x32\x37\x60\xd7\xec\xab\x37\xac\xda\xc9\x7c\xf7\xc8\x7f\xff\x04\x00\x00\xff\xff\x17\xa9\x93\xbc\x12\x0f\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 3858, mode: os.FileMode(420), modTime: time.Unix(1430959495, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\x51\x6a\xc3\x30\x10\x44\xbf\xad\x53\x0c\xfe\x72\x21\xc9\x0d\x7c\x84\xf6\x0e\xae\xb5\xae\x05\xca\xca\xac\x56\x35\xfe\xe9\xd9\xab\x8d\xe2\x52\x0a\xfd\x11\x68\x76\x66\x1e\x73\xbd\xe2\x35\x78\x1f\x69\x9f\x84\xb0\x52\xdc\x48\xf2\x05\x9c\x14\x42\x53\x8c\x07\x4a\xa6\xa5\x44\xec\x41\x57\x4c\x7c\xe8\x1a\xf8\x03\xef\x45\xa1\x2b\x21\x93\x7c\x92\x20\x70\x50\xe4\x59\xc2\xa6\x6e\x29\x3c\x6b\x48\x8c\xfb\x7e\x63\xda\x87\x85\x5f\x5c\x37\x27\x4f\x18\xd1\xf7\xae\x0b\x0b\xf4\xd8\xc8\x74\x8c\x55\x3a\xfd\xbd\x15\xb2\xeb\x4e\x6f\x56\xa9\xa4\x9b\x2f\xf7\xad\x75\x50\xcc\xf4\x37\xdc\x4c\x3f\xd1\x85\x2f\x20\x91\x9a\x8e\x69\xf2\xed\x38\x58\x5f\x8d\x1b\xd8\x66\xd9\xfd\x69\xff\x17\xf5\x60\x99\xa1\x9a\x93\x0c\xf5\x7d\x88\xec\x5d\x7b\xe4\xc4\xd4\x8d\x6f\x75\xe3\x13\x51\x09\x26\x7f\x8d\xe0\x10\x4f\xc8\xef\x8a\x16\x26\x2d\xc2\x10\x67\xbf\xef\x00\x00\x00\xff\xff\xb4\x73\xcf\x77\x80\x01\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 384, mode: os.FileMode(420), modTime: time.Unix(1430962075, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"MainGlue.lua": mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"MainGlue.lua": &_bintree_t{mainglue_lua, map[string]*_bintree_t{
	}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

