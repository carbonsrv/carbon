package glue

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _confglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x52\xbd\x8e\xd4\x30\x10\xae\x93\xa7\x18\xa5\x4a\xa4\xdd\xd3\x41\x89\xb4\x1d\x74\x40\x71\x07\xa2\x40\x08\x65\x93\x09\xb1\xe4\xb5\xa3\xf1\xe4\x72\x2b\x04\xcf\xce\xd8\xf9\xdd\x65\x73\x4a\x41\x47\x63\x39\xf1\x7c\x3f\xf3\xcd\xec\xf7\xf0\x41\x95\xa5\xc6\x2e\x27\x84\x1a\x75\x83\xe4\x76\x60\x2c\x03\x61\xae\xf5\x19\x5a\x87\x55\xab\xa1\x53\x5c\x43\x6e\xce\x5c\x2b\xf3\x03\x8e\x2d\x03\xd7\x08\x0e\xe9\x09\x09\x94\x51\x0c\xae\x20\xd5\x70\x5c\xb5\xa6\x60\x65\x0d\x9c\xba\x3b\x83\x5d\x5a\x99\x1d\x1c\x95\x29\x05\x26\xc4\xca\x38\xce\x4d\x81\x5e\x03\x3b\xb9\x33\x66\x71\xa4\x6d\x91\x6b\x28\x6c\x89\x70\x80\x24\x89\x23\x55\x01\x9f\x1b\x14\x70\x06\x07\xf9\x35\x92\x26\x5e\xd5\xc4\x51\x34\xd4\x3a\x26\xe1\xbd\x2b\xdb\x53\xe3\x6b\xe3\x08\xb5\xc3\x6b\x70\x5f\x34\x41\xbd\x21\x24\x12\xb4\xb6\x79\xd9\x3f\xa6\x9e\x4f\xe0\x5e\xd8\xf7\xee\xdf\x87\xf2\x55\xa9\xa0\xe5\x0b\xa4\xd8\x52\x2a\x67\xf8\x69\xca\xb8\x3f\xfa\xa6\x68\xbc\xc8\x7b\xe8\x6b\x6c\x7b\xe4\x1f\xdd\x8e\x19\xf5\x9e\x39\x3f\x6a\x9c\x2c\x0f\x14\x53\x78\x62\x67\xbe\x5b\x82\xfd\x2b\x5f\x44\x63\x5f\x92\xfc\xdb\xf7\x0f\xdf\x3f\x3e\x86\xb6\x2e\x42\x67\x6a\x71\x9e\xc7\xb2\x8b\x55\x74\x95\x4b\xc5\x0e\x7e\x7e\x4d\x5c\xf2\xed\x90\x3c\x25\xbf\xe6\x3e\x7b\xec\xa6\x16\xae\xf9\x1f\x3e\x8f\x02\xdb\x3d\xcd\x98\x97\x4c\xf9\x43\x2c\x79\xe4\xef\x03\x18\xa5\x47\x0f\xcb\x41\x85\x2a\x42\x6e\xc9\xc8\x8c\xfc\xd7\x72\x71\x3b\xb7\xb6\xb7\xff\xd3\xb6\x6e\xd8\xba\x2d\xa3\xbf\x9a\xe2\x97\xc7\xc5\x1c\x5f\x5a\xcd\xc1\xf1\x46\xf8\xcd\x8d\xf8\x17\xbb\x80\x45\x6d\x07\x39\x42\xd7\x4c\x0b\xe0\x3f\xc4\x15\x5b\xd3\x9e\x8e\x48\x69\x78\xf4\xb9\xbc\xbe\xbf\x9f\x83\x09\xa3\xba\x35\xd8\x41\x4f\x04\xde\x79\x01\x8f\xde\xc1\x30\xd8\xe5\x5e\xcc\x04\x57\xa9\xae\xe1\xdf\x90\x74\x20\x7e\xb2\x45\x84\x53\xad\x6f\xe6\x13\x3e\xf3\x50\xcf\x76\xb9\x51\x43\x14\xb7\x02\x08\x18\x96\x63\x0a\xe1\x52\x3f\xbc\xa7\x37\xb3\xc8\x44\x46\x5e\xb3\xbf\x78\xdd\xd9\x70\xfe\x5c\xeb\x35\xde\x10\xfc\x2a\xe7\x05\x3a\xeb\xd9\xff\x04\x00\x00\xff\xff\x8f\xb3\x47\x3b\xce\x06\x00\x00")

func confglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_confglue_lua,
		"ConfGlue.lua",
	)
}

func confglue_lua() (*asset, error) {
	bytes, err := confglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "ConfGlue.lua", size: 1742, mode: os.FileMode(420), modTime: time.Unix(1440160559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x4f\x73\xeb\x34\x10\x3f\x37\x9f\x42\x4f\x25\xad\x0c\x8e\xdb\x72\x60\x86\xb4\x2e\xf3\x06\x38\xc3\x0c\xef\x02\x49\x5e\x50\x1c\x25\xf1\xc4\x91\x8d\x2d\x67\x52\x42\xfa\xd9\x59\xfd\xb3\x65\xc7\x4e\xcb\xe1\x5d\xb8\xa4\x95\xb4\xfb\xdb\xdd\x9f\xf6\x8f\x9c\xa4\x11\x4d\xd0\x46\xec\x92\x39\x2b\x22\x9a\xb1\xf0\x38\xc1\x4f\x78\x16\xe2\x9b\x44\x3c\x62\x7f\x82\x9f\xd5\x62\xad\x17\x37\x6a\x41\x77\xd9\x23\x3e\x0d\x06\x5a\xb9\xcc\x63\xab\xbb\x2a\x79\x24\xe2\x94\x13\xea\x0d\xae\x72\x26\xca\x9c\x23\x82\x87\xc3\xe1\xfd\xb7\x07\xec\x8d\x57\x69\xbe\xa3\x82\xd0\xf1\xe2\x45\x30\xe2\x79\x03\xc6\x97\x2e\x4a\xc9\x2f\xe0\x14\x22\x8f\xf9\x3a\x88\x36\x34\x27\x22\xe5\xe5\x6e\xc1\x72\x42\xfd\x87\xef\x2c\x8e\xf5\x7f\x70\x25\xc3\xa9\x31\x40\x11\x50\x2a\x77\x60\x39\x5e\x17\xe5\x82\xe0\xc9\xd3\xf3\xcd\x0c\xfb\x4e\xf0\x00\x75\x05\x58\xfe\xe0\xaa\xcc\xdf\x85\xf0\x99\x8e\xfe\xfe\x38\xfa\xe3\x7e\xf4\xfd\x3c\x78\x1d\x01\x58\x4d\x46\x8d\x55\x6c\x58\xf2\x2e\xb4\x61\xf1\xe7\xeb\x87\xeb\xaf\x6e\xbe\x26\xde\x3f\xd3\xe9\xed\x14\x3f\x3e\x3d\xff\x70\x3c\x4d\x86\xb3\xcf\x00\x8d\xa7\xd3\xe1\x03\x36\xb0\x03\xa0\xbf\xa2\xeb\xf8\x5e\x7f\xbf\x01\x14\x04\x17\xa1\x57\xc3\x21\x19\x1e\x86\x07\x4f\x7b\x6d\xd1\x1c\x03\xa3\x11\x12\x74\x8d\x76\x4c\x50\x41\x17\x09\x33\x57\x05\x7b\xb0\xb5\x91\x66\x73\x90\x64\xb9\x63\x99\x25\x2b\x69\x5a\x0b\x46\x29\x17\x8c\x0b\x58\xc7\x2b\x24\x8f\x02\xb3\x83\xc4\x86\x71\xd8\xbe\x32\xeb\xf0\x78\x92\x2b\xc8\x0f\x14\xfb\x7b\x14\x73\x14\x67\x34\xce\x0b\xe2\x2a\x79\x68\x99\x4a\x29\x09\x26\x5e\x32\x46\xf6\x5e\x18\x62\x9d\x16\xb8\x42\xac\x30\x27\xf1\x2c\xdc\xab\x1d\x96\x14\xac\xa1\xa3\x93\xa7\x47\x47\xa4\x1a\x12\x44\x2b\xed\x73\xe0\xb1\x8e\x9c\x18\x19\xe0\xab\xfa\xa3\x7f\x35\x03\x69\x26\x69\x29\x1c\x06\xcc\x0e\xa2\x7c\x89\x38\x3b\x08\xe2\xee\x7a\x95\x4b\x66\xc3\x21\x66\xab\x89\x71\x78\xa9\x94\x5a\xbc\x6c\xbb\x63\x54\x57\x18\xc4\xbc\x60\xb9\x20\x46\xd7\x77\xa2\x6d\x87\xdb\x29\xbf\x0d\x02\x1c\x4e\x31\x0e\x02\x47\xd3\xe4\x13\x6c\xfb\xf8\xe6\xaf\x32\x85\x5e\xe1\x81\x1c\xac\x7b\xe9\xb1\x74\xac\xa2\x24\x2d\x58\xe5\x25\x6c\xb7\x53\xc4\xa6\xb1\x76\x07\x4e\x23\x68\x21\x36\x25\xc0\xca\xd3\x1d\x38\xa3\xb0\x38\xdd\x31\xd8\x78\xc6\xb5\x31\xab\xdc\x23\x65\x32\x43\x7b\x92\x66\x8c\x57\x56\xf5\xf5\xe5\xac\x28\x13\x61\x1c\xb3\x37\xe7\x38\x26\x4f\x43\x68\x97\x4d\x68\x24\xd9\x71\xbd\xb5\xe4\xc9\xda\xab\x1d\xb4\x44\xf7\xc1\x34\xe2\xb8\x40\x8c\xd6\x6f\x99\xb4\x04\x9d\x53\x51\xc5\x64\x1d\xf8\x62\xa1\xbe\x1d\xe5\x7f\x0b\x10\x18\xe9\x89\xf2\xbd\x69\x50\x21\xa1\x3b\x7d\xff\xf2\x54\x37\x69\xba\x5c\xce\x6d\x37\x6a\xb4\x33\x3f\x08\x02\x4f\x67\x2c\x4f\x45\x77\x1b\x73\x37\x75\xc9\x6a\xbb\xaa\xa1\x85\x0f\x3e\x9c\xb3\x48\x90\xdb\xeb\x5b\x85\x66\x0a\x56\x13\xbf\xa7\x49\xc9\x42\x23\x11\x5b\x6b\x75\x93\x93\xc7\x9d\x8d\x0e\x24\xae\xd5\xe9\x6b\x78\xdf\x57\xe6\xae\x63\xbe\xee\xef\x81\x9c\x77\x06\xb6\x59\x9e\xf6\xaa\xfa\x11\xb4\x56\xbb\x96\xed\x80\x06\x49\xcb\x26\x04\x1e\xb1\xff\x3b\x9f\x35\x1b\x5f\x82\x42\x99\x90\x76\x0a\x34\x09\x14\x8b\xa4\x4d\x60\xbb\x60\xdd\xcd\x36\x81\x8d\x41\x22\xb1\x0c\x7d\x97\xc7\xc7\x79\x44\xb6\xd4\xf7\xcd\x42\x77\xcf\x26\x5b\x33\x83\xdf\x88\x35\x4a\x18\xcd\xbb\xd3\x45\x82\x37\xd2\x81\xc7\xc9\x25\x90\x4e\xca\x2a\x10\x7b\xda\x0b\x52\x30\x71\x39\x6d\xe5\xff\xe3\x86\xbf\xc4\x6b\x42\x8d\x9d\x56\x42\xb4\x56\x8d\x7d\xf1\x46\x1d\x6c\x23\xd7\x89\x6d\xcf\xb4\x96\x5b\x70\x72\x84\xf5\x44\xae\xc6\x5b\x28\xf2\x92\x5d\xac\x58\x39\x8d\xfb\x10\xf4\x61\x13\x42\xaf\xcc\x7b\xb1\x7e\x1e\x0a\xf9\x38\x9c\xcf\x63\x78\x23\x1d\x5a\xb1\x6e\x4d\xee\xd6\xb9\xa6\x52\xab\x4e\xb5\xbe\x70\x95\xa2\x4d\xb3\xea\x51\xa0\x9e\xa2\x90\x67\xcd\x6e\x3e\x9f\x83\x27\x49\x68\x8e\x03\xe7\x46\xa4\x9f\xd6\x21\xa9\x4e\xe4\xb8\x70\xbe\x32\x98\xa8\x9e\xbb\xe4\x28\xcf\x42\xf9\x73\xf2\x55\x54\xe6\x4b\x03\xde\xc5\xbf\x65\x2c\x8a\x57\x71\x84\x3e\xd1\xb5\x7e\xcc\x7d\x4c\x62\x5a\xb0\xa2\x06\x4f\x62\xbe\x25\xf0\x2e\xf7\xe5\x38\x05\x0b\x7a\xae\xda\x30\xeb\x00\x30\xc5\x93\xe3\x26\x67\xab\x50\x09\x97\x3c\xa3\xd1\x56\x0e\x52\xef\x04\x51\x99\x80\x7b\xc4\x95\x04\xb8\xa4\xdc\xaa\x2c\x17\x51\x1e\x67\xf0\x9d\x95\xaf\x0b\x6d\x57\x71\xad\x96\x28\x0c\x51\x8b\x70\x07\x5a\x2b\xe2\x89\x14\x35\xb6\x41\x5b\xae\xd0\x6b\x88\xa0\x68\xfa\x75\x48\xf5\x1e\x54\x76\xbc\x2e\xcf\x8d\x68\x97\xcb\x51\x51\x58\x7f\x75\x16\x51\x14\xa2\xa3\xf4\x1b\xf2\x03\x9e\xc9\x77\x20\x00\x9f\x9c\x6f\x06\x73\xd6\xe0\xb4\xa0\xee\x70\x14\xf2\x04\x60\xf7\x55\xae\x9c\x7b\x28\x5e\x00\x6c\x42\x67\x1d\xe1\x48\x8d\x2e\xd1\x56\x24\xcb\x34\x52\x1e\x7a\x0d\xe9\x0f\x3f\xfd\xf2\xe3\xa7\xdf\x7f\xfd\x19\xee\x0e\xcb\x01\x8c\x4f\xb3\x71\x5d\xb3\xa4\x4e\x2c\xf8\x56\xcc\x58\xee\xa4\x51\xf1\xc2\x05\x3d\x6c\x12\x22\x69\xf0\xa1\xe5\x2f\xd9\x8a\xc2\x2b\x06\x08\xd1\x97\xeb\xee\xb4\xee\x67\x6e\x95\x25\x9a\x01\x58\x51\x88\xfa\xec\x7a\xba\x24\x65\x6d\x7b\xf5\x65\xfd\x1b\x00\x00\xff\xff\x0c\xff\xae\x0c\x2b\x10\x00\x00")

func mainglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_mainglue_lua,
		"MainGlue.lua",
	)
}

func mainglue_lua() (*asset, error) {
	bytes, err := mainglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "MainGlue.lua", size: 4139, mode: os.FileMode(420), modTime: time.Unix(1439924488, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routeglue_lua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x51\xbb\x6e\xc3\x30\x0c\x9c\xad\xaf\x20\x3c\xc9\x40\x93\x06\x1d\x0b\x64\xeb\x17\x74\xe8\x5a\xa8\x36\xd5\x18\x90\xa9\x54\xa6\x8b\x64\xe9\xb7\x97\xa2\x6a\xbb\xaf\x21\x43\x06\x5b\x12\x79\x77\x3a\x9e\x36\x1b\x78\x44\x9e\x12\x81\x9f\xa8\xe5\x3e\x92\x99\x37\xd0\x46\x62\x24\xb6\x9d\x63\x77\x23\xa7\x0e\xe5\xcf\xe7\x23\x36\xa6\x0a\xb1\x75\x41\x6b\xb0\x2f\x4b\x4c\x70\xb7\xdb\x2d\x9d\x8c\xcb\x2d\x5d\xa5\x57\x33\x9e\xf8\xf6\xc0\x43\xa8\x57\xb6\xea\x0b\xaa\x96\x5a\xef\x21\x63\xf5\xb6\x06\xf6\x52\x1c\x39\xf5\xf4\x5a\x03\x1f\x90\x4c\x55\xad\xf0\x0c\x31\x15\x86\x11\xff\x92\xd8\xbd\x04\xac\xc1\x51\xa7\xb0\x6d\x42\xea\x30\xc1\xc7\x1e\xa8\x0f\xff\x4b\xdd\x17\x8c\x6d\x8a\xe6\x8f\x3e\xc7\xe2\xa2\xdc\x20\x00\xea\x4c\x69\x9f\x78\xfb\x20\x35\xfb\x2d\x97\x1c\x12\xbd\x63\xe2\x6d\x21\x71\x6c\x0f\x2e\x8d\xa1\x6f\xd1\x7e\x49\x36\x8d\xc9\x12\x46\x72\x7f\x92\x96\xfa\x1c\x79\xf2\x1e\x7c\x8a\x03\xcc\xca\xeb\x23\x1c\x5d\x72\x83\x25\x37\xe4\xd4\x65\xdc\xbc\xfb\x35\x4d\x49\xd3\x8b\xdb\x67\x45\x67\xae\x5d\x8c\x2b\x55\xb8\x99\xec\x35\xa2\x25\xd1\x2a\x95\xa7\x17\x2d\x39\xe9\x68\x73\xc9\x97\x51\xf3\xa7\x9a\xa3\xa8\xeb\x66\x75\xe6\x63\xba\xdc\x58\x06\x5f\xd9\xd7\x62\xe4\x6d\xc2\x74\xbe\xd8\x89\xa2\xaf\x6c\xe5\x33\x00\x00\xff\xff\x39\xf6\x47\xc5\x46\x03\x00\x00")

func routeglue_lua_bytes() ([]byte, error) {
	return bindata_read(
		_routeglue_lua,
		"RouteGlue.lua",
	)
}

func routeglue_lua() (*asset, error) {
	bytes, err := routeglue_lua_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "RouteGlue.lua", size: 838, mode: os.FileMode(420), modTime: time.Unix(1439924494, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ConfGlue.lua":  confglue_lua,
	"MainGlue.lua":  mainglue_lua,
	"RouteGlue.lua": routeglue_lua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"ConfGlue.lua":  &_bintree_t{confglue_lua, map[string]*_bintree_t{}},
	"MainGlue.lua":  &_bintree_t{mainglue_lua, map[string]*_bintree_t{}},
	"RouteGlue.lua": &_bintree_t{routeglue_lua, map[string]*_bintree_t{}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
